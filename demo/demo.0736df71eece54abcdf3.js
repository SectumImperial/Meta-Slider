!function(){"use strict";var e,t={868:function(e,t,i){var n=i(755),s=i.n(n);i(419);class o{constructor(e){this.handleContentClick=e=>{const t=e.target;void 0===t||t.classList.contains("js-plugin-slider")||this.handleFormChange()},this.dom={root:e,indicator:null,form:null,content:null,thumb:null},this.numericVariables={min:0,max:10,step:1,from:1,to:null},this.booleanVariables={range:!1,marks:!1,tip:!1,progress:!1,vertical:!1},this.formValues=new Map,this.handleItemChange=this.handleItemChange.bind(this),this.handleContentPointerDown=this.handleContentPointerDown.bind(this),this.handleContentClick=this.handleContentClick.bind(this),this.handleThumbKeyPress=this.handleThumbKeyPress.bind(this),this.handleThumbTouchMove=this.handleThumbTouchMove.bind(this),this.handleFormChange=this.handleFormChange.bind(this),this.init()}init(){this.findElements(),this.createSlider(this.getSliderOptions()),this.addListeners()}static getFormValues(e){const t=new Map;return Array.from(e.querySelectorAll(".js-slider__input[data-role]")).forEach((e=>{const i=e.getAttribute("data-role");null!==i&&e instanceof HTMLInputElement&&t.set(i,e.value)})),t}addListeners(){var e,t;if(void 0===this.dom.form||null===this.dom.form)return;Array.from(this.dom.form.querySelectorAll(".js-slider__input")).forEach((e=>{if(e instanceof HTMLElement){const{role:t}=e.dataset;t&&e.addEventListener("change",(e=>{const t=e;this.handleItemChange(t)}))}})),null===(e=this.dom.content)||void 0===e||e.addEventListener("pointerdown",this.handleContentPointerDown),null===(t=this.dom.content)||void 0===t||t.addEventListener("click",this.handleContentClick),this.dom.thumb&&(this.dom.thumb.addEventListener("keydown",(e=>this.handleThumbKeyPress(e))),this.dom.thumb.addEventListener("touchmove",this.handleThumbTouchMove,{passive:!0}))}toggleIndicator(){this.dom.indicator&&(this.dom.indicator.classList.toggle("main__slider-indicator_active"),setTimeout((()=>{this.dom.indicator&&this.dom.indicator.classList.toggle("main__slider-indicator_active")}),100))}handleItemChange(e){var t;const{target:i}=e;if(i instanceof HTMLInputElement){const{role:e}=i.dataset,n=null===(t=this.mapElements)||void 0===t?void 0:t.get(`${e}`);if(void 0===n||void 0===this.slider)return;const s=this.slider.getValue(n);let o;"boolean"==typeof s?o=i.checked:"number"==typeof s&&(o=Number(i.value)),void 0!==o&&(this.slider.setValue(`${n}`,o),"valueFrom"!==n&&"valueTo"!==n&&null!==this.dom.content&&void 0!==this.dom.content&&(this.dom.content.innerHTML="",this.createSlider(this.slider.getState())),this.handleFormChange())}}hasFormChanged(e){const t=o.getFormValues(e);if(t.size!==this.formValues.size)return this.formValues=t,!0;for(const[e,i]of this.formValues.entries())if(t.get(e)!==i)return this.formValues=t,!0;return!1}handleFormChange(){this.updateForm(),this.hasFormChanged(this.dom.form)&&this.toggleIndicator(),this.findElements()}createSlider(e){void 0!==this.dom.content&&null!==this.dom.content&&(this.slider=s()(this.dom.content).sliderPlugin(e),this.handleFormChange())}findElements(){var e,t,i,n;if(this.dom.indicator=this.dom.root.querySelector(".js-main__slider-indicator"),this.dom.form=this.dom.root.querySelector(".js-slider__form"),!this.dom.form)return;const s=e=>{var t;return null===(t=this.dom.form)||void 0===t?void 0:t.querySelector(`.js-slider__input[data-role="${e}"]`)};this.mapElements=new Map,this.numericVariables.min=Number(null===(e=s("min"))||void 0===e?void 0:e.value),this.mapElements.set("min","min"),this.numericVariables.max=Number(null===(t=s("max"))||void 0===t?void 0:t.value),this.mapElements.set("max","max"),this.numericVariables.step=Number(null===(i=s("step"))||void 0===i?void 0:i.value),this.mapElements.set("step","step");const r=s("from");this.numericVariables.from=Number(r.value),r.step=`${this.numericVariables.step}`,this.mapElements.set("from","valueFrom");const a=s("to");this.numericVariables.to=Number(a.value),a.step=`${this.numericVariables.step}`,this.mapElements.set("to","valueTo");const l=s("range");this.booleanVariables.range=l.checked,a.disabled=!this.booleanVariables.range,this.mapElements.set("range","isRange");const h=s("marks");this.booleanVariables.marks=h.checked,this.mapElements.set("marks","scaleMarks");const d=s("tip");this.booleanVariables.tip=d.checked,this.mapElements.set("tip","isTip");const m=s("progress");this.booleanVariables.progress=m.checked,this.mapElements.set("progress","isProgress");const u=s("vertical");this.booleanVariables.vertical=u.checked,this.mapElements.set("vertical","isVertical"),this.dom.content=this.dom.root.querySelector(".js-slider__content"),this.dom.thumb=(null===(n=this.dom.content)||void 0===n?void 0:n.querySelector(".js-plugin-slider__thumb"))||null,void 0!==this.dom.form&&(this.formValues=o.getFormValues(this.dom.form))}updateForm(){void 0!==this.mapElements&&void 0!==this.dom.form&&void 0!==this.slider&&this.mapElements.forEach(((e,t)=>{var i,n;const s=null===(i=this.dom.form)||void 0===i?void 0:i.querySelector(`.js-slider__input[data-role="${t}"]`);if(null===s)return;const o=null===(n=this.slider)||void 0===n?void 0:n.getValue(e);"number"==typeof o?s.value=`${o}`:"boolean"==typeof o&&(s.checked=o)}))}handleContentPointerDown(){var e,t;const i=()=>{this.handleFormChange()},n=()=>{var e,t;null===(e=this.dom.content)||void 0===e||e.removeEventListener("pointermove",i),null===(t=this.dom.content)||void 0===t||t.removeEventListener("pointerup",n)};null===(e=this.dom.content)||void 0===e||e.addEventListener("pointermove",i),null===(t=this.dom.content)||void 0===t||t.addEventListener("pointerup",n)}handleThumbKeyPress(e){const{key:t}=e;["ArrowLeft","ArrowUp","ArrowRight","ArrowDown"].includes(t)&&this.handleFormChange()}handleThumbTouchMove(){const e=e=>{e.stopImmediatePropagation(),this.handleFormChange()},t=()=>{document.removeEventListener("touchmove",e),document.removeEventListener("touchend",t)};document.addEventListener("touchmove",e),document.addEventListener("touchend",t)}getSliderOptions(){return{min:this.numericVariables.min,max:this.numericVariables.max,valueFrom:this.numericVariables.from||0,valueTo:this.numericVariables.to||0,step:this.numericVariables.step||1,scaleMarks:this.booleanVariables.marks,isTip:this.booleanVariables.tip,isProgress:this.booleanVariables.progress,isRange:this.booleanVariables.range,isVertical:this.booleanVariables.vertical}}}document.querySelectorAll(".js-main__slider").forEach((e=>new o(e)))}},i={};function n(e){var s=i[e];if(void 0!==s)return s.exports;var o=i[e]={exports:{}};return t[e].call(o.exports,o,o.exports,n),o.exports}n.m=t,e=[],n.O=function(t,i,s,o){if(!i){var r=1/0;for(d=0;d<e.length;d++){i=e[d][0],s=e[d][1],o=e[d][2];for(var a=!0,l=0;l<i.length;l++)(!1&o||r>=o)&&Object.keys(n.O).every((function(e){return n.O[e](i[l])}))?i.splice(l--,1):(a=!1,o<r&&(r=o));if(a){e.splice(d--,1);var h=s();void 0!==h&&(t=h)}}return t}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[i,s,o]},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){var e={577:0,309:0};n.O.j=function(t){return 0===e[t]};var t=function(t,i){var s,o,r=i[0],a=i[1],l=i[2],h=0;if(r.some((function(t){return 0!==e[t]}))){for(s in a)n.o(a,s)&&(n.m[s]=a[s]);if(l)var d=l(n)}for(t&&t(i);h<r.length;h++)o=r[h],n.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return n.O(d)},i=self.webpackChunkmeta_slider=self.webpackChunkmeta_slider||[];i.forEach(t.bind(null,0)),i.push=t.bind(null,i.push.bind(i))}();var s=n.O(void 0,[755,419],(function(){return n(868)}));s=n.O(s)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,