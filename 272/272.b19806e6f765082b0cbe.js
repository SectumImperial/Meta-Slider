"use strict";(self.webpackChunkmeta_slider=self.webpackChunkmeta_slider||[]).push([[272],{272:function(t,e,r){var n=r(755),i=r.n(n);function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.observers={}}var e,r,n;return e=t,(r=[{key:"addSubscriber",value:function(t,e){if(this.observers[t]){var r=this.observers[t];this.observers[t]=[].concat(o(r),[e])}else this.observers[t]=[e]}},{key:"removeSubscriber",value:function(t,e){this.observers[t].filter((function(t){return t!==e}))}},{key:"emit",value:function(t,e){(this.observers[t]||[]).forEach((function(r){r.update(e,t)}))}}])&&u(e.prototype,r),n&&u(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),a="VALUE_CHANGED",l="VALUE_START_CHANGE",f="DATA_COLLECTED",h="VALUE_CHANGED",p=" SCALE_CLICKED",b="KEY_DOWN";function y(t){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},y(t)}function m(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function d(t,e){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},d(t,e)}function v(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=g(t);if(e){var i=g(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return P(this,r)}}function P(t,e){if(e&&("object"===y(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function g(t){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},g(t)}var w=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&d(t,e)}(o,t);var e,r,n,i=v(o);function o(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(r=i.call(this)).isVertical=e,r.direction=r.isVertical?"clientY":"clientX",r.startPoint=r.isVertical?"top":"left",r.size=r.isVertical?"height":"width",r.mod=r.isVertical?"vertical":"horizontal",r.root=t,r}return e=o,(r=[{key:"createElement",value:function(t){var e=document.createElement("div");return e.className=t,e}},{key:"performMouseMove",value:function(t,e){var r=this,n=function(n){n.preventDefault();var i=r.root.getBoundingClientRect()[r.startPoint],o=n[r.direction]-t-i;r.emit(l,{coordsMove:o,thumbId:e})};document.addEventListener("mousemove",n),document.addEventListener("mouseup",(function t(){document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",t)}))}},{key:"performToucMove",value:function(t,e){var r=this,n=function(n){n.stopImmediatePropagation();var i=r.root.getBoundingClientRect()[r.startPoint],o=n.touches[0][r.direction]-t-i;r.emit(l,{coordsMove:o,thumbId:e})};document.addEventListener("touchmove",n),document.addEventListener("touchend",(function t(){document.removeEventListener("touchmove",n),document.removeEventListener("touchend",t)}))}},{key:"performKeyDown",value:function(t,e){this.emit(b,{keyEvent:t,thumbId:e})}}])&&m(e.prototype,r),n&&m(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(c);function O(t){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},O(t)}function T(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function k(t,e){return k=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},k(t,e)}function j(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=_(t);if(e){var i=_(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return S(this,r)}}function S(t,e){if(e&&("object"===O(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var E=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&k(t,e)}(o,t);var e,r,n,i=j(o);function o(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var r=t.root,n=t.positionStart,s=t.positionEnd,u=t.isVertical;return(e=i.call(this,r,u)).positionStart=n,e.positionEnd=s,e.progress=e.createElement("plugin-slider__progress"),e.setProgress(),e}return e=o,r=[{key:"setProgress",value:function(){this.progress.style[this.startPoint]="".concat(this.positionStart,"%"),this.progress.style[this.size]="".concat(this.positionEnd,"%"),this.root.append(this.progress)}},{key:"setProgressPosition",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100;this.progress.style[this.startPoint]="".concat(t,"%"),this.progress.style[this.size]="".concat(e,"%")}}],r&&T(e.prototype,r),n&&T(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(w),R=E;function F(t){return F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},F(t)}function V(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function M(t,e){return M=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},M(t,e)}function x(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=C(t);if(e){var i=C(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return D(this,r)}}function D(t,e){if(e&&("object"===F(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function C(t){return C=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},C(t)}var A=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&M(t,e)}(o,t);var e,r,n,i=x(o);function o(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(r=i.call(this,t,e)).initScale(),r}return e=o,(r=[{key:"initScale",value:function(){this.scale=this.createElement("plugin-slider__scale"),this.isVertical&&this.scale.classList.add("plugin-slider__scale_vertical"),this.isVertical||this.scale.classList.add("plugin-slider__scale_horizontal"),this.addScale(),this.addListenners()}},{key:"getScale",value:function(){return this.scale||(this.scale=this.createElement("plugin-slider__scale")),this.scale}},{key:"addScale",value:function(){this.root.append(this.scale)}},{key:"addListenners",value:function(){this.scale.addEventListener("click",this.handleClick.bind(this))}},{key:"handleClick",value:function(t){if(t.target.closest(".plugin-slider__scale")){var e=this.scale.getBoundingClientRect()[this.size],r=this.scale.getBoundingClientRect()[this.startPoint],n=t[this.direction]-r;if(!(n>e||n<0)){var i={coordsMove:n,scaleSize:e};this.emit(p,i)}}}}])&&V(e.prototype,r),n&&V(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(w);function I(t){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},I(t)}function L(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function N(t,e){return N=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},N(t,e)}function B(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=z(t);if(e){var i=z(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return G(this,r)}}function G(t,e){if(e&&("object"===I(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function z(t){return z=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},z(t)}var U=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&N(t,e)}(o,t);var e,r,n,i=B(o);function o(t,e,r){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(n=i.call(this,t,r)).marks=e,n.init(),n}return e=o,(r=[{key:"init",value:function(){this.createMarks()}},{key:"createMarks",value:function(){var t=this;this.marks.forEach((function(e,r){return t.createMark(e,r)}))}},{key:"createMark",value:function(t,e){var r=this.createElement("plugin-slider__mark");r.classList.add("plugin-slider__mark_".concat(this.mod)),r.style[this.startPoint]="".concat(t,"%");var n=document.createElement("span");n.className="plugin-slider__mark-value",n.classList.add("plugin-slider__mark-value_".concat(this.mod)),n.innerText="".concat(e),r.append(n),this.root.append(r)}}])&&L(e.prototype,r),n&&L(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(w);function K(t){return K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},K(t)}function H(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Z(){return Z="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Y(t,e);if(n){var i=Object.getOwnPropertyDescriptor(n,e);return i.get?i.get.call(arguments.length<3?t:r):i.value}},Z.apply(this,arguments)}function Y(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=q(t)););return t}function W(t,e){return W=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},W(t,e)}function X(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=q(t);if(e){var i=q(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return $(this,r)}}function $(t,e){if(e&&("object"===K(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function q(t){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},q(t)}var J=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&W(t,e)}(o,t);var e,r,n,i=X(o);function o(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var r=t.root,n=t.thumbPercent,s=void 0===n?0:n,u=t.id,c=void 0===u?"valueFrom":u,a=t.isVertical;return(e=i.call(this,r,a)).thumbPercent=s,e.thumbId=c,e.initThumb(),e}return e=o,(r=[{key:"initThumb",value:function(){this.thumbElement=this.createElement("plugin-slider__thumb"),this.thumbElement.id=this.thumbId,this.thumbElement.tabIndex=1,this.root.append(this.thumbElement),this.setPosition(this.thumbPercent),this.addListeners()}},{key:"setPosition",value:function(t){this.thumbPercent=t,this.checkZInd(),this.thumbElement.style[this.startPoint]="".concat(this.thumbPercent,"%")}},{key:"getThumb",value:function(){return this.thumbElement}},{key:"getThumbId",value:function(){return this.thumbId}},{key:"checkZInd",value:function(){"valueFrom"===this.thumbId&&100===this.thumbPercent&&(this.thumbElement.style.zIndex="10"),"valueFrom"===this.thumbId&&this.thumbPercent<100&&(this.thumbElement.style.zIndex="6"),"valueTo"===this.thumbId&&0===this.thumbPercent&&(this.thumbElement.style.zIndex="10"),"valueTo"===this.thumbId&&this.thumbPercent>0&&(this.thumbElement.style.zIndex="5")}},{key:"addListeners",value:function(){this.thumbElement.addEventListener("mousedown",this.mouseDown.bind(this)),this.thumbElement.addEventListener("keydown",this.keyDown.bind(this)),this.thumbElement.addEventListener("touchstart",this.touchDown.bind(this),{passive:!0})}},{key:"touchDown",value:function(t){t.preventDefault();var e=this.thumbElement.getBoundingClientRect()[this.startPoint];this.moved=t.touches[0][this.direction]-e,Z(q(o.prototype),"performToucMove",this).call(this,this.moved,this.thumbId)}},{key:"mouseDown",value:function(t){t.preventDefault(),this.moved=t[this.direction]-this.thumbElement.getBoundingClientRect()[this.startPoint],this.checkZInd(),Z(q(o.prototype),"performMouseMove",this).call(this,this.moved,this.thumbId)}},{key:"keyDown",value:function(t){t.preventDefault();var e=t.key;"ArrowLeft"!==e&&"ArrowUp"!==e&&"ArrowRight"!==e&&"ArrowDown"!==e||t.preventDefault(),("ArrowLeft"===e&&!this.isVertical||"ArrowUp"===e&&this.isVertical)&&Z(q(o.prototype),"performKeyDown",this).call(this,"decrement",this.thumbId),("ArrowRight"===e&&!this.isVertical||"ArrowDown"===e&&this.isVertical)&&Z(q(o.prototype),"performKeyDown",this).call(this,"increment",this.thumbId)}}])&&H(e.prototype,r),n&&H(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(w);function Q(t){return Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Q(t)}function tt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function et(){return et="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=rt(t,e);if(n){var i=Object.getOwnPropertyDescriptor(n,e);return i.get?i.get.call(arguments.length<3?t:r):i.value}},et.apply(this,arguments)}function rt(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=st(t)););return t}function nt(t,e){return nt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},nt(t,e)}function it(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st(t);if(e){var i=st(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ot(this,r)}}function ot(t,e){if(e&&("object"===Q(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function st(t){return st=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},st(t)}var ut=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&nt(t,e)}(o,t);var e,r,n,i=it(o);function o(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var r=t.root,n=t.percentPosition,s=t.valueTip,u=t.isVertical;return(e=i.call(this,r,u)).percentPosition=n,e.valueTip=s,e.tip=e.createTip(),e.addTip(),e}return e=o,(r=[{key:"setValueTip",value:function(t){this.tip.innerText="".concat(t)}},{key:"hideTip",value:function(){this.tip.style.display="none"}},{key:"showTip",value:function(){this.tip.style.display=""}},{key:"createTip",value:function(){var t=this.createElement("plugin-slider__tip");return t.classList.add("plugin-slider__tip_".concat(this.mod)),t.innerText="".concat(this.valueTip),t.style[et(st(o.prototype),"startPoint",this)]="".concat(this.percentPosition,"%"),t}},{key:"addTip",value:function(){this.root.append(this.tip)}},{key:"setPosition",value:function(t,e){this.tip.style[this.startPoint]="".concat(t,"%"),this.tip.innerText="".concat(e)}}])&&tt(e.prototype,r),n&&tt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(w);function ct(t){return ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ct(t)}function at(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function lt(t,e){return lt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},lt(t,e)}function ft(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=pt(t);if(e){var i=pt(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ht(this,r)}}function ht(t,e){if(e&&("object"===ct(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function pt(t){return pt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},pt(t)}var bt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&lt(t,e)}(o,t);var e,r,n,i=ft(o);function o(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(r=i.call(this)).state=e,r.createVariables(t,e),r.initSlider(),r.setState(e),r}return e=o,(r=[{key:"initSlider",value:function(){this.slider=this.createSlider(),this.createlements(),this.addSlider()}},{key:"update",value:function(t,e){if(e===l){var r=this.sliderCompnents.size,n=this.scaleElement.getBoundingClientRect()[r],i=Object.assign(Object.assign({},t),{scaleSize:n});this.emit(f,i)}e!==p&&e!==b||this.emit(f,t)}},{key:"createVariables",value:function(t,e){var r=e.isTip,n=e.valueFrom,i=e.valueTo,o=e.thumbPercentFrom,s=e.thumbPercentTo,u=e.isProgress,c=e.isRange,a=e.scaleMap,l=e.isVertical,f=e.scaleMarks;this.thumbPercentFrom=o,s&&(this.thumbPercentTo=s),this.isTip=r||!1,this.tipValueFrom=n||0,this.tipValueTo=i||0,this.isProgress=u||!1,this.isRange=c||!1,this.isVertical=l||!1,this.scaleMap=a,this.isScaleMarks=f,this.root=t}},{key:"createlements",value:function(){if(this.sliderCompnents=new w(this.slider,this.isVertical),this.scale=new A(this.slider,this.isVertical),this.scaleElement=this.scale.getScale(),this.thumbFrom=new J({root:this.scaleElement,thumbPercent:this.thumbPercentFrom,id:"valueFrom",isVertical:this.isVertical}),this.isRange&&this.thumbPercentTo&&(this.thumbTo=new J({root:this.scaleElement,thumbPercent:this.thumbPercentTo,id:"valueTo",isVertical:this.isVertical})),this.isTip&&(this.tipFrom=new ut({root:this.scaleElement,percentPosition:this.thumbPercentFrom,valueTip:this.tipValueFrom,isVertical:this.isVertical})),this.isTip&&this.thumbPercentTo&&this.isRange&&void 0!==this.tipValueTo&&(this.tipTo=new ut({root:this.scaleElement,percentPosition:this.thumbPercentTo,valueTip:this.tipValueTo,isVertical:this.isVertical})),this.isProgress&&!this.isRange&&(this.progress=new R({root:this.scaleElement,positionStart:this.thumbPercentFrom,positionEnd:0,isVertical:this.isVertical})),this.isProgress&&this.isRange){var t=this.thumbPercentTo?this.thumbPercentTo-this.thumbPercentFrom:0;this.progress=new R({root:this.scaleElement,positionStart:this.thumbPercentFrom,positionEnd:t,isVertical:this.isVertical})}this.scaleMap&&this.isScaleMarks&&(this.scaleMarks=new U(this.scaleElement,this.scaleMap,this.isVertical))}},{key:"addSlider",value:function(){this.root.append(this.slider)}},{key:"createSlider",value:function(){var t=document.createElement("div");return t.className="plugin-slider",t}},{key:"setState",value:function(t){var e,r,n,i,o,s,u=t.thumbPercentFrom,c=t.valueFrom,a=t.isRange,l=t.thumbPercentTo,f=t.valueTo;this.thumbPercentFrom=u,this.thumbFrom.setPosition(this.thumbPercentFrom),a&&void 0!==l&&this.thumbTo&&(this.thumbPercentTo=l,this.thumbTo.setPosition(this.thumbPercentTo)),this.isTip&&this.tipFrom&&(this.tipValueFrom=c,this.tipFrom.setPosition(this.thumbPercentFrom,this.tipValueFrom)),this.isNeedDoubleTip()?(null===(e=this.tipFrom)||void 0===e||e.setValueTip("".concat(c," - ").concat(f)),null===(r=this.tipTo)||void 0===r||r.hideTip()):null===(n=this.tipTo)||void 0===n||n.showTip(),a&&this.tipTo&&void 0!==f&&this.thumbPercentTo&&(this.tipValueTo=f,this.tipTo.setPosition(this.thumbPercentTo,this.tipValueTo)),this.isProgress&&!a&&(null===(i=this.progress)||void 0===i||i.setProgressPosition(0,this.thumbPercentFrom)),this.isProgress&&a&&l&&(null===(o=this.progress)||void 0===o||o.setProgressPosition(this.thumbPercentFrom,l-u)),this.isProgress&&l===u&&(null===(s=this.progress)||void 0===s||s.setProgressPosition(0,0))}},{key:"isNeedDoubleTip",value:function(){return this.isTip&&this.isRange&&void 0!==this.thumbPercentTo&&(this.thumbPercentTo-this.thumbPercentFrom<=2||0===this.thumbPercentTo&&0===this.thumbPercentFrom)}}])&&at(e.prototype,r),n&&at(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(c);function yt(t){return yt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},yt(t)}function mt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function dt(t,e){return dt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},dt(t,e)}function vt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=gt(t);if(e){var i=gt(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return Pt(this,r)}}function Pt(t,e){if(e&&("object"===yt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function gt(t){return gt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},gt(t)}var wt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&dt(t,e)}(o,t);var e,r,n,i=vt(o);function o(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(r=i.call(this)).state=e,r.initView(t,e),r}return e=o,(r=[{key:"initView",value:function(t,e){var r=e.isRange;this.root=t,this.isRange=r,this.slider=new bt(t,e),this.addSubscribeSlider()}},{key:"updateSlider",value:function(t){this.slider.setState(t)}},{key:"update",value:function(t,e){e===f&&this.emit(h,t),e===h&&this.updateSlider(t)}},{key:"addSubscribeSlider",value:function(){this.slider.thumbFrom.addSubscriber(l,this.slider),this.slider.thumbFrom.addSubscriber(b,this.slider),this.isRange&&this.slider.thumbTo&&(this.slider.thumbTo.addSubscriber(l,this.slider),this.slider.thumbTo.addSubscriber(b,this.slider)),this.slider.scale.addSubscriber(p,this.slider),this.slider.addSubscriber(p,this),this.slider.addSubscriber(f,this)}}])&&mt(e.prototype,r),n&&mt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(c),Ot={valueFrom:"thumbPercentFrom",valueTo:"thumbPercentTo"};function Tt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function kt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var jt=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.state=e,this.init()}var e,r,n;return e=t,(r=[{key:"init",value:function(){this.stepPercent=Number(this.state.step/this.findValPercent())}},{key:"setState",value:function(t){var e=this.state;this.state=Object.assign(Object.assign({},e),t)}},{key:"getState",value:function(){return this.state}},{key:"updateStateMove",value:function(t,e){this.findSuitablePercent(t,e)}},{key:"findSuitablePercent",value:function(t,e){var r,n,i=this.state,o=i.step,s=i.max,u=i.min,c=Math.floor(t/this.stepPercent),a=Math.ceil(t/this.stepPercent),l=u+o*c,f=u+o*a,h=this.stepPercent*c,p=this.stepPercent*a,b=Number((this.stepPercent/2).toFixed(3));Number((t%this.stepPercent).toFixed(3))<b?(r=l,n=h):(r=f,n=p);var y=Math.ceil((s-u)/o),m=this.stepPercent*(y-1);(100===t||100-(100-m)/2<t)&&(r=s,n=100),void 0===n&&(n=this.stepPercent*c),this.handleMove({value:r,thumb:e,percent:n})}},{key:"handleMove",value:function(t){var e=t.value,r=t.thumb,n=t.percent;"valueFrom"===r&&this.handleMoveFrom({value:e,thumb:r,percent:n}),"valueTo"===r&&this.handleMoveTo({value:e,thumb:r,percent:n})}},{key:"handleMoveFrom",value:function(t){var e=t.value,r=t.thumb,n=t.percent,i=this.state,o=i.valueTo,s=i.thumbPercentTo;this.isValTheSamePos({value:e,valueAnotherThumb:o,thumbPercent:s,thumb:r,idVal:"valueFrom"})&&void 0!==o&&void 0!==s?this.updateMoved(o,s,r):void 0!==e&&this.updateMoved(e,n,r)}},{key:"handleMoveTo",value:function(t){var e=t.value,r=t.thumb,n=t.percent,i=this.state,o=i.valueFrom,s=i.thumbPercentFrom;this.isValTheSamePos({value:e,valueAnotherThumb:o,thumbPercent:s,thumb:r,idVal:"valueTo"})&&void 0!==o?this.updateMoved(o,s,r):void 0!==e&&this.updateMoved(e,n,r)}},{key:"isValTheSamePos",value:function(t){var e=t.value,r=t.valueAnotherThumb,n=t.thumbPercent,i=t.thumb,o=t.idVal,s=!1;return void 0!==e&&void 0!==r&&(s="valueFrom"===o?e>r:e<r),this.state.isRange&&void 0!==n&&i===o&&s}},{key:"updateMoved",value:function(t,e,r){var n;if(Number.isNaN(t)||void 0===e)throw new Error("Something wrong with setting new values");var i=Ot[r];this.setState((Tt(n={},r,t),Tt(n,i,e),n))}},{key:"getValue",value:function(t){return this.state["".concat(t)]}},{key:"getPercentVal",value:function(){var t=this.state,e=t.valueFrom,r=t.min,n=t.max;return Number((e/(n-r)*100).toFixed(3))}},{key:"findValPercent",value:function(){return this.findRange()/100}},{key:"findRange",value:function(){return this.state.max-this.state.min}}])&&kt(e.prototype,r),n&&kt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function St(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var _t=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.data=e,this.DEFAULT_GAP=20,this.validateData(e)}var e,r,n;return e=t,r=[{key:"validateData",value:function(t){var e=this.setBooleans(t);return this.setData(t),this.resultObject=Object.assign(Object.assign(Object.assign({},t),e),{thumbPercentFrom:0,thumbPercentTo:void 0}),this.checkRange(),this.checkStep(),this.checkValues(),this.checkPercents(),this.resultObject}},{key:"performMoveToPercent",value:function(t){var e=t.coordsMove,r=t.scaleSize,n=t.keyEvent,i=t.thumbId;if(n){if("increment"===n&&"valueFrom"===i)return this.thumbPercentFrom+this.stepPercent;if("decrement"===n&&"valueFrom"===i)return this.thumbPercentFrom-this.stepPercent;if("increment"===n&&"valueTo"===i&&void 0!==this.thumbPercentTo)return this.thumbPercentTo+this.stepPercent;if("decrement"===n&&"valueTo"===i&&void 0!==this.thumbPercentTo)return this.thumbPercentTo-this.stepPercent}if(void 0===e||void 0===r)return 0;var o=Number((e/(r/100)).toFixed(2));return o<0&&(o=0),o>100&&(o=100),o}},{key:"validateMarks",value:function(t){for(var e=t.step,r=t.max,n=t.min,i=t.gap,o=this.validateGap(i),s=new Map,u=this.findRange(),c=u/100,a=0,l=o,f=0,h=n;h<=r;h+=e){var p=Number(f*e/c);this.isGetGap(l,a,p,o)&&(s.set(h,p),l=(a=p)+o),0!==p&&100!==p||s.set(h,p),f+=1}return u%e!=0&&s.set(r,100),f=0,s}},{key:"validateThumbId",value:function(t){if(!this.isRange)return"valueFrom";if(t<this.thumbPercentFrom)return"valueFrom";if(void 0!==this.thumbPercentTo&&t>this.thumbPercentTo)return"valueTo";if(t>this.thumbPercentFrom&&void 0!==this.thumbPercentTo&&t<this.thumbPercentTo){var e=t-this.thumbPercentFrom,r=this.thumbPercentTo-t;if(e===r||e<r)return"valueFrom";if(e>r)return"valueTo"}return"valueTo"}},{key:"setData",value:function(t){var e=t.min,r=t.max,n=t.valueFrom,i=t.step,o=t.scalePercentGap,s=t.valueTo;this.min=e,this.max=r,this.valueFrom=n,this.step=i,this.scalePercentGap=o,void 0!==this.scalePercentGap&&"number"!=typeof this.scalePercentGap&&(this.scalePercentGap=void 0),this.isRange&&void 0!==s&&(this.valueTo=s),this.stepPercent=this.step/(this.findRange()/100)}},{key:"setBooleans",value:function(t){var e=t.isRange,r=t.isTip,n=t.isVertical,i=t.isProgress,o=t.scaleMarks;return this.isRange="boolean"==typeof e&&e,this.isTip="boolean"==typeof r&&r,this.isVertical="boolean"==typeof n&&n,this.isProgress="boolean"==typeof i&&i,this.scaleMarks="boolean"==typeof o&&o,{isRange:this.isRange,isTip:this.isTip,isVertical:this.isVertical,isProgress:this.isProgress,scaleMarks:this.scaleMarks}}},{key:"isGetGap",value:function(t,e,r,n){return Math.round(t)-Math.round(e)>=n&&r>=t&&100-n>=t}},{key:"validateGap",value:function(t){var e=t;return(e<0||e>100)&&(e=this.DEFAULT_GAP),e}},{key:"checkRange",value:function(){if(Number.isNaN(this.min)&&(this.min=0),Number.isNaN(this.max)&&(this.max=10),this.min===this.max&&(this.max=this.min+this.step),this.min>this.max){var t=[this.max,this.min];this.min=t[0],this.max=t[1]}this.resultObject.min=this.min,this.resultObject.max=this.max}},{key:"checkStep",value:function(){Number.isNaN(this.step)&&(this.step=1);var t=this.findRange();this.step>t&&(this.step=t),this.step||(this.step=1),this.resultObject.step=this.step}},{key:"findRange",value:function(){return this.max-this.min}},{key:"checkValues",value:function(){if(this.valueFrom=this.checkValue(this.valueFrom),this.isRange&&(this.valueTo=this.checkValue(this.valueTo)),void 0!==this.valueTo&&this.valueFrom>this.valueTo&&this.isRange){var t=[this.valueTo,this.valueFrom];this.valueFrom=t[0],this.valueTo=t[1]}this.resultObject.valueFrom=this.valueFrom,this.isRange&&(this.resultObject.valueTo=this.valueTo)}},{key:"checkValue",value:function(t){var e=t;if(Number.isNaN(e)&&(e=0),e===this.max)return e=this.max;if(e%this.step!=0&&e!==this.min){var r=Math.round((e-this.min)/this.step);e=this.min+this.step*r}return e>this.max&&(e=this.max),e<this.min&&(e=this.min),e}},{key:"checkPercents",value:function(){this.thumbPercentFrom=this.checkPercent("valueFrom"),this.resultObject.thumbPercentFrom=this.thumbPercentFrom,this.isRange&&(this.thumbPercentTo=this.checkPercent("valueTo"),this.resultObject.thumbPercentTo=this.thumbPercentTo)}},{key:"checkPercent",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"valueFrom",e=this[t]-this.min,r=Number((e/(this.findRange()/100)).toFixed(3));return r}}],r&&St(e.prototype,r),n&&St(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),Et=_t;function Rt(t){return Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Rt(t)}function Ft(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Vt(t,e){return Vt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Vt(t,e)}function Mt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Dt(t);if(e){var i=Dt(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return xt(this,r)}}function xt(t,e){if(e&&("object"===Rt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Dt(t){return Dt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Dt(t)}var Ct=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Vt(t,e)}(o,t);var e,r,n,i=Mt(o);function o(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(e=i.call(this)).validator=new Et(t),e.validState=e.validator.validateData(t),e.model=new jt(e.validState),e}return e=o,(r=[{key:"setState",value:function(t){var e=this.validator.validateData(t);this.model.setState(e)}},{key:"getState",value:function(){if(this.model.getState().scaleMarks){var t=this.validGapMarks();return Object.assign(Object.assign({},this.model.getState()),{scaleMap:t})}return this.model.getState()}},{key:"validGapMarks",value:function(){var t=this.model.getState().scalePercentGap||20,e=this.model.getState(),r=e.min,n=e.max,i=e.step;return this.validator.validateMarks({min:r,max:n,step:i,gap:t})}},{key:"getModel",value:function(){return this.model}},{key:"getValidator",value:function(){return this.validator}},{key:"getValue",value:function(t){return this.model.getState()["".concat(t)]}},{key:"update",value:function(t,e){if(e===a){var r=this.validator.performMoveToPercent(t),n=t.thumbId;if(void 0===n&&(n=this.validator.validateThumbId(r)),r===this.prevMove)return;this.prevMove=r,this.model.updateStateMove(r,n);var i=this.model.getState(),o=this.validator.validateData(i);this.model.setState(o),i.scaleMarks?this.emit(a,Object.assign(Object.assign({},o),{scaleMap:this.validGapMarks()})):this.emit(a,o)}}},{key:"setValue",value:function(t,e){var r=this.model.getState(),n=Object.assign(Object.assign({},r),function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}({},t,e)),i=this.validator.validateData(n);this.model.setState(i),this.emit(a,this.model.getState())}}])&&Ft(e.prototype,r),n&&Ft(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(c);function At(t){return At="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},At(t)}function It(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Lt(t,e){return Lt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Lt(t,e)}function Nt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Gt(t);if(e){var i=Gt(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return Bt(this,r)}}function Bt(t,e){if(e&&("object"===At(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Gt(t){return Gt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Gt(t)}var zt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Lt(t,e)}(o,t);var e,r,n,i=Nt(o);function o(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(r=i.call(this)).root=t,r.modelFacade=new Ct(e),r.view=new wt(t,r.modelFacade.getState()),r.subscribeModel(),r.subscribeSlider(),r}return e=o,(r=[{key:"getState",value:function(){return this.modelFacade.getState()}},{key:"setNewState",value:function(t){this.modelFacade.setState(t)}},{key:"setValue",value:function(t,e){this.modelFacade.setValue(t,e)}},{key:"getValue",value:function(t){return this.modelFacade.getValue(t)}},{key:"subscribeSlider",value:function(){this.view.addSubscriber(h,this.modelFacade)}},{key:"subscribeModel",value:function(){this.modelFacade.addSubscriber(a,this.view)}}])&&It(e.prototype,r),n&&It(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(c),Ut={min:0,max:100,valueFrom:0,valueTo:0,step:1,scalePercentGap:10,scaleMarks:!1,isTip:!1,isProgress:!1,isRange:!1,isVertical:!1};i().fn.sliderPlugin=function(t){var e=Object.assign(Object.assign({},Ut),t);return new zt(this[0],e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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N0YsWUFBWSxFQUNaUixPQUFPLEVBQ1BLLFlBQVksRUFDWkMsU0FBUyxFQUNUcEcsWUFBWSxHQ0RkaU8sSUFBQUEsR0FBQUEsYUFBb0IsU0FBc0I1QyxHQUN4QyxJQUFNbEcsRUFBUSxPQUFILHdCQUFRK0ksSUFBaUI3QyxHQUVwQyxPQURlLElBQUlxQyxHQUFVck8sS0FBSyxHQUFJOEYsRUFFdkMsQyIsInNvdXJjZXMiOlsid2VicGFjazovL21ldGEtc2xpZGVyLy4vc3JjL09ic2VydmVyL09ic2VydmVyLnRzIiwid2VicGFjazovL21ldGEtc2xpZGVyLy4vc3JjL09ic2VydmVyL2V2ZW50cy50cyIsIndlYnBhY2s6Ly9tZXRhLXNsaWRlci8uL3NyYy9jb21wb25lbnRzL1ZpZXcvc3ViVmlld3MvU2xpZGVyQ29tcG9uZW50cy9TbGlkZXJDb21wb25lbnRzLnRzIiwid2VicGFjazovL21ldGEtc2xpZGVyLy4vc3JjL2NvbXBvbmVudHMvVmlldy9zdWJWaWV3cy9Qcm9ncmVzcy9Qcm9ncmVzcy50cyIsIndlYnBhY2s6Ly9tZXRhLXNsaWRlci8uL3NyYy9jb21wb25lbnRzL1ZpZXcvc3ViVmlld3MvU2NhbGUvU2NhbGUudHMiLCJ3ZWJwYWNrOi8vbWV0YS1zbGlkZXIvLi9zcmMvY29tcG9uZW50cy9WaWV3L3N1YlZpZXdzL1NjYWxlTWFya3MvU2NhbGVNYXJrcy50cyIsIndlYnBhY2s6Ly9tZXRhLXNsaWRlci8uL3NyYy9jb21wb25lbnRzL1ZpZXcvc3ViVmlld3MvVGh1bWIvVGh1bWIudHMiLCJ3ZWJwYWNrOi8vbWV0YS1zbGlkZXIvLi9zcmMvY29tcG9uZW50cy9WaWV3L3N1YlZpZXdzL1RpcC9UaXAudHMiLCJ3ZWJwYWNrOi8vbWV0YS1zbGlkZXIvLi9zcmMvY29tcG9uZW50cy9WaWV3L3N1YlZpZXdzL1NsaWRlci9TbGlkZXIudHMiLCJ3ZWJwYWNrOi8vbWV0YS1zbGlkZXIvLi9zcmMvY29tcG9uZW50cy9WaWV3L1ZpZXcudHMiLCJ3ZWJwYWNrOi8vbWV0YS1zbGlkZXIvLi9zcmMvY29tcG9uZW50cy9JbnRlcmZhY2VzLnRzIiwid2VicGFjazovL21ldGEtc2xpZGVyLy4vc3JjL2NvbXBvbmVudHMvTW9kZWwvTW9kZWwudHMiLCJ3ZWJwYWNrOi8vbWV0YS1zbGlkZXIvLi9zcmMvY29tcG9uZW50cy9Nb2RlbC9WYWxpZGF0b3IudHMiLCJ3ZWJwYWNrOi8vbWV0YS1zbGlkZXIvLi9zcmMvY29tcG9uZW50cy9Nb2RlbC9Nb2RlbEZhY2FkZS50cyIsIndlYnBhY2s6Ly9tZXRhLXNsaWRlci8uL3NyYy9jb21wb25lbnRzL1ByZXNlbnRlci9QcmVzZW50ZXIudHMiLCJ3ZWJwYWNrOi8vbWV0YS1zbGlkZXIvLi9zcmMvc3RhdGUudHMiLCJ3ZWJwYWNrOi8vbWV0YS1zbGlkZXIvLi9zcmMvc2xpZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBWYWx1ZU9ic2VydmVyRW50cnkge1xuICB1cGRhdGUoZGF0YTogb2JqZWN0LCBldmVudDogc3RyaW5nKTogdm9pZDtcbn1cblxuaW50ZXJmYWNlIE9ic2VydmVycyB7XG4gIFtpbmRleDogc3RyaW5nXTogVmFsdWVPYnNlcnZlckVudHJ5W11cbn1cblxuYWJzdHJhY3QgY2xhc3MgT2JzZXJ2ZXIge1xuICBwdWJsaWMgb2JzZXJ2ZXJzOiBPYnNlcnZlcnMgPSB7fTtcblxuICBwdWJsaWMgYWRkU3Vic2NyaWJlcihldmVudDogc3RyaW5nLCBvYnNlcnZlcjogVmFsdWVPYnNlcnZlckVudHJ5KTogdm9pZCB7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkge1xuICAgICAgY29uc3Qga2V5cyA9IHRoaXMub2JzZXJ2ZXJzW2V2ZW50XTtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSA9IFsuLi5rZXlzLCBvYnNlcnZlcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSA9IFtvYnNlcnZlcl07XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbW92ZVN1YnNjcmliZXIoZXZlbnQ6IHN0cmluZywgb2JzZXJ2ZXI6IFZhbHVlT2JzZXJ2ZXJFbnRyeSk6IHZvaWQge1xuICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XS5maWx0ZXIoKG9icykgPT4gb2JzICE9PSBvYnNlcnZlcik7XG4gIH1cblxuICBwdWJsaWMgZW1pdChldmVudDogc3RyaW5nLCBkYXRhOiBvYmplY3QpOiB2b2lkIHtcbiAgICBjb25zdCBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVyc1tldmVudF0gfHwgW107XG4gICAgb2JzZXJ2ZXJzLmZvckVhY2goKG9ic2VydmVyKSA9PiB7XG4gICAgICBvYnNlcnZlci51cGRhdGUoZGF0YSwgZXZlbnQpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9ic2VydmVyO1xuIiwiY29uc3QgTU9ERUxfRVZFTlRTID0ge1xuICBWQUxVRV9DSEFOR0VEOiAnVkFMVUVfQ0hBTkdFRCcsXG59O1xuXG5jb25zdCBTTElERVJfRVZFTlRTID0ge1xuICBWQUxVRV9TVEFSVF9DSEFOR0U6ICdWQUxVRV9TVEFSVF9DSEFOR0UnLFxuICBEQVRBX0NPTExFQ1RFRDogJ0RBVEFfQ09MTEVDVEVEJyxcbiAgVkFMVUVfQ0hBTkdFRDogJ1ZBTFVFX0NIQU5HRUQnLFxuICBTQ0FMRV9DTElDS0VEOiAnIFNDQUxFX0NMSUNLRUQnLFxuICBLRVlfRE9XTjogJ0tFWV9ET1dOJyxcbn07XG5cbmV4cG9ydCB7IE1PREVMX0VWRU5UUywgU0xJREVSX0VWRU5UUyB9O1xuIiwiaW1wb3J0IE9ic2VydmVyIGZyb20gJy4uLy4uLy4uLy4uL09ic2VydmVyL09ic2VydmVyJztcbmltcG9ydCB7XG4gIEtleUV2ZW50LFxuICBTaXplVHlwZSxcbiAgU3RhcnRQb2ludFR5cGUsXG4gIFRodW1iSUQsXG59IGZyb20gJy4uLy4uLy4uL0ludGVyZmFjZXMnO1xuaW1wb3J0IHsgU0xJREVSX0VWRU5UUyB9IGZyb20gJy4uLy4uLy4uLy4uL09ic2VydmVyL2V2ZW50cyc7XG5cbmNsYXNzIFNsaWRlckNvbXBvbmVudHMgZXh0ZW5kcyBPYnNlcnZlciB7XG4gIHByb3RlY3RlZCBzY2FsZUVsZW1lbnQhOiBIVE1MRGl2RWxlbWVudDtcblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgcm9vdDogRWxlbWVudDtcblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGlyZWN0aW9uOiAnY2xpZW50WScgfCAnY2xpZW50WCc7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHN0YXJ0UG9pbnQ6IFN0YXJ0UG9pbnRUeXBlO1xuXG4gIHJlYWRvbmx5IHNpemU6IFNpemVUeXBlO1xuXG4gIHByb3RlY3RlZCByZWFkb25seSBtb2Q6ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCc7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGlzVmVydGljYWw6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3Iocm9vdDogRWxlbWVudCwgaXNWZXJ0aWNhbDogYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pc1ZlcnRpY2FsID0gaXNWZXJ0aWNhbDtcbiAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMuaXNWZXJ0aWNhbCA/ICdjbGllbnRZJyA6ICdjbGllbnRYJztcbiAgICB0aGlzLnN0YXJ0UG9pbnQgPSB0aGlzLmlzVmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JztcbiAgICB0aGlzLnNpemUgPSB0aGlzLmlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdGhpcy5tb2QgPSB0aGlzLmlzVmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBwcm90ZWN0ZWQgY3JlYXRlRWxlbWVudChjbGFzc05hbWU6IHN0cmluZyk6IEhUTUxEaXZFbGVtZW50IHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgcGVyZm9ybU1vdXNlTW92ZSh0aHVtYlBvczogbnVtYmVyLCBpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgbW91c2VNb3ZlID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IGVsZW1TaXplID0gdGhpcy5yb290LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3RoaXMuc3RhcnRQb2ludF07XG4gICAgICBjb25zdCBuZXdQb3MgPSBlW3RoaXMuZGlyZWN0aW9uXSAtIHRodW1iUG9zIC0gZWxlbVNpemU7XG4gICAgICB0aGlzLmVtaXQoU0xJREVSX0VWRU5UUy5WQUxVRV9TVEFSVF9DSEFOR0UsIHtcbiAgICAgICAgY29vcmRzTW92ZTogbmV3UG9zLFxuICAgICAgICB0aHVtYklkOiBpZCxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBtb3VzZVVwID0gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW91c2VNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwKTtcbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW91c2VNb3ZlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcGVyZm9ybVRvdWNNb3ZlKHRodW1iUG9zOiBudW1iZXIsIGlkOiBUaHVtYklEKTogdm9pZCB7XG4gICAgY29uc3QgdG91Y2hNb3ZlID0gKGU6IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICBjb25zdCBlbGVtU2l6ZSA9IHRoaXMucm9vdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0aGlzLnN0YXJ0UG9pbnRdO1xuICAgICAgY29uc3QgbmV3UG9zID0gZS50b3VjaGVzWzBdW3RoaXMuZGlyZWN0aW9uXSAtIHRodW1iUG9zIC0gZWxlbVNpemU7XG4gICAgICB0aGlzLmVtaXQoU0xJREVSX0VWRU5UUy5WQUxVRV9TVEFSVF9DSEFOR0UsIHtcbiAgICAgICAgY29vcmRzTW92ZTogbmV3UG9zLFxuICAgICAgICB0aHVtYklkOiBpZCxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCB0b3VjaEVuZCA9ICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRvdWNoTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRvdWNoRW5kKTtcbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdG91Y2hNb3ZlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRvdWNoRW5kKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBwZXJmb3JtS2V5RG93bihrZXlFdmVudDogS2V5RXZlbnQsIGlkOiBUaHVtYklEKTogdm9pZCB7XG4gICAgdGhpcy5lbWl0KFNMSURFUl9FVkVOVFMuS0VZX0RPV04sIHtcbiAgICAgIGtleUV2ZW50LFxuICAgICAgdGh1bWJJZDogaWQsXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2xpZGVyQ29tcG9uZW50cztcbiIsImltcG9ydCBTbGlkZXJDb21wb25lbnRzIGZyb20gJy4uL1NsaWRlckNvbXBvbmVudHMvU2xpZGVyQ29tcG9uZW50cyc7XG5pbXBvcnQgeyBQcm9ncmVzc0RhdGEgfSBmcm9tICcuLi8uLi8uLi9JbnRlcmZhY2VzJztcbmltcG9ydCAnLi9wcm9ncmVzcy5zY3NzJztcblxuY2xhc3MgUHJvZ3Jlc3MgZXh0ZW5kcyBTbGlkZXJDb21wb25lbnRzIHtcbiAgcG9zaXRpb25TdGFydDogbnVtYmVyO1xuXG4gIHBvc2l0aW9uRW5kOiBudW1iZXI7XG5cbiAgcHJvZ3Jlc3M6IEhUTUxEaXZFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFByb2dyZXNzRGF0YSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHJvb3QsXG4gICAgICBwb3NpdGlvblN0YXJ0LFxuICAgICAgcG9zaXRpb25FbmQsXG4gICAgICBpc1ZlcnRpY2FsLFxuICAgIH0gPSBkYXRhO1xuXG4gICAgc3VwZXIocm9vdCwgaXNWZXJ0aWNhbCk7XG4gICAgdGhpcy5wb3NpdGlvblN0YXJ0ID0gcG9zaXRpb25TdGFydDtcbiAgICB0aGlzLnBvc2l0aW9uRW5kID0gcG9zaXRpb25FbmQ7XG4gICAgdGhpcy5wcm9ncmVzcyA9IHRoaXMuY3JlYXRlRWxlbWVudCgncGx1Z2luLXNsaWRlcl9fcHJvZ3Jlc3MnKTtcbiAgICB0aGlzLnNldFByb2dyZXNzKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0UHJvZ3Jlc3MoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9ncmVzcy5zdHlsZVt0aGlzLnN0YXJ0UG9pbnRdID0gYCR7dGhpcy5wb3NpdGlvblN0YXJ0fSVgO1xuICAgIHRoaXMucHJvZ3Jlc3Muc3R5bGVbdGhpcy5zaXplXSA9IGAke3RoaXMucG9zaXRpb25FbmR9JWA7XG4gICAgdGhpcy5yb290LmFwcGVuZCh0aGlzLnByb2dyZXNzKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRQcm9ncmVzc1Bvc2l0aW9uKHBvc2l0aW9uU3RhcnQgPSAwLCBwb3NpdGlvbkVuZCA9IDEwMCk6IHZvaWQge1xuICAgIHRoaXMucHJvZ3Jlc3Muc3R5bGVbdGhpcy5zdGFydFBvaW50XSA9IGAke3Bvc2l0aW9uU3RhcnR9JWA7XG4gICAgdGhpcy5wcm9ncmVzcy5zdHlsZVt0aGlzLnNpemVdID0gYCR7cG9zaXRpb25FbmR9JWA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZ3Jlc3M7XG4iLCJpbXBvcnQgeyBTTElERVJfRVZFTlRTIH0gZnJvbSAnLi4vLi4vLi4vLi4vT2JzZXJ2ZXIvZXZlbnRzJztcbmltcG9ydCBTbGlkZXJDb21wb25lbnRzIGZyb20gJy4uL1NsaWRlckNvbXBvbmVudHMvU2xpZGVyQ29tcG9uZW50cyc7XG5pbXBvcnQgJy4vc2NhbGUuc2Nzcyc7XG5cbmNsYXNzIFNjYWxlIGV4dGVuZHMgU2xpZGVyQ29tcG9uZW50cyB7XG4gIHNjYWxlITogSFRNTERpdkVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3Iocm9vdDogSFRNTERpdkVsZW1lbnQsIGlzVmVydGljYWw6IGJvb2xlYW4pIHtcbiAgICBzdXBlcihyb290LCBpc1ZlcnRpY2FsKTtcbiAgICB0aGlzLmluaXRTY2FsZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0U2NhbGUoKTogdm9pZCB7XG4gICAgdGhpcy5zY2FsZSA9IHRoaXMuY3JlYXRlRWxlbWVudCgncGx1Z2luLXNsaWRlcl9fc2NhbGUnKTtcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB0aGlzLnNjYWxlLmNsYXNzTGlzdC5hZGQoJ3BsdWdpbi1zbGlkZXJfX3NjYWxlX3ZlcnRpY2FsJyk7XG4gICAgaWYgKCF0aGlzLmlzVmVydGljYWwpIHRoaXMuc2NhbGUuY2xhc3NMaXN0LmFkZCgncGx1Z2luLXNsaWRlcl9fc2NhbGVfaG9yaXpvbnRhbCcpO1xuICAgIHRoaXMuYWRkU2NhbGUoKTtcbiAgICB0aGlzLmFkZExpc3Rlbm5lcnMoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTY2FsZSgpOiBIVE1MRGl2RWxlbWVudCB7XG4gICAgaWYgKCF0aGlzLnNjYWxlKSB0aGlzLnNjYWxlID0gdGhpcy5jcmVhdGVFbGVtZW50KCdwbHVnaW4tc2xpZGVyX19zY2FsZScpO1xuICAgIHJldHVybiB0aGlzLnNjYWxlO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRTY2FsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJvb3QuYXBwZW5kKHRoaXMuc2NhbGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRMaXN0ZW5uZXJzKCk6IHZvaWQge1xuICAgIHRoaXMuc2NhbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVDbGljayhlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IGU7XG4gICAgaWYgKCEodGFyZ2V0IGFzIEVsZW1lbnQpLmNsb3Nlc3QoJy5wbHVnaW4tc2xpZGVyX19zY2FsZScpKSByZXR1cm47XG5cbiAgICBjb25zdCBzY2FsZVNpemUgPSB0aGlzLnNjYWxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3RoaXMuc2l6ZV07XG4gICAgY29uc3Qgc2NhbGVTdGFydCA9IHRoaXMuc2NhbGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbdGhpcy5zdGFydFBvaW50XTtcbiAgICBjb25zdCBjb29yZHNNb3ZlID0gZVt0aGlzLmRpcmVjdGlvbl0gLSBzY2FsZVN0YXJ0O1xuXG4gICAgaWYgKGNvb3Jkc01vdmUgPiBzY2FsZVNpemUgfHwgY29vcmRzTW92ZSA8IDApIHJldHVybjtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgY29vcmRzTW92ZSxcbiAgICAgIHNjYWxlU2l6ZSxcbiAgICB9O1xuXG4gICAgdGhpcy5lbWl0KFNMSURFUl9FVkVOVFMuU0NBTEVfQ0xJQ0tFRCwgZGF0YSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NhbGU7XG4iLCJpbXBvcnQgU2xpZGVyQ29tcG9uZW50cyBmcm9tICcuLi9TbGlkZXJDb21wb25lbnRzL1NsaWRlckNvbXBvbmVudHMnO1xuaW1wb3J0ICcuL3NjYWxlTWFya3Muc2Nzcyc7XG5cbmNsYXNzIFNjYWxlTWFya3MgZXh0ZW5kcyBTbGlkZXJDb21wb25lbnRzIHtcbiAgbWFya3M6IE1hcDxudW1iZXIsIG51bWJlcj47XG5cbiAgY29uc3RydWN0b3Iocm9vdDogSFRNTERpdkVsZW1lbnQsIG1hcmtzOiBNYXA8bnVtYmVyLCBudW1iZXI+LCBpc1ZlcnRpY2FsOiBib29sZWFuKSB7XG4gICAgc3VwZXIocm9vdCwgaXNWZXJ0aWNhbCk7XG4gICAgdGhpcy5tYXJrcyA9IG1hcmtzO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY3JlYXRlTWFya3MoKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTWFya3MoKTogdm9pZCB7XG4gICAgdGhpcy5tYXJrcy5mb3JFYWNoKCh2YWx1ZTogbnVtYmVyLCBwZXJjZW50OiBudW1iZXIpID0+IHRoaXMuY3JlYXRlTWFyayh2YWx1ZSwgcGVyY2VudCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVNYXJrKHBlcmNlbnQ6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IG1hcmsgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ3BsdWdpbi1zbGlkZXJfX21hcmsnKTtcbiAgICBtYXJrLmNsYXNzTGlzdC5hZGQoYHBsdWdpbi1zbGlkZXJfX21hcmtfJHt0aGlzLm1vZH1gKTtcbiAgICBtYXJrLnN0eWxlW3RoaXMuc3RhcnRQb2ludF0gPSBgJHtwZXJjZW50fSVgO1xuXG4gICAgY29uc3QgbWFya1ZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIG1hcmtWYWx1ZS5jbGFzc05hbWUgPSAncGx1Z2luLXNsaWRlcl9fbWFyay12YWx1ZSc7XG4gICAgbWFya1ZhbHVlLmNsYXNzTGlzdC5hZGQoYHBsdWdpbi1zbGlkZXJfX21hcmstdmFsdWVfJHt0aGlzLm1vZH1gKTtcbiAgICBtYXJrVmFsdWUuaW5uZXJUZXh0ID0gYCR7dmFsdWV9YDtcbiAgICBtYXJrLmFwcGVuZChtYXJrVmFsdWUpO1xuXG4gICAgdGhpcy5yb290LmFwcGVuZChtYXJrKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTY2FsZU1hcmtzO1xuIiwiaW1wb3J0IFNsaWRlckNvbXBvbmVudHMgZnJvbSAnLi4vU2xpZGVyQ29tcG9uZW50cy9TbGlkZXJDb21wb25lbnRzJztcbmltcG9ydCB7IFRodW1iQXJncywgVGh1bWJJRCB9IGZyb20gJy4uLy4uLy4uL0ludGVyZmFjZXMnO1xuaW1wb3J0ICcuL3RodW1iLnNjc3MnO1xuXG5jbGFzcyBUaHVtYiBleHRlbmRzIFNsaWRlckNvbXBvbmVudHMge1xuICBtb3ZlZCE6IG51bWJlcjtcblxuICB0aHVtYlBlcmNlbnQ6IG51bWJlcjtcblxuICB0aHVtYkVsZW1lbnQhOiBIVE1MRGl2RWxlbWVudDtcblxuICB0aHVtYklkOiBUaHVtYklEO1xuXG4gIGNvbnN0cnVjdG9yKHZhbHVlczogVGh1bWJBcmdzKSB7XG4gICAgY29uc3Qge1xuICAgICAgcm9vdCxcbiAgICAgIHRodW1iUGVyY2VudCA9IDAsXG4gICAgICBpZCA9ICd2YWx1ZUZyb20nLFxuICAgICAgaXNWZXJ0aWNhbCxcbiAgICB9ID0gdmFsdWVzO1xuXG4gICAgc3VwZXIocm9vdCwgaXNWZXJ0aWNhbCk7XG4gICAgdGhpcy50aHVtYlBlcmNlbnQgPSB0aHVtYlBlcmNlbnQ7XG4gICAgdGhpcy50aHVtYklkID0gaWQ7XG4gICAgdGhpcy5pbml0VGh1bWIoKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdFRodW1iKCk6IHZvaWQge1xuICAgIHRoaXMudGh1bWJFbGVtZW50ID0gdGhpcy5jcmVhdGVFbGVtZW50KCdwbHVnaW4tc2xpZGVyX190aHVtYicpO1xuICAgIHRoaXMudGh1bWJFbGVtZW50LmlkID0gdGhpcy50aHVtYklkO1xuICAgIHRoaXMudGh1bWJFbGVtZW50LnRhYkluZGV4ID0gMTtcbiAgICB0aGlzLnJvb3QuYXBwZW5kKHRoaXMudGh1bWJFbGVtZW50KTtcbiAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMudGh1bWJQZXJjZW50KTtcbiAgICB0aGlzLmFkZExpc3RlbmVycygpO1xuICB9XG5cbiAgcHVibGljIHNldFBvc2l0aW9uKHRodW1iUGVyY2VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy50aHVtYlBlcmNlbnQgPSB0aHVtYlBlcmNlbnQ7XG4gICAgdGhpcy5jaGVja1pJbmQoKTtcbiAgICB0aGlzLnRodW1iRWxlbWVudC5zdHlsZVt0aGlzLnN0YXJ0UG9pbnRdID0gYCR7dGhpcy50aHVtYlBlcmNlbnR9JWA7XG4gIH1cblxuICBwdWJsaWMgZ2V0VGh1bWIoKTogSFRNTERpdkVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLnRodW1iRWxlbWVudDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUaHVtYklkKCk6IFRodW1iSUQge1xuICAgIHJldHVybiB0aGlzLnRodW1iSWQ7XG4gIH1cblxuICBwcml2YXRlIGNoZWNrWkluZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy50aHVtYklkID09PSAndmFsdWVGcm9tJyAmJiB0aGlzLnRodW1iUGVyY2VudCA9PT0gMTAwKSB7XG4gICAgICB0aGlzLnRodW1iRWxlbWVudC5zdHlsZS56SW5kZXggPSAnMTAnO1xuICAgIH1cbiAgICBpZiAodGhpcy50aHVtYklkID09PSAndmFsdWVGcm9tJyAmJiB0aGlzLnRodW1iUGVyY2VudCA8IDEwMCkge1xuICAgICAgdGhpcy50aHVtYkVsZW1lbnQuc3R5bGUuekluZGV4ID0gJzYnO1xuICAgIH1cbiAgICBpZiAodGhpcy50aHVtYklkID09PSAndmFsdWVUbycgJiYgdGhpcy50aHVtYlBlcmNlbnQgPT09IDApIHtcbiAgICAgIHRoaXMudGh1bWJFbGVtZW50LnN0eWxlLnpJbmRleCA9ICcxMCc7XG4gICAgfVxuICAgIGlmICh0aGlzLnRodW1iSWQgPT09ICd2YWx1ZVRvJyAmJiB0aGlzLnRodW1iUGVyY2VudCA+IDApIHtcbiAgICAgIHRoaXMudGh1bWJFbGVtZW50LnN0eWxlLnpJbmRleCA9ICc1JztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFkZExpc3RlbmVycygpOiB2b2lkIHtcbiAgICB0aGlzLnRodW1iRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm1vdXNlRG93bi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnRodW1iRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5rZXlEb3duLmJpbmQodGhpcykpO1xuICAgIHRoaXMudGh1bWJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAndG91Y2hzdGFydCcsXG4gICAgICB0aGlzLnRvdWNoRG93bi5iaW5kKHRoaXMpLFxuICAgICAgeyBwYXNzaXZlOiB0cnVlIH0sXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdG91Y2hEb3duKGU6IFRvdWNoRXZlbnQpOiB2b2lkIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3Qgc2l6ZUVsZW1lbnQgPSB0aGlzLnRodW1iRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0aGlzLnN0YXJ0UG9pbnRdO1xuICAgIHRoaXMubW92ZWQgPSBlLnRvdWNoZXNbMF1bdGhpcy5kaXJlY3Rpb25dIC0gc2l6ZUVsZW1lbnQ7XG4gICAgc3VwZXIucGVyZm9ybVRvdWNNb3ZlKHRoaXMubW92ZWQsIHRoaXMudGh1bWJJZCk7XG4gIH1cblxuICBwcml2YXRlIG1vdXNlRG93bihlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMubW92ZWQgPSBlW3RoaXMuZGlyZWN0aW9uXSAtIHRoaXMudGh1bWJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3RoaXMuc3RhcnRQb2ludF07XG4gICAgdGhpcy5jaGVja1pJbmQoKTtcbiAgICBzdXBlci5wZXJmb3JtTW91c2VNb3ZlKHRoaXMubW92ZWQsIHRoaXMudGh1bWJJZCk7XG4gIH1cblxuICBwcml2YXRlIGtleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGtleSB9ID0gZTtcbiAgICBpZiAoa2V5ID09PSAnQXJyb3dMZWZ0JyB8fCBrZXkgPT09ICdBcnJvd1VwJyB8fCBrZXkgPT09ICdBcnJvd1JpZ2h0JyB8fCBrZXkgPT09ICdBcnJvd0Rvd24nKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKChrZXkgPT09ICdBcnJvd0xlZnQnICYmICF0aGlzLmlzVmVydGljYWwpIHx8IChrZXkgPT09ICdBcnJvd1VwJyAmJiB0aGlzLmlzVmVydGljYWwpKSB7XG4gICAgICBzdXBlci5wZXJmb3JtS2V5RG93bignZGVjcmVtZW50JywgdGhpcy50aHVtYklkKTtcbiAgICB9XG5cbiAgICBpZiAoKGtleSA9PT0gJ0Fycm93UmlnaHQnICYmICF0aGlzLmlzVmVydGljYWwpIHx8IChrZXkgPT09ICdBcnJvd0Rvd24nICYmIHRoaXMuaXNWZXJ0aWNhbCkpIHtcbiAgICAgIHN1cGVyLnBlcmZvcm1LZXlEb3duKCdpbmNyZW1lbnQnLCB0aGlzLnRodW1iSWQpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaHVtYjtcbiIsImltcG9ydCB7IFRpcERhdGEgfSBmcm9tICcuLi8uLi8uLi9JbnRlcmZhY2VzJztcbmltcG9ydCBTbGlkZXJDb21wb25lbnRzIGZyb20gJy4uL1NsaWRlckNvbXBvbmVudHMvU2xpZGVyQ29tcG9uZW50cyc7XG5pbXBvcnQgJy4vdGlwLnNjc3MnO1xuXG5jbGFzcyBUaXAgZXh0ZW5kcyBTbGlkZXJDb21wb25lbnRzIHtcbiAgdGlwOiBIVE1MRGl2RWxlbWVudDtcblxuICBwZXJjZW50UG9zaXRpb246IG51bWJlcjtcblxuICB2YWx1ZVRpcDogbnVtYmVyIHwgc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFRpcERhdGEpIHtcbiAgICBjb25zdCB7XG4gICAgICByb290LFxuICAgICAgcGVyY2VudFBvc2l0aW9uLFxuICAgICAgdmFsdWVUaXAsXG4gICAgICBpc1ZlcnRpY2FsLFxuICAgIH0gPSBkYXRhO1xuXG4gICAgc3VwZXIocm9vdCwgaXNWZXJ0aWNhbCk7XG4gICAgdGhpcy5wZXJjZW50UG9zaXRpb24gPSBwZXJjZW50UG9zaXRpb247XG4gICAgdGhpcy52YWx1ZVRpcCA9IHZhbHVlVGlwO1xuXG4gICAgdGhpcy50aXAgPSB0aGlzLmNyZWF0ZVRpcCgpO1xuICAgIHRoaXMuYWRkVGlwKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0VmFsdWVUaXAodmFsdWVUaXA6IG51bWJlciB8IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudGlwLmlubmVyVGV4dCA9IGAke3ZhbHVlVGlwfWA7XG4gIH1cblxuICBwdWJsaWMgaGlkZVRpcCgpOiB2b2lkIHtcbiAgICB0aGlzLnRpcC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG5cbiAgcHVibGljIHNob3dUaXAoKTogdm9pZCB7XG4gICAgdGhpcy50aXAuc3R5bGUuZGlzcGxheSA9ICcnO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVUaXAoKTogSFRNTERpdkVsZW1lbnQge1xuICAgIGNvbnN0IHRpcCA9IHRoaXMuY3JlYXRlRWxlbWVudCgncGx1Z2luLXNsaWRlcl9fdGlwJyk7XG4gICAgdGlwLmNsYXNzTGlzdC5hZGQoYHBsdWdpbi1zbGlkZXJfX3RpcF8ke3RoaXMubW9kfWApO1xuICAgIHRpcC5pbm5lclRleHQgPSBgJHt0aGlzLnZhbHVlVGlwfWA7XG4gICAgdGlwLnN0eWxlW3N1cGVyLnN0YXJ0UG9pbnRdID0gYCR7dGhpcy5wZXJjZW50UG9zaXRpb259JWA7XG4gICAgcmV0dXJuIHRpcDtcbiAgfVxuXG4gIHByaXZhdGUgYWRkVGlwKCkge1xuICAgIHRoaXMucm9vdC5hcHBlbmQodGhpcy50aXApO1xuICB9XG5cbiAgcHVibGljIHNldFBvc2l0aW9uKHBlcmNlbnRQb3NpdGlvbjogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy50aXAuc3R5bGVbdGhpcy5zdGFydFBvaW50XSA9IGAke3BlcmNlbnRQb3NpdGlvbn0lYDtcbiAgICB0aGlzLnRpcC5pbm5lclRleHQgPSBgJHt2YWx1ZX1gO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRpcDtcbiIsImltcG9ydCBPYnNlcnZlciBmcm9tICcuLi8uLi8uLi8uLi9PYnNlcnZlci9PYnNlcnZlcic7XG5pbXBvcnQgeyBTbGlkZXJJbnRlcmZhY2UsIFNsaWRlckV2ZW50VmFsQ2hhbmdlZERhdGEsIFNjYWxlQ2xpY2tEYXRhIH0gZnJvbSAnLi4vLi4vLi4vSW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBTTElERVJfRVZFTlRTIH0gZnJvbSAnLi4vLi4vLi4vLi4vT2JzZXJ2ZXIvZXZlbnRzJztcbmltcG9ydCBQcm9ncmVzcyBmcm9tICcuLi9Qcm9ncmVzcy9Qcm9ncmVzcyc7XG5pbXBvcnQgU2NhbGUgZnJvbSAnLi4vU2NhbGUvU2NhbGUnO1xuaW1wb3J0IFNjYWxlTWFya3MgZnJvbSAnLi4vU2NhbGVNYXJrcy9TY2FsZU1hcmtzJztcbmltcG9ydCBTbGlkZXJDb21wb25lbnRzIGZyb20gJy4uL1NsaWRlckNvbXBvbmVudHMvU2xpZGVyQ29tcG9uZW50cyc7XG5pbXBvcnQgVGh1bWIgZnJvbSAnLi4vVGh1bWIvVGh1bWInO1xuaW1wb3J0IFRpcCBmcm9tICcuLi9UaXAvVGlwJztcbmltcG9ydCAnLi9zbGlkZXIuc2Nzcyc7XG5cbmNsYXNzIFNsaWRlciBleHRlbmRzIE9ic2VydmVyIHtcbiAgdGlwVmFsdWVGcm9tITogbnVtYmVyO1xuXG4gIHRodW1iUGVyY2VudEZyb20hOiBudW1iZXI7XG5cbiAgdGh1bWJQZXJjZW50VG8/OiBudW1iZXI7XG5cbiAgdGlwVmFsdWVUbz86IG51bWJlcjtcblxuICByb290ITogRWxlbWVudDtcblxuICBzbGlkZXIhOiBIVE1MRGl2RWxlbWVudDtcblxuICBzY2FsZUVsZW1lbnQhOiBIVE1MRGl2RWxlbWVudDtcblxuICBpc1Byb2dyZXNzITogYm9vbGVhbjtcblxuICBpc1JhbmdlITogYm9vbGVhbjtcblxuICBpc1ZlcnRpY2FsITogYm9vbGVhbjtcblxuICBpc1RpcCE6IGJvb2xlYW47XG5cbiAgc2NhbGVNYXA6IE1hcDxudW1iZXIsIG51bWJlcj4gfCB1bmRlZmluZWQ7XG5cbiAgdGh1bWJGcm9tITogVGh1bWI7XG5cbiAgdGh1bWJUbz86IFRodW1iO1xuXG4gIHNjYWxlITogU2NhbGU7XG5cbiAgc2NhbGVNYXJrcyE6IFNjYWxlTWFya3M7XG5cbiAgdGlwRnJvbT86IFRpcDtcblxuICB0aXBUbz86IFRpcDtcblxuICBwcm9ncmVzcz86IFByb2dyZXNzO1xuXG4gIHNsaWRlckNvbXBuZW50cyE6IFNsaWRlckNvbXBvbmVudHM7XG5cbiAgaXNTY2FsZU1hcmtzITogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihyb290OiBFbGVtZW50LCBwcm90ZWN0ZWQgcmVhZG9ubHkgc3RhdGU6IFNsaWRlckludGVyZmFjZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jcmVhdGVWYXJpYWJsZXMocm9vdCwgc3RhdGUpO1xuICAgIHRoaXMuaW5pdFNsaWRlcigpO1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0U2xpZGVyKCk6IHZvaWQge1xuICAgIHRoaXMuc2xpZGVyID0gdGhpcy5jcmVhdGVTbGlkZXIoKTtcbiAgICB0aGlzLmNyZWF0ZWxlbWVudHMoKTtcbiAgICB0aGlzLmFkZFNsaWRlcigpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZShkYXRhOiBTbGlkZXJFdmVudFZhbENoYW5nZWREYXRhIHwgU2NhbGVDbGlja0RhdGEsIGV2ZW50OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQgPT09IFNMSURFUl9FVkVOVFMuVkFMVUVfU1RBUlRfQ0hBTkdFKSB7XG4gICAgICBjb25zdCB7IHNpemUgfSA9IHRoaXMuc2xpZGVyQ29tcG5lbnRzO1xuICAgICAgY29uc3Qgc2NhbGVTaXplID0gdGhpcy5zY2FsZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc2l6ZV07XG4gICAgICBjb25zdCBzbGlkZXJEYXRhID0geyAuLi5kYXRhLCBzY2FsZVNpemUgfTtcbiAgICAgIHRoaXMuZW1pdChTTElERVJfRVZFTlRTLkRBVEFfQ09MTEVDVEVELCBzbGlkZXJEYXRhKTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQgPT09IFNMSURFUl9FVkVOVFMuU0NBTEVfQ0xJQ0tFRCB8fCBldmVudCA9PT0gU0xJREVSX0VWRU5UUy5LRVlfRE9XTikge1xuICAgICAgdGhpcy5lbWl0KFNMSURFUl9FVkVOVFMuREFUQV9DT0xMRUNURUQsIGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlVmFyaWFibGVzKHJvb3Q6IEVsZW1lbnQsIHN0YXRlOiBTbGlkZXJJbnRlcmZhY2UpOiB2b2lkIHtcbiAgICBjb25zdCB7XG4gICAgICBpc1RpcCxcbiAgICAgIHZhbHVlRnJvbSxcbiAgICAgIHZhbHVlVG8sXG4gICAgICB0aHVtYlBlcmNlbnRGcm9tLFxuICAgICAgdGh1bWJQZXJjZW50VG8sXG4gICAgICBpc1Byb2dyZXNzLFxuICAgICAgaXNSYW5nZSxcbiAgICAgIHNjYWxlTWFwLFxuICAgICAgaXNWZXJ0aWNhbCxcbiAgICAgIHNjYWxlTWFya3MsXG4gICAgfSA9IHN0YXRlO1xuXG4gICAgdGhpcy50aHVtYlBlcmNlbnRGcm9tID0gdGh1bWJQZXJjZW50RnJvbTtcbiAgICBpZiAodGh1bWJQZXJjZW50VG8pIHRoaXMudGh1bWJQZXJjZW50VG8gPSB0aHVtYlBlcmNlbnRUbztcblxuICAgIHRoaXMuaXNUaXAgPSBpc1RpcCB8fCBmYWxzZTtcbiAgICB0aGlzLnRpcFZhbHVlRnJvbSA9IHZhbHVlRnJvbSB8fCAwO1xuICAgIHRoaXMudGlwVmFsdWVUbyA9IHZhbHVlVG8gfHwgMDtcbiAgICB0aGlzLmlzUHJvZ3Jlc3MgPSBpc1Byb2dyZXNzIHx8IGZhbHNlO1xuICAgIHRoaXMuaXNSYW5nZSA9IGlzUmFuZ2UgfHwgZmFsc2U7XG4gICAgdGhpcy5pc1ZlcnRpY2FsID0gaXNWZXJ0aWNhbCB8fCBmYWxzZTtcbiAgICB0aGlzLnNjYWxlTWFwID0gc2NhbGVNYXA7XG4gICAgdGhpcy5pc1NjYWxlTWFya3MgPSBzY2FsZU1hcmtzO1xuICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZWxlbWVudHMoKTogdm9pZCB7XG4gICAgdGhpcy5zbGlkZXJDb21wbmVudHMgPSBuZXcgU2xpZGVyQ29tcG9uZW50cyh0aGlzLnNsaWRlciwgdGhpcy5pc1ZlcnRpY2FsKTtcbiAgICB0aGlzLnNjYWxlID0gbmV3IFNjYWxlKHRoaXMuc2xpZGVyLCB0aGlzLmlzVmVydGljYWwpO1xuICAgIHRoaXMuc2NhbGVFbGVtZW50ID0gdGhpcy5zY2FsZS5nZXRTY2FsZSgpO1xuXG4gICAgdGhpcy50aHVtYkZyb20gPSBuZXcgVGh1bWIoe1xuICAgICAgcm9vdDogdGhpcy5zY2FsZUVsZW1lbnQsXG4gICAgICB0aHVtYlBlcmNlbnQ6IHRoaXMudGh1bWJQZXJjZW50RnJvbSxcbiAgICAgIGlkOiAndmFsdWVGcm9tJyxcbiAgICAgIGlzVmVydGljYWw6IHRoaXMuaXNWZXJ0aWNhbCxcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmlzUmFuZ2UgJiYgdGhpcy50aHVtYlBlcmNlbnRUbykge1xuICAgICAgdGhpcy50aHVtYlRvID0gbmV3IFRodW1iKHtcbiAgICAgICAgcm9vdDogdGhpcy5zY2FsZUVsZW1lbnQsXG4gICAgICAgIHRodW1iUGVyY2VudDogdGhpcy50aHVtYlBlcmNlbnRUbyxcbiAgICAgICAgaWQ6ICd2YWx1ZVRvJyxcbiAgICAgICAgaXNWZXJ0aWNhbDogdGhpcy5pc1ZlcnRpY2FsLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNUaXApIHtcbiAgICAgIHRoaXMudGlwRnJvbSA9IG5ldyBUaXAoe1xuICAgICAgICByb290OiB0aGlzLnNjYWxlRWxlbWVudCxcbiAgICAgICAgcGVyY2VudFBvc2l0aW9uOiB0aGlzLnRodW1iUGVyY2VudEZyb20sXG4gICAgICAgIHZhbHVlVGlwOiB0aGlzLnRpcFZhbHVlRnJvbSxcbiAgICAgICAgaXNWZXJ0aWNhbDogdGhpcy5pc1ZlcnRpY2FsLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNUaXAgJiYgdGhpcy50aHVtYlBlcmNlbnRUbyAmJiB0aGlzLmlzUmFuZ2UgJiYgdGhpcy50aXBWYWx1ZVRvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudGlwVG8gPSBuZXcgVGlwKHtcbiAgICAgICAgcm9vdDogdGhpcy5zY2FsZUVsZW1lbnQsXG4gICAgICAgIHBlcmNlbnRQb3NpdGlvbjogdGhpcy50aHVtYlBlcmNlbnRUbyxcbiAgICAgICAgdmFsdWVUaXA6IHRoaXMudGlwVmFsdWVUbyxcbiAgICAgICAgaXNWZXJ0aWNhbDogdGhpcy5pc1ZlcnRpY2FsLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQcm9ncmVzcyAmJiAhdGhpcy5pc1JhbmdlKSB7XG4gICAgICB0aGlzLnByb2dyZXNzID0gbmV3IFByb2dyZXNzKHtcbiAgICAgICAgcm9vdDogdGhpcy5zY2FsZUVsZW1lbnQsXG4gICAgICAgIHBvc2l0aW9uU3RhcnQ6IHRoaXMudGh1bWJQZXJjZW50RnJvbSxcbiAgICAgICAgcG9zaXRpb25FbmQ6IDAsXG4gICAgICAgIGlzVmVydGljYWw6IHRoaXMuaXNWZXJ0aWNhbCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzUHJvZ3Jlc3MgJiYgdGhpcy5pc1JhbmdlKSB7XG4gICAgICBjb25zdCB3aWR0aFByb2dyZXNzID0gdGhpcy50aHVtYlBlcmNlbnRUbyA/IHRoaXMudGh1bWJQZXJjZW50VG8gLSB0aGlzLnRodW1iUGVyY2VudEZyb20gOiAwO1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IG5ldyBQcm9ncmVzcyh7XG4gICAgICAgIHJvb3Q6IHRoaXMuc2NhbGVFbGVtZW50LFxuICAgICAgICBwb3NpdGlvblN0YXJ0OiB0aGlzLnRodW1iUGVyY2VudEZyb20sXG4gICAgICAgIHBvc2l0aW9uRW5kOiB3aWR0aFByb2dyZXNzLFxuICAgICAgICBpc1ZlcnRpY2FsOiB0aGlzLmlzVmVydGljYWwsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zY2FsZU1hcCAmJiB0aGlzLmlzU2NhbGVNYXJrcykge1xuICAgICAgdGhpcy5zY2FsZU1hcmtzID0gbmV3IFNjYWxlTWFya3ModGhpcy5zY2FsZUVsZW1lbnQsIHRoaXMuc2NhbGVNYXAsIHRoaXMuaXNWZXJ0aWNhbCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRTbGlkZXIoKTogdm9pZCB7XG4gICAgdGhpcy5yb290LmFwcGVuZCh0aGlzLnNsaWRlcik7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBwcml2YXRlIGNyZWF0ZVNsaWRlcigpOiBIVE1MRGl2RWxlbWVudCB7XG4gICAgY29uc3Qgc2xpZGVyV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHNsaWRlcldyYXBwZXIuY2xhc3NOYW1lID0gJ3BsdWdpbi1zbGlkZXInO1xuICAgIHJldHVybiBzbGlkZXJXcmFwcGVyO1xuICB9XG5cbiAgcHVibGljIHNldFN0YXRlKGRhdGE6IFNsaWRlckludGVyZmFjZSk6IHZvaWQge1xuICAgIGNvbnN0IHtcbiAgICAgIHRodW1iUGVyY2VudEZyb20sXG4gICAgICB2YWx1ZUZyb20sXG4gICAgICBpc1JhbmdlLFxuICAgICAgdGh1bWJQZXJjZW50VG8sXG4gICAgICB2YWx1ZVRvLFxuICAgIH0gPSBkYXRhO1xuXG4gICAgLy8gVGh1bWIgcGVyY2VudHNcbiAgICB0aGlzLnRodW1iUGVyY2VudEZyb20gPSB0aHVtYlBlcmNlbnRGcm9tO1xuICAgIHRoaXMudGh1bWJGcm9tLnNldFBvc2l0aW9uKHRoaXMudGh1bWJQZXJjZW50RnJvbSk7XG5cbiAgICBpZiAoaXNSYW5nZSAmJiB0aHVtYlBlcmNlbnRUbyAhPT0gdW5kZWZpbmVkICYmIHRoaXMudGh1bWJUbykge1xuICAgICAgdGhpcy50aHVtYlBlcmNlbnRUbyA9IHRodW1iUGVyY2VudFRvO1xuICAgICAgdGhpcy50aHVtYlRvLnNldFBvc2l0aW9uKHRoaXMudGh1bWJQZXJjZW50VG8pO1xuICAgIH1cblxuICAgIC8vICBUaXBzXG4gICAgY29uc3QgeyBpc1RpcCB9ID0gdGhpcztcbiAgICBpZiAoaXNUaXAgJiYgdGhpcy50aXBGcm9tKSB7XG4gICAgICB0aGlzLnRpcFZhbHVlRnJvbSA9IHZhbHVlRnJvbTtcbiAgICAgIHRoaXMudGlwRnJvbS5zZXRQb3NpdGlvbih0aGlzLnRodW1iUGVyY2VudEZyb20sIHRoaXMudGlwVmFsdWVGcm9tKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc05lZWREb3VibGVUaXAoKSkge1xuICAgICAgdGhpcy50aXBGcm9tPy5zZXRWYWx1ZVRpcChgJHt2YWx1ZUZyb219IC0gJHt2YWx1ZVRvfWApO1xuICAgICAgdGhpcy50aXBUbz8uaGlkZVRpcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRpcFRvPy5zaG93VGlwKCk7XG4gICAgfVxuXG4gICAgaWYgKGlzUmFuZ2UgJiYgdGhpcy50aXBUbyAmJiB2YWx1ZVRvICE9PSB1bmRlZmluZWQgJiYgdGhpcy50aHVtYlBlcmNlbnRUbykge1xuICAgICAgdGhpcy50aXBWYWx1ZVRvID0gdmFsdWVUbztcbiAgICAgIHRoaXMudGlwVG8uc2V0UG9zaXRpb24odGhpcy50aHVtYlBlcmNlbnRUbywgdGhpcy50aXBWYWx1ZVRvKTtcbiAgICB9XG5cbiAgICAvLyBQcm9ncmVzc1xuICAgIGlmICh0aGlzLmlzUHJvZ3Jlc3MgJiYgIWlzUmFuZ2UpIHtcbiAgICAgIHRoaXMucHJvZ3Jlc3M/LnNldFByb2dyZXNzUG9zaXRpb24oMCwgdGhpcy50aHVtYlBlcmNlbnRGcm9tKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNQcm9ncmVzcyAmJiBpc1JhbmdlICYmIHRodW1iUGVyY2VudFRvKSB7XG4gICAgICB0aGlzLnByb2dyZXNzPy5zZXRQcm9ncmVzc1Bvc2l0aW9uKHRoaXMudGh1bWJQZXJjZW50RnJvbSwgdGh1bWJQZXJjZW50VG8gLSB0aHVtYlBlcmNlbnRGcm9tKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNQcm9ncmVzcyAmJiB0aHVtYlBlcmNlbnRUbyA9PT0gdGh1bWJQZXJjZW50RnJvbSkge1xuICAgICAgdGhpcy5wcm9ncmVzcz8uc2V0UHJvZ3Jlc3NQb3NpdGlvbigwLCAwKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGlzTmVlZERvdWJsZVRpcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc1RpcFxuICAgICAgJiYgdGhpcy5pc1JhbmdlXG4gICAgICAmJiB0aGlzLnRodW1iUGVyY2VudFRvICE9PSB1bmRlZmluZWRcbiAgICAgICYmICgodGhpcy50aHVtYlBlcmNlbnRUbyAtIHRoaXMudGh1bWJQZXJjZW50RnJvbSA8PSAyKVxuICAgICAgICB8fCAodGhpcy50aHVtYlBlcmNlbnRUbyA9PT0gMCAmJiB0aGlzLnRodW1iUGVyY2VudEZyb20gPT09IDApKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTbGlkZXI7XG4iLCJpbXBvcnQgT2JzZXJ2ZXIgZnJvbSAnLi4vLi4vT2JzZXJ2ZXIvT2JzZXJ2ZXInO1xuaW1wb3J0IFNsaWRlciBmcm9tICcuL3N1YlZpZXdzL1NsaWRlci9TbGlkZXInO1xuaW1wb3J0IHsgU0xJREVSX0VWRU5UUyB9IGZyb20gJy4uLy4uL09ic2VydmVyL2V2ZW50cyc7XG5pbXBvcnQgeyBTbGlkZXJJbnRlcmZhY2UgfSBmcm9tICcuLi9JbnRlcmZhY2VzJztcblxuY2xhc3MgVmlldyBleHRlbmRzIE9ic2VydmVyIHtcbiAgcm9vdCE6IEVsZW1lbnQ7XG5cbiAgc2xpZGVyITogU2xpZGVyO1xuXG4gIGlzUmFuZ2UhOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHJvb3Q6IEVsZW1lbnQsIHByb3RlY3RlZCByZWFkb25seSBzdGF0ZTogU2xpZGVySW50ZXJmYWNlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmluaXRWaWV3KHJvb3QsIHN0YXRlKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0Vmlldyhyb290OiBFbGVtZW50LCBzdGF0ZTogU2xpZGVySW50ZXJmYWNlKTogdm9pZCB7XG4gICAgY29uc3QgeyBpc1JhbmdlIH0gPSBzdGF0ZTtcbiAgICB0aGlzLnJvb3QgPSByb290O1xuICAgIHRoaXMuaXNSYW5nZSA9IGlzUmFuZ2U7XG4gICAgdGhpcy5zbGlkZXIgPSBuZXcgU2xpZGVyKHJvb3QsIHN0YXRlKTtcbiAgICB0aGlzLmFkZFN1YnNjcmliZVNsaWRlcigpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZVNsaWRlcihkYXRhOiBTbGlkZXJJbnRlcmZhY2UpOiB2b2lkIHtcbiAgICB0aGlzLnNsaWRlci5zZXRTdGF0ZShkYXRhKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoZGF0YTogU2xpZGVySW50ZXJmYWNlLCBldmVudDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGV2ZW50ID09PSBTTElERVJfRVZFTlRTLkRBVEFfQ09MTEVDVEVEKSB7XG4gICAgICB0aGlzLmVtaXQoU0xJREVSX0VWRU5UUy5WQUxVRV9DSEFOR0VELCBkYXRhKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50ID09PSBTTElERVJfRVZFTlRTLlZBTFVFX0NIQU5HRUQpIHtcbiAgICAgIHRoaXMudXBkYXRlU2xpZGVyKGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkU3Vic2NyaWJlU2xpZGVyKCk6IHZvaWQge1xuICAgIHRoaXMuc2xpZGVyLnRodW1iRnJvbS5hZGRTdWJzY3JpYmVyKFNMSURFUl9FVkVOVFMuVkFMVUVfU1RBUlRfQ0hBTkdFLCB0aGlzLnNsaWRlcik7XG4gICAgdGhpcy5zbGlkZXIudGh1bWJGcm9tLmFkZFN1YnNjcmliZXIoU0xJREVSX0VWRU5UUy5LRVlfRE9XTiwgdGhpcy5zbGlkZXIpO1xuICAgIGlmICh0aGlzLmlzUmFuZ2UgJiYgdGhpcy5zbGlkZXIudGh1bWJUbykge1xuICAgICAgdGhpcy5zbGlkZXIudGh1bWJUby5hZGRTdWJzY3JpYmVyKFNMSURFUl9FVkVOVFMuVkFMVUVfU1RBUlRfQ0hBTkdFLCB0aGlzLnNsaWRlcik7XG4gICAgICB0aGlzLnNsaWRlci50aHVtYlRvLmFkZFN1YnNjcmliZXIoU0xJREVSX0VWRU5UUy5LRVlfRE9XTiwgdGhpcy5zbGlkZXIpO1xuICAgIH1cbiAgICB0aGlzLnNsaWRlci5zY2FsZS5hZGRTdWJzY3JpYmVyKFNMSURFUl9FVkVOVFMuU0NBTEVfQ0xJQ0tFRCwgdGhpcy5zbGlkZXIpO1xuICAgIHRoaXMuc2xpZGVyLmFkZFN1YnNjcmliZXIoU0xJREVSX0VWRU5UUy5TQ0FMRV9DTElDS0VELCB0aGlzKTtcbiAgICB0aGlzLnNsaWRlci5hZGRTdWJzY3JpYmVyKFNMSURFUl9FVkVOVFMuREFUQV9DT0xMRUNURUQsIHRoaXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXc7XG4iLCJpbnRlcmZhY2UgTW9kZWxJbnRlcmZhY2Uge1xuICBtaW46IG51bWJlcixcbiAgbWF4OiBudW1iZXIsXG4gIHZhbHVlRnJvbTogbnVtYmVyLFxuICB2YWx1ZVRvOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gIHRodW1iUGVyY2VudEZyb206IG51bWJlcixcbiAgdGh1bWJQZXJjZW50VG86IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgc3RlcDogbnVtYmVyLFxuICBzY2FsZU1hcmtzOiBib29sZWFuLFxuICBzY2FsZVBlcmNlbnRHYXA/OiBudW1iZXIsXG4gIGlzVGlwOiBib29sZWFuLFxuICBpc1Byb2dyZXNzOiBib29sZWFuLFxuICBpc1JhbmdlOiBib29sZWFuLFxuICBpc1ZlcnRpY2FsOiBib29sZWFuLFxufVxuXG5pbnRlcmZhY2UgTW9kZWxJbnB1dFN0YXRlIHtcbiAgbWluOiBudW1iZXIsXG4gIG1heDogbnVtYmVyLFxuICB2YWx1ZUZyb206IG51bWJlcixcbiAgdmFsdWVUbzogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICBzdGVwOiBudW1iZXIsXG4gIHNjYWxlTWFya3M6IGJvb2xlYW4sXG4gIHNjYWxlUGVyY2VudEdhcD86IG51bWJlcixcbiAgaXNUaXA6IGJvb2xlYW4sXG4gIGlzUHJvZ3Jlc3M6IGJvb2xlYW4sXG4gIGlzUmFuZ2U6IGJvb2xlYW4sXG4gIGlzVmVydGljYWw6IGJvb2xlYW5cbn1cblxuaW50ZXJmYWNlIFNsaWRlckludGVyZmFjZSBleHRlbmRzIE1vZGVsSW50ZXJmYWNlIHtcbiAgc2NhbGVNYXA/OiBNYXA8bnVtYmVyLCBudW1iZXI+XG59XG5cbnR5cGUgTW9kZWxWYWwgPSAnbWluJyB8ICdtYXgnIHwgJ3ZhbHVlRnJvbScgfCAnc3RlcCcgfCAndmFsdWVUbycgfCAnc2NhbGVNYXJrcycgfCAnc2NhbGVQZXJjZW50R2FwJ1xuICB8ICdpc1RpcCcgfCAnaXNQcm9ncmVzcycgfCAnaXNSYW5nZScgfCAnaXNWZXJ0aWNhbCc7XG50eXBlIFRodW1iSUQgPSAndmFsdWVGcm9tJyB8ICd2YWx1ZVRvJ1xudHlwZSBTdGFydFBvaW50VHlwZSA9ICd0b3AnIHwgJ2xlZnQnO1xudHlwZSBTaXplVHlwZSA9ICdoZWlnaHQnIHwgJ3dpZHRoJztcblxuY29uc3QgVGh1bWJWYWxQZXJjZW50ID0ge1xuICB2YWx1ZUZyb206ICd0aHVtYlBlcmNlbnRGcm9tJyxcbiAgdmFsdWVUbzogJ3RodW1iUGVyY2VudFRvJyxcbn07XG5cbmludGVyZmFjZSBIYW5kbGVNb3ZlTW9kZWwge1xuICB2YWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICB0aHVtYjogVGh1bWJJRCxcbiAgcGVyY2VudDogbnVtYmVyLFxufVxuXG5pbnRlcmZhY2UgSGFuZGxlTW92ZU1vZGVsRnJvbSB7XG4gIHZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gIHRodW1iOiBUaHVtYklELFxuICBwZXJjZW50OiBudW1iZXIsXG59XG5cbmludGVyZmFjZSBIYW5kbGVNb3ZlTW9kZWxUbyB7XG4gIHZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gIHRodW1iOiBUaHVtYklELFxuICBwZXJjZW50OiBudW1iZXIsXG59XG5cbnR5cGUgS2V5RXZlbnQgPSAnZGVjcmVtZW50JyB8ICdpbmNyZW1lbnQnO1xuXG5pbnRlcmZhY2UgU2xpZGVyRXZlbnRWYWxDaGFuZ2VkRGF0YSB7XG4gIGNvb3Jkc01vdmU6IG51bWJlcixcbiAgdGh1bWJJZDogVGh1bWJJRCxcbiAgaXNWZXJ0aWNhbDogYm9vbGVhbixcbiAga2V5RXZlbnQ/OiBLZXlFdmVudCxcbn1cblxuaW50ZXJmYWNlIFZhbGlkYXRlU2xpZGVyRGF0YSB7XG4gIGNvb3Jkc01vdmU6IG51bWJlcixcbiAgc2NhbGVTaXplOiBudW1iZXIsXG4gIHRodW1iSWQ/OiBzdHJpbmcsXG4gIGtleUV2ZW50PzogS2V5RXZlbnQsXG59XG5cbmludGVyZmFjZSBTY2FsZUNsaWNrRGF0YSB7XG4gIGNsaWNrUG9zOiBudW1iZXIsXG4gIHNjYWxlU2l6ZTogbnVtYmVyLFxufVxuXG5pbnRlcmZhY2UgUHJvZ3Jlc3NEYXRhIHtcbiAgcm9vdDogRWxlbWVudCxcbiAgcG9zaXRpb25TdGFydDogbnVtYmVyLFxuICBwb3NpdGlvbkVuZDogbnVtYmVyLFxuICBpc1ZlcnRpY2FsOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgVGlwRGF0YSB7XG4gIHJvb3Q6IEhUTUxEaXZFbGVtZW50LFxuICBwZXJjZW50UG9zaXRpb246IG51bWJlcixcbiAgdmFsdWVUaXA6IG51bWJlciB8IHN0cmluZyxcbiAgaXNWZXJ0aWNhbDogYm9vbGVhbixcbn1cblxuaW50ZXJmYWNlIGlzVmFsVGhlU2FtZVBvcyB7XG4gIHZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gIHZhbHVlQW5vdGhlclRodW1iOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gIHRodW1iUGVyY2VudDogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICB0aHVtYjogc3RyaW5nLFxuICBpZFZhbDogVGh1bWJJRDtcbn1cblxudHlwZSBTdGVwc01hcCA9IE1hcDxudW1iZXIsIG51bWJlcj47XG5cbmludGVyZmFjZSBUaHVtYkFyZ3Mge1xuICByb290OiBIVE1MRWxlbWVudCxcbiAgdGh1bWJQZXJjZW50OiBudW1iZXIsXG4gIGlkOiBUaHVtYklELFxuICBpc1ZlcnRpY2FsOiBib29sZWFuLFxufVxuXG5pbnRlcmZhY2UgTW9kZWxTZXRWYWwge1xuICBoYWxmTW92ZTogbnVtYmVyLFxuICBoYWxmU3RlcDogbnVtYmVyLFxuICBuZWFyU3RlcFBlcmNlbnQ6IG51bWJlcixcbiAgdGh1bWI6IFRodW1iSURcbn1cblxuZXhwb3J0IHtcbiAgTW9kZWxJbnRlcmZhY2UsXG4gIE1vZGVsVmFsLFxuICBTbGlkZXJJbnRlcmZhY2UsXG4gIFZhbGlkYXRlU2xpZGVyRGF0YSxcbiAgVGh1bWJJRCxcbiAgVGh1bWJWYWxQZXJjZW50LFxuICBIYW5kbGVNb3ZlTW9kZWwsXG4gIEhhbmRsZU1vdmVNb2RlbEZyb20sXG4gIEhhbmRsZU1vdmVNb2RlbFRvLFxuICBTbGlkZXJFdmVudFZhbENoYW5nZWREYXRhLFxuICBQcm9ncmVzc0RhdGEsXG4gIFRpcERhdGEsXG4gIGlzVmFsVGhlU2FtZVBvcyxcbiAgU3RlcHNNYXAsXG4gIFN0YXJ0UG9pbnRUeXBlLFxuICBTaXplVHlwZSxcbiAgVGh1bWJBcmdzLFxuICBTY2FsZUNsaWNrRGF0YSxcbiAgTW9kZWxTZXRWYWwsXG4gIE1vZGVsSW5wdXRTdGF0ZSxcbiAgS2V5RXZlbnQsXG59O1xuIiwiaW1wb3J0IHtcbiAgTW9kZWxJbnRlcmZhY2UsXG4gIE1vZGVsVmFsLFxuICBUaHVtYklELFxuICBUaHVtYlZhbFBlcmNlbnQsXG4gIEhhbmRsZU1vdmVNb2RlbCxcbiAgSGFuZGxlTW92ZU1vZGVsRnJvbSxcbiAgSGFuZGxlTW92ZU1vZGVsVG8sXG4gIGlzVmFsVGhlU2FtZVBvcyxcbiAgLy8gU3RlcHNNYXAsXG59IGZyb20gJy4uL0ludGVyZmFjZXMnO1xuXG5jbGFzcyBNb2RlbCB7XG4gIHByaXZhdGUgc3RhdGU6IE1vZGVsSW50ZXJmYWNlO1xuXG4gIC8vIG1hcFN0ZXBzITogU3RlcHNNYXA7XG5cbiAgc3RlcFBlcmNlbnQhOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioc3RhdGU6IE1vZGVsSW50ZXJmYWNlKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KCk6IHZvaWQge1xuICAgIC8vIHRoaXMubWFwU3RlcHMgPSB0aGlzLmNyZWF0ZVN0ZXBzKCk7XG4gICAgdGhpcy5zdGVwUGVyY2VudCA9IE51bWJlcigodGhpcy5zdGF0ZS5zdGVwIC8gdGhpcy5maW5kVmFsUGVyY2VudCgpKSk7XG4gIH1cblxuICBwdWJsaWMgc2V0U3RhdGUoc3RhdGU6IG9iamVjdCk6IHZvaWQge1xuICAgIGNvbnN0IG9sZFN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnN0YXRlID0geyAuLi5vbGRTdGF0ZSwgLi4uc3RhdGUgfTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGF0ZSgpOiBNb2RlbEludGVyZmFjZSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGU7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlU3RhdGVNb3ZlKG1vdmVkVG86IG51bWJlciwgdGh1bWI6IFRodW1iSUQpOiB2b2lkIHtcbiAgICB0aGlzLmZpbmRTdWl0YWJsZVBlcmNlbnQobW92ZWRUbywgdGh1bWIpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kU3VpdGFibGVQZXJjZW50KHBlcmNlbnRNb3ZlOiBudW1iZXIsIHRodW1iOiBUaHVtYklEKSB7XG4gICAgY29uc3Qge1xuICAgICAgc3RlcCxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IG5lYXJlc3RQcmV2Q291bnRTdGVwID0gTWF0aC5mbG9vcihwZXJjZW50TW92ZSAvIHRoaXMuc3RlcFBlcmNlbnQpO1xuICAgIGNvbnN0IG5lYXJlc3ROZXh0Q291bnRTdGVwID0gTWF0aC5jZWlsKHBlcmNlbnRNb3ZlIC8gdGhpcy5zdGVwUGVyY2VudCk7XG5cbiAgICBjb25zdCBwcmV2U3RlcCA9IG1pbiArIChzdGVwICogbmVhcmVzdFByZXZDb3VudFN0ZXApO1xuICAgIGNvbnN0IG5leHRTdGVwID0gbWluICsgKHN0ZXAgKiBuZWFyZXN0TmV4dENvdW50U3RlcCk7XG5cbiAgICBjb25zdCBwcmV2UGVyY2VudCA9IHRoaXMuc3RlcFBlcmNlbnQgKiBuZWFyZXN0UHJldkNvdW50U3RlcDtcbiAgICBjb25zdCBuZXh0UGVyY2VudCA9IHRoaXMuc3RlcFBlcmNlbnQgKiBuZWFyZXN0TmV4dENvdW50U3RlcDtcblxuICAgIGNvbnN0IGhhbGZTdGVwID0gTnVtYmVyKCh0aGlzLnN0ZXBQZXJjZW50IC8gMikudG9GaXhlZCgzKSk7XG4gICAgY29uc3QgaGFsZk1vdmUgPSBOdW1iZXIoKHBlcmNlbnRNb3ZlICUgdGhpcy5zdGVwUGVyY2VudCkudG9GaXhlZCgzKSk7XG5cbiAgICBsZXQgdmFsdWU6IG51bWJlcjtcbiAgICBsZXQgcGVyY2VudDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgaWYgKGhhbGZNb3ZlIDwgaGFsZlN0ZXApIHtcbiAgICAgIHZhbHVlID0gcHJldlN0ZXA7XG4gICAgICBwZXJjZW50ID0gcHJldlBlcmNlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gbmV4dFN0ZXA7XG4gICAgICBwZXJjZW50ID0gbmV4dFBlcmNlbnQ7XG4gICAgfVxuXG4gICAgY29uc3QgYWxsU3RlcHMgPSBNYXRoLmNlaWwoKG1heCAtIG1pbikgLyBzdGVwKTtcbiAgICBjb25zdCBiZWZvcmVFbmRQZXJjZW50ID0gdGhpcy5zdGVwUGVyY2VudCAqIChhbGxTdGVwcyAtIDEpO1xuXG4gICAgaWYgKHBlcmNlbnRNb3ZlID09PSAxMDAgfHwgMTAwIC0gKCgxMDAgLSBiZWZvcmVFbmRQZXJjZW50KSAvIDIpIDwgcGVyY2VudE1vdmUpIHtcbiAgICAgIHZhbHVlID0gbWF4O1xuICAgICAgcGVyY2VudCA9IDEwMDtcbiAgICB9XG4gICAgaWYgKHBlcmNlbnQgPT09IHVuZGVmaW5lZCkgcGVyY2VudCA9IHRoaXMuc3RlcFBlcmNlbnQgKiBuZWFyZXN0UHJldkNvdW50U3RlcDtcblxuICAgIHRoaXMuaGFuZGxlTW92ZSh7XG4gICAgICB2YWx1ZSxcbiAgICAgIHRodW1iLFxuICAgICAgcGVyY2VudCxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlTW92ZSh2YWx1ZXM6IEhhbmRsZU1vdmVNb2RlbCk6IHZvaWQge1xuICAgIGNvbnN0IHtcbiAgICAgIHZhbHVlLFxuICAgICAgdGh1bWIsXG4gICAgICBwZXJjZW50LFxuICAgIH0gPSB2YWx1ZXM7XG5cbiAgICBpZiAodGh1bWIgPT09ICd2YWx1ZUZyb20nKSB7XG4gICAgICB0aGlzLmhhbmRsZU1vdmVGcm9tKHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHRodW1iLFxuICAgICAgICBwZXJjZW50LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRodW1iID09PSAndmFsdWVUbycpIHtcbiAgICAgIHRoaXMuaGFuZGxlTW92ZVRvKHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHRodW1iLFxuICAgICAgICBwZXJjZW50LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVNb3ZlRnJvbSh2YWx1ZXM6IEhhbmRsZU1vdmVNb2RlbEZyb20pOiB2b2lkIHtcbiAgICBjb25zdCB7XG4gICAgICB2YWx1ZSxcbiAgICAgIHRodW1iLFxuICAgICAgcGVyY2VudCxcbiAgICB9ID0gdmFsdWVzO1xuXG4gICAgY29uc3Qge1xuICAgICAgdmFsdWVUbyxcbiAgICAgIHRodW1iUGVyY2VudFRvLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKHRoaXMuaXNWYWxUaGVTYW1lUG9zKHtcbiAgICAgIHZhbHVlLFxuICAgICAgdmFsdWVBbm90aGVyVGh1bWI6IHZhbHVlVG8sXG4gICAgICB0aHVtYlBlcmNlbnQ6IHRodW1iUGVyY2VudFRvLFxuICAgICAgdGh1bWIsXG4gICAgICBpZFZhbDogJ3ZhbHVlRnJvbScsXG4gICAgfSkgJiYgdmFsdWVUbyAhPT0gdW5kZWZpbmVkICYmIHRodW1iUGVyY2VudFRvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlTW92ZWQodmFsdWVUbywgdGh1bWJQZXJjZW50VG8sIHRodW1iKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHRoaXMudXBkYXRlTW92ZWQodmFsdWUsIHBlcmNlbnQsIHRodW1iKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlTW92ZVRvKHZhbHVlczogSGFuZGxlTW92ZU1vZGVsVG8pOiB2b2lkIHtcbiAgICBjb25zdCB7XG4gICAgICB2YWx1ZSxcbiAgICAgIHRodW1iLFxuICAgICAgcGVyY2VudCxcbiAgICB9ID0gdmFsdWVzO1xuXG4gICAgY29uc3Qge1xuICAgICAgdmFsdWVGcm9tLFxuICAgICAgdGh1bWJQZXJjZW50RnJvbSxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmICh0aGlzLmlzVmFsVGhlU2FtZVBvcyh7XG4gICAgICB2YWx1ZSxcbiAgICAgIHZhbHVlQW5vdGhlclRodW1iOiB2YWx1ZUZyb20sXG4gICAgICB0aHVtYlBlcmNlbnQ6IHRodW1iUGVyY2VudEZyb20sXG4gICAgICB0aHVtYixcbiAgICAgIGlkVmFsOiAndmFsdWVUbycsXG4gICAgfSkgJiYgdmFsdWVGcm9tICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlTW92ZWQodmFsdWVGcm9tLCB0aHVtYlBlcmNlbnRGcm9tLCB0aHVtYik7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZU1vdmVkKHZhbHVlLCBwZXJjZW50LCB0aHVtYik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpc1ZhbFRoZVNhbWVQb3ModmFsdWVzOiBpc1ZhbFRoZVNhbWVQb3MpIHtcbiAgICBjb25zdCB7XG4gICAgICB2YWx1ZSxcbiAgICAgIHZhbHVlQW5vdGhlclRodW1iLFxuICAgICAgdGh1bWJQZXJjZW50LFxuICAgICAgdGh1bWIsXG4gICAgICBpZFZhbCxcbiAgICB9ID0gdmFsdWVzO1xuXG4gICAgY29uc3QgeyBpc1JhbmdlIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgY2hlY2tWYWwgPSBpc1JhbmdlICYmIHRodW1iUGVyY2VudCAhPT0gdW5kZWZpbmVkICYmIHRodW1iID09PSBpZFZhbDtcbiAgICBsZXQgY29tcGFyZVZhbCA9IGZhbHNlO1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlQW5vdGhlclRodW1iICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbXBhcmVWYWwgPSBpZFZhbCA9PT0gJ3ZhbHVlRnJvbScgPyB2YWx1ZSA+IHZhbHVlQW5vdGhlclRodW1iIDogdmFsdWUgPCB2YWx1ZUFub3RoZXJUaHVtYjtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hlY2tWYWwgJiYgY29tcGFyZVZhbDtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlTW92ZWQodmFsOiBudW1iZXIsIHBlcmNlbnQ6IG51bWJlciwgdGh1bWI6IFRodW1iSUQpOiB2b2lkIHtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbCkgfHwgcGVyY2VudCA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ1NvbWV0aGluZyB3cm9uZyB3aXRoIHNldHRpbmcgbmV3IHZhbHVlcycpO1xuICAgIGNvbnN0IHRodW1iUGVjZW50ID0gVGh1bWJWYWxQZXJjZW50W3RodW1iXTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgW3RodW1iXTogdmFsLFxuICAgICAgW3RodW1iUGVjZW50XTogcGVyY2VudCxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRWYWx1ZSh2YWw6IE1vZGVsVmFsKTogbnVtYmVyIHwgdW5kZWZpbmVkIHwgYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVbYCR7dmFsfWBdO1xuICB9XG5cbiAgcHVibGljIGdldFBlcmNlbnRWYWwoKTogbnVtYmVyIHtcbiAgICBjb25zdCB7IHZhbHVlRnJvbSwgbWluLCBtYXggfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcmFuZ2U6IG51bWJlciA9IG1heCAtIG1pbjtcbiAgICBjb25zdCBwZXJjZW50ID0gTnVtYmVyKCgodmFsdWVGcm9tIC8gcmFuZ2UpICogMTAwKS50b0ZpeGVkKDMpKTtcbiAgICByZXR1cm4gcGVyY2VudDtcbiAgfVxuXG4gIC8vIHByaXZhdGUgY3JlYXRlU3RlcHMoKTogU3RlcHNNYXAge1xuICAvLyAgIGNvbnN0IHsgc3RlcCwgbWF4LCBtaW4gfSA9IHRoaXMuc3RhdGU7XG4gIC8vICAgY29uc3QgbWFwU3RlcHM6IFN0ZXBzTWFwID0gbmV3IE1hcCgpO1xuICAvLyAgIGNvbnN0IHJhbmdlID0gdGhpcy5maW5kUmFuZ2UoKTtcbiAgLy8gICBjb25zdCBwZXJjZW50ID0gdGhpcy5maW5kVmFsUGVyY2VudCgpO1xuXG4gIC8vICAgbGV0IGNvdW50U3RlcCA9IDA7XG4gIC8vICAgZm9yIChsZXQgaSA9IG1pbjsgaSA8PSBtYXg7IGkgKz0gc3RlcCkge1xuICAvLyAgICAgY29uc3QgcGVyY2VudFN0ZXAgPSBOdW1iZXIoKChjb3VudFN0ZXAgKiBzdGVwKSAvIHBlcmNlbnQpLnRvRml4ZWQoMykpO1xuICAvLyAgICAgbWFwU3RlcHMuc2V0KGksIHBlcmNlbnRTdGVwKTtcbiAgLy8gICAgIGNvdW50U3RlcCArPSAxO1xuICAvLyAgIH1cbiAgLy8gICBpZiAocmFuZ2UgJSBzdGVwICE9PSAwKSB7XG4gIC8vICAgICBtYXBTdGVwcy5zZXQobWF4LCAxMDApO1xuICAvLyAgIH1cblxuICAvLyAgIGNvdW50U3RlcCA9IDA7XG4gIC8vICAgcmV0dXJuIG1hcFN0ZXBzO1xuICAvLyB9XG5cbiAgcHJpdmF0ZSBmaW5kVmFsUGVyY2VudCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5maW5kUmFuZ2UoKTtcbiAgICBjb25zdCBwZXJjZW50ID0gcmFuZ2UgLyAxMDA7XG4gICAgcmV0dXJuIHBlcmNlbnQ7XG4gIH1cblxuICBwcml2YXRlIGZpbmRSYW5nZSgpOiBudW1iZXIge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5zdGF0ZS5tYXggLSB0aGlzLnN0YXRlLm1pbjtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kZWw7XG4iLCJpbXBvcnQge1xuICBNb2RlbElucHV0U3RhdGUsXG4gIE1vZGVsSW50ZXJmYWNlLFxuICBTdGVwc01hcCxcbiAgVGh1bWJJRCxcbiAgVmFsaWRhdGVTbGlkZXJEYXRhLFxufSBmcm9tICcuLi9JbnRlcmZhY2VzJztcblxuY2xhc3MgVmFsaWRhdG9yIHtcbiAgcHJpdmF0ZSBERUZBVUxUX0dBUCA9IDIwO1xuXG4gIHByaXZhdGUgbWluITogbnVtYmVyO1xuXG4gIHByaXZhdGUgbWF4ITogbnVtYmVyO1xuXG4gIHByaXZhdGUgdmFsdWVGcm9tITogbnVtYmVyO1xuXG4gIHByaXZhdGUgc3RlcCE6IG51bWJlcjtcblxuICBwcml2YXRlIHJlc3VsdE9iamVjdCE6IE1vZGVsSW50ZXJmYWNlO1xuXG4gIHN0ZXBQZXJjZW50ITogbnVtYmVyO1xuXG4gIHZhbHVlVG8hOiBudW1iZXI7XG5cbiAgdGh1bWJQZXJjZW50RnJvbSE6IG51bWJlcjtcblxuICB0aHVtYlBlcmNlbnRUbz86IG51bWJlcjtcblxuICBzY2FsZVBlcmNlbnRHYXA6IG51bWJlciB8IHVuZGVmaW5lZDtcblxuICBpc1RpcCE6IGJvb2xlYW47XG5cbiAgaXNWZXJ0aWNhbCE6IGJvb2xlYW47XG5cbiAgaXNQcm9ncmVzcyE6IGJvb2xlYW47XG5cbiAgc2NhbGVNYXJrcyE6IGJvb2xlYW47XG5cbiAgaXNSYW5nZSE6IGJvb2xlYW47XG5cbiAgYXJyQm9vbGVhbnMhOiBib29sZWFuW107XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgZGF0YTogTW9kZWxJbnB1dFN0YXRlKSB7XG4gICAgdGhpcy52YWxpZGF0ZURhdGEoZGF0YSk7XG4gIH1cblxuICBwdWJsaWMgdmFsaWRhdGVEYXRhKGRhdGE6IE1vZGVsSW5wdXRTdGF0ZSk6IE1vZGVsSW50ZXJmYWNlIHtcbiAgICBjb25zdCBwcmV2Qm9vbCA9IHRoaXMuc2V0Qm9vbGVhbnMoZGF0YSk7XG4gICAgdGhpcy5zZXREYXRhKGRhdGEpO1xuICAgIHRoaXMucmVzdWx0T2JqZWN0ID0ge1xuICAgICAgLi4uZGF0YSwgLi4ucHJldkJvb2wsIHRodW1iUGVyY2VudEZyb206IDAsIHRodW1iUGVyY2VudFRvOiB1bmRlZmluZWQsXG4gICAgfTtcblxuICAgIHRoaXMuY2hlY2tSYW5nZSgpO1xuICAgIHRoaXMuY2hlY2tTdGVwKCk7XG4gICAgdGhpcy5jaGVja1ZhbHVlcygpO1xuICAgIHRoaXMuY2hlY2tQZXJjZW50cygpO1xuICAgIHJldHVybiB0aGlzLnJlc3VsdE9iamVjdDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gIHB1YmxpYyBwZXJmb3JtTW92ZVRvUGVyY2VudChkYXRhOiBWYWxpZGF0ZVNsaWRlckRhdGEpOiBudW1iZXIge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvb3Jkc01vdmUsIHNjYWxlU2l6ZSwga2V5RXZlbnQsIHRodW1iSWQsXG4gICAgfSA9IGRhdGE7XG5cbiAgICBpZiAoa2V5RXZlbnQpIHtcbiAgICAgIGlmIChrZXlFdmVudCA9PT0gJ2luY3JlbWVudCcgJiYgdGh1bWJJZCA9PT0gJ3ZhbHVlRnJvbScpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGh1bWJQZXJjZW50RnJvbSArIHRoaXMuc3RlcFBlcmNlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlFdmVudCA9PT0gJ2RlY3JlbWVudCcgJiYgdGh1bWJJZCA9PT0gJ3ZhbHVlRnJvbScpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGh1bWJQZXJjZW50RnJvbSAtIHRoaXMuc3RlcFBlcmNlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlFdmVudCA9PT0gJ2luY3JlbWVudCcgJiYgdGh1bWJJZCA9PT0gJ3ZhbHVlVG8nICYmIHRoaXMudGh1bWJQZXJjZW50VG8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHVtYlBlcmNlbnRUbyArIHRoaXMuc3RlcFBlcmNlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlFdmVudCA9PT0gJ2RlY3JlbWVudCcgJiYgdGh1bWJJZCA9PT0gJ3ZhbHVlVG8nICYmIHRoaXMudGh1bWJQZXJjZW50VG8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHVtYlBlcmNlbnRUbyAtIHRoaXMuc3RlcFBlcmNlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb29yZHNNb3ZlID09PSB1bmRlZmluZWQgfHwgc2NhbGVTaXplID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuXG4gICAgY29uc3QgcGVyY2VudCA9IHNjYWxlU2l6ZSAvIDEwMDtcbiAgICBsZXQgcGVyY2VudE1vdmUgPSBOdW1iZXIoKGNvb3Jkc01vdmUgLyBwZXJjZW50KS50b0ZpeGVkKDIpKTtcbiAgICBpZiAocGVyY2VudE1vdmUgPCAwKSBwZXJjZW50TW92ZSA9IDA7XG4gICAgaWYgKHBlcmNlbnRNb3ZlID4gMTAwKSBwZXJjZW50TW92ZSA9IDEwMDtcbiAgICByZXR1cm4gcGVyY2VudE1vdmU7XG4gIH1cblxuICAvLyBwdWJsaWMgdmFsaWRhdGVNYXJrcyhcbiAgLy8gICBtYXBTdGVwczogTWFwPG51bWJlciwgbnVtYmVyPixcbiAgLy8gICBiYXNpc1BlcmNlbnQ6IG51bWJlciA9IHRoaXMuREVGQVVMVF9HQVAsXG4gIC8vICk6IE1hcDxudW1iZXIsIG51bWJlcj4ge1xuICAvLyAgIGNvbnN0IHBlcmNlbnRFZGdlID0gdGhpcy52YWxpZGF0ZUdhcChiYXNpc1BlcmNlbnQpO1xuICAvLyAgIGNvbnN0IHJlc3VsdE1hcCA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gIC8vICAgbGV0IHByZXZQZXJjZW50ID0gMDtcbiAgLy8gICBsZXQgbmV4dFBlcmNlbnQgPSBwZXJjZW50RWRnZTtcblxuICAvLyAgIG1hcFN0ZXBzLmZvckVhY2goKHBlcmNlbnQ6IG51bWJlciwgdmFsdWU6IG51bWJlcikgPT4ge1xuICAvLyAgICAgaWYgKHBlcmNlbnQgPT09IDAgfHwgcGVyY2VudCA9PT0gMTAwKSB7XG4gIC8vICAgICAgIHJlc3VsdE1hcC5zZXQocGVyY2VudCwgdmFsdWUpO1xuICAvLyAgICAgfVxuXG4gIC8vICAgICBpZiAodGhpcy5pc0dldEdhcChuZXh0UGVyY2VudCwgcHJldlBlcmNlbnQsIHBlcmNlbnQsIHBlcmNlbnRFZGdlKSkge1xuICAvLyAgICAgICByZXN1bHRNYXAuc2V0KHBlcmNlbnQsIHZhbHVlKTtcbiAgLy8gICAgICAgcHJldlBlcmNlbnQgPSBwZXJjZW50O1xuICAvLyAgICAgICBuZXh0UGVyY2VudCA9IHBlcmNlbnQgKyBwZXJjZW50RWRnZTtcbiAgLy8gICAgIH1cbiAgLy8gICB9KTtcblxuICAvLyAgIHJldHVybiByZXN1bHRNYXA7XG4gIC8vIH1cblxuICBwdWJsaWMgdmFsaWRhdGVNYXJrcyhvcHRpb25zOiB7IG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgc3RlcDogbnVtYmVyLCBnYXA6IG51bWJlciB9KSB7XG4gICAgY29uc3Qge1xuICAgICAgc3RlcCxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICAgIGdhcCxcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IHBlcmNlbnRFZGdlID0gdGhpcy52YWxpZGF0ZUdhcChnYXApO1xuICAgIGNvbnN0IG1hcFN0ZXBzOiBTdGVwc01hcCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuZmluZFJhbmdlKCk7XG4gICAgY29uc3QgcGVyY2VudCA9IHJhbmdlIC8gMTAwO1xuXG4gICAgbGV0IHByZXZQZXJjZW50ID0gMDtcbiAgICBsZXQgbmV4dFBlcmNlbnQgPSBwZXJjZW50RWRnZTtcblxuICAgIGxldCBjb3VudFN0ZXAgPSAwO1xuICAgIGZvciAobGV0IGkgPSBtaW47IGkgPD0gbWF4OyBpICs9IHN0ZXApIHtcbiAgICAgIGNvbnN0IHBlcmNlbnRTdGVwID0gTnVtYmVyKChjb3VudFN0ZXAgKiBzdGVwKSAvIHBlcmNlbnQpO1xuICAgICAgaWYgKHRoaXMuaXNHZXRHYXAobmV4dFBlcmNlbnQsIHByZXZQZXJjZW50LCBwZXJjZW50U3RlcCwgcGVyY2VudEVkZ2UpKSB7XG4gICAgICAgIG1hcFN0ZXBzLnNldChpLCBwZXJjZW50U3RlcCk7XG4gICAgICAgIHByZXZQZXJjZW50ID0gcGVyY2VudFN0ZXA7XG4gICAgICAgIG5leHRQZXJjZW50ID0gcHJldlBlcmNlbnQgKyBwZXJjZW50RWRnZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBlcmNlbnRTdGVwID09PSAwIHx8IHBlcmNlbnRTdGVwID09PSAxMDApIHtcbiAgICAgICAgbWFwU3RlcHMuc2V0KGksIHBlcmNlbnRTdGVwKTtcbiAgICAgIH1cbiAgICAgIGNvdW50U3RlcCArPSAxO1xuICAgIH1cblxuICAgIGlmIChyYW5nZSAlIHN0ZXAgIT09IDApIHtcbiAgICAgIG1hcFN0ZXBzLnNldChtYXgsIDEwMCk7XG4gICAgfVxuXG4gICAgY291bnRTdGVwID0gMDtcbiAgICByZXR1cm4gbWFwU3RlcHM7XG4gIH1cblxuICBwdWJsaWMgdmFsaWRhdGVUaHVtYklkKG1vdmVkVG86IG51bWJlcik6IFRodW1iSUQge1xuICAgIGlmICghdGhpcy5pc1JhbmdlKSByZXR1cm4gJ3ZhbHVlRnJvbSc7XG4gICAgaWYgKG1vdmVkVG8gPCB0aGlzLnRodW1iUGVyY2VudEZyb20pIHJldHVybiAndmFsdWVGcm9tJztcbiAgICBpZiAodGhpcy50aHVtYlBlcmNlbnRUbyAhPT0gdW5kZWZpbmVkICYmIG1vdmVkVG8gPiB0aGlzLnRodW1iUGVyY2VudFRvKSByZXR1cm4gJ3ZhbHVlVG8nO1xuXG4gICAgaWYgKG1vdmVkVG8gPiB0aGlzLnRodW1iUGVyY2VudEZyb21cbiAgICAgICYmIHRoaXMudGh1bWJQZXJjZW50VG8gIT09IHVuZGVmaW5lZFxuICAgICAgJiYgbW92ZWRUbyA8IHRoaXMudGh1bWJQZXJjZW50VG8pIHtcbiAgICAgIGNvbnN0IGRpZmZGcm9tID0gbW92ZWRUbyAtIHRoaXMudGh1bWJQZXJjZW50RnJvbTtcbiAgICAgIGNvbnN0IGRpZmZUbyA9IHRoaXMudGh1bWJQZXJjZW50VG8gLSBtb3ZlZFRvO1xuXG4gICAgICBpZiAoZGlmZkZyb20gPT09IGRpZmZUbyB8fCBkaWZmRnJvbSA8IGRpZmZUbykgcmV0dXJuICd2YWx1ZUZyb20nO1xuICAgICAgaWYgKGRpZmZGcm9tID4gZGlmZlRvKSByZXR1cm4gJ3ZhbHVlVG8nO1xuICAgIH1cbiAgICByZXR1cm4gJ3ZhbHVlVG8nO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXREYXRhKGRhdGE6IE1vZGVsSW5wdXRTdGF0ZSk6IHZvaWQge1xuICAgIGNvbnN0IHtcbiAgICAgIG1pbixcbiAgICAgIG1heCxcbiAgICAgIHZhbHVlRnJvbSxcbiAgICAgIHN0ZXAsXG4gICAgICBzY2FsZVBlcmNlbnRHYXAsXG4gICAgICB2YWx1ZVRvLFxuICAgIH0gPSBkYXRhO1xuXG4gICAgdGhpcy5taW4gPSBtaW47XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gICAgdGhpcy52YWx1ZUZyb20gPSB2YWx1ZUZyb207XG4gICAgdGhpcy5zdGVwID0gc3RlcDtcbiAgICB0aGlzLnNjYWxlUGVyY2VudEdhcCA9IHNjYWxlUGVyY2VudEdhcDtcbiAgICBpZiAodHlwZW9mIHRoaXMuc2NhbGVQZXJjZW50R2FwICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpcy5zY2FsZVBlcmNlbnRHYXAgIT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLnNjYWxlUGVyY2VudEdhcCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1JhbmdlICYmIHZhbHVlVG8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy52YWx1ZVRvID0gdmFsdWVUbztcbiAgICB9XG5cbiAgICB0aGlzLnN0ZXBQZXJjZW50ID0gdGhpcy5zdGVwIC8gKHRoaXMuZmluZFJhbmdlKCkgLyAxMDApO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRCb29sZWFucyhkYXRhOiBNb2RlbElucHV0U3RhdGUpOiBvYmplY3Qge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzUmFuZ2UsXG4gICAgICBpc1RpcCxcbiAgICAgIGlzVmVydGljYWwsXG4gICAgICBpc1Byb2dyZXNzLFxuICAgICAgc2NhbGVNYXJrcyxcbiAgICB9ID0gZGF0YTtcblxuICAgIHRoaXMuaXNSYW5nZSA9IHR5cGVvZiBpc1JhbmdlID09PSAnYm9vbGVhbicgPyBpc1JhbmdlIDogZmFsc2U7XG4gICAgdGhpcy5pc1RpcCA9IHR5cGVvZiBpc1RpcCA9PT0gJ2Jvb2xlYW4nID8gaXNUaXAgOiBmYWxzZTtcbiAgICB0aGlzLmlzVmVydGljYWwgPSB0eXBlb2YgaXNWZXJ0aWNhbCA9PT0gJ2Jvb2xlYW4nID8gaXNWZXJ0aWNhbCA6IGZhbHNlO1xuICAgIHRoaXMuaXNQcm9ncmVzcyA9IHR5cGVvZiBpc1Byb2dyZXNzID09PSAnYm9vbGVhbicgPyBpc1Byb2dyZXNzIDogZmFsc2U7XG4gICAgdGhpcy5zY2FsZU1hcmtzID0gdHlwZW9mIHNjYWxlTWFya3MgPT09ICdib29sZWFuJyA/IHNjYWxlTWFya3MgOiBmYWxzZTtcblxuICAgIHJldHVybiB7XG4gICAgICBpc1JhbmdlOiB0aGlzLmlzUmFuZ2UsXG4gICAgICBpc1RpcDogdGhpcy5pc1RpcCxcbiAgICAgIGlzVmVydGljYWw6IHRoaXMuaXNWZXJ0aWNhbCxcbiAgICAgIGlzUHJvZ3Jlc3M6IHRoaXMuaXNQcm9ncmVzcyxcbiAgICAgIHNjYWxlTWFya3M6IHRoaXMuc2NhbGVNYXJrcyxcbiAgICB9O1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgcHJpdmF0ZSBpc0dldEdhcChcbiAgICBuZXh0UGVyY2VudDogbnVtYmVyLFxuICAgIHByZXZQZXJjZW50OiBudW1iZXIsXG4gICAgcGVyY2VudDogbnVtYmVyLFxuICAgIGdhcDogbnVtYmVyLFxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChuZXh0UGVyY2VudCkgLSBNYXRoLnJvdW5kKHByZXZQZXJjZW50KSA+PSBnYXBcbiAgICAgICYmIHBlcmNlbnQgPj0gbmV4dFBlcmNlbnRcbiAgICAgICYmICgxMDAgLSBnYXApID49IG5leHRQZXJjZW50O1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZUdhcChiYXNpc1BlcmNlbnQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgbGV0IHJlc3VsdCA9IGJhc2lzUGVyY2VudDtcbiAgICBpZiAocmVzdWx0IDwgMCB8fCByZXN1bHQgPiAxMDApIHJlc3VsdCA9IHRoaXMuREVGQVVMVF9HQVA7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tSYW5nZSgpOiB2b2lkIHtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHRoaXMubWluKSkgdGhpcy5taW4gPSAwO1xuICAgIGlmIChOdW1iZXIuaXNOYU4odGhpcy5tYXgpKSB0aGlzLm1heCA9IDEwO1xuICAgIGlmICh0aGlzLm1pbiA9PT0gdGhpcy5tYXgpIHtcbiAgICAgIHRoaXMubWF4ID0gdGhpcy5taW4gKyB0aGlzLnN0ZXA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWluID4gdGhpcy5tYXgpIHtcbiAgICAgIFt0aGlzLm1pbiwgdGhpcy5tYXhdID0gW3RoaXMubWF4LCB0aGlzLm1pbl07XG4gICAgfVxuICAgIHRoaXMucmVzdWx0T2JqZWN0Lm1pbiA9IHRoaXMubWluO1xuICAgIHRoaXMucmVzdWx0T2JqZWN0Lm1heCA9IHRoaXMubWF4O1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1N0ZXAoKTogdm9pZCB7XG4gICAgaWYgKE51bWJlci5pc05hTih0aGlzLnN0ZXApKSB0aGlzLnN0ZXAgPSAxO1xuICAgIGNvbnN0IGFsbFJhbmdlID0gdGhpcy5maW5kUmFuZ2UoKTtcblxuICAgIGlmICh0aGlzLnN0ZXAgPiBhbGxSYW5nZSkge1xuICAgICAgdGhpcy5zdGVwID0gYWxsUmFuZ2U7XG4gICAgfVxuICAgIGlmICghdGhpcy5zdGVwKSB0aGlzLnN0ZXAgPSAxO1xuICAgIHRoaXMucmVzdWx0T2JqZWN0LnN0ZXAgPSB0aGlzLnN0ZXA7XG4gIH1cblxuICBwcml2YXRlIGZpbmRSYW5nZSgpOiBudW1iZXIge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMubWF4IC0gdGhpcy5taW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tWYWx1ZXMoKTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZUZyb20gPSB0aGlzLmNoZWNrVmFsdWUodGhpcy52YWx1ZUZyb20pO1xuXG4gICAgaWYgKHRoaXMuaXNSYW5nZSkge1xuICAgICAgdGhpcy52YWx1ZVRvID0gdGhpcy5jaGVja1ZhbHVlKHRoaXMudmFsdWVUbyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFsdWVUbyAhPT0gdW5kZWZpbmVkICYmIHRoaXMudmFsdWVGcm9tID4gdGhpcy52YWx1ZVRvICYmIHRoaXMuaXNSYW5nZSkge1xuICAgICAgW3RoaXMudmFsdWVGcm9tLCB0aGlzLnZhbHVlVG9dID0gW3RoaXMudmFsdWVUbywgdGhpcy52YWx1ZUZyb21dO1xuICAgIH1cblxuICAgIHRoaXMucmVzdWx0T2JqZWN0LnZhbHVlRnJvbSA9IHRoaXMudmFsdWVGcm9tO1xuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHRoaXMucmVzdWx0T2JqZWN0LnZhbHVlVG8gPSB0aGlzLnZhbHVlVG87XG4gIH1cblxuICBwcml2YXRlIGNoZWNrVmFsdWUodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgbGV0IHJlc3VsdCA9IHZhbHVlO1xuICAgIGlmIChOdW1iZXIuaXNOYU4ocmVzdWx0KSkgcmVzdWx0ID0gMDtcbiAgICBpZiAocmVzdWx0ID09PSB0aGlzLm1heCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5tYXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQgJSB0aGlzLnN0ZXAgIT09IDAgJiYgcmVzdWx0ICE9PSB0aGlzLm1pbikge1xuICAgICAgY29uc3QgY291bnRTdGVwID0gTWF0aC5yb3VuZCgocmVzdWx0IC0gdGhpcy5taW4pIC8gdGhpcy5zdGVwKTtcbiAgICAgIGNvbnN0IGNvdW50VmFsID0gdGhpcy5taW4gKyAodGhpcy5zdGVwICogY291bnRTdGVwKTtcbiAgICAgIHJlc3VsdCA9IGNvdW50VmFsO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQgPiB0aGlzLm1heCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5tYXg7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCA8IHRoaXMubWluKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLm1pbjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1BlcmNlbnRzKCk6IHZvaWQge1xuICAgIHRoaXMudGh1bWJQZXJjZW50RnJvbSA9IHRoaXMuY2hlY2tQZXJjZW50KCd2YWx1ZUZyb20nKTtcbiAgICB0aGlzLnJlc3VsdE9iamVjdC50aHVtYlBlcmNlbnRGcm9tID0gdGhpcy50aHVtYlBlcmNlbnRGcm9tO1xuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIHRoaXMudGh1bWJQZXJjZW50VG8gPSB0aGlzLmNoZWNrUGVyY2VudCgndmFsdWVUbycpO1xuICAgICAgdGhpcy5yZXN1bHRPYmplY3QudGh1bWJQZXJjZW50VG8gPSB0aGlzLnRodW1iUGVyY2VudFRvO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tQZXJjZW50KHZhbHVlOiBUaHVtYklEID0gJ3ZhbHVlRnJvbScpOiBudW1iZXIge1xuICAgIGNvbnN0IHZhbE9mUmFuZ2UgPSB0aGlzW3ZhbHVlXSAtIHRoaXMubWluO1xuICAgIGNvbnN0IGN1cnJlbnRQZXJjZW50ID0gTnVtYmVyKCh2YWxPZlJhbmdlIC8gKHRoaXMuZmluZFJhbmdlKCkgLyAxMDApKS50b0ZpeGVkKDMpKTtcbiAgICByZXR1cm4gY3VycmVudFBlcmNlbnQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmFsaWRhdG9yO1xuIiwiaW1wb3J0IE1vZGVsIGZyb20gJy4vTW9kZWwnO1xuaW1wb3J0IFZhbGlkYXRvciBmcm9tICcuL1ZhbGlkYXRvcic7XG5pbXBvcnQge1xuICBNb2RlbElucHV0U3RhdGUsXG4gIE1vZGVsSW50ZXJmYWNlLFxuICBNb2RlbFZhbCxcbiAgU2xpZGVySW50ZXJmYWNlLFxuICBTdGVwc01hcCxcbiAgVGh1bWJJRCxcbiAgVmFsaWRhdGVTbGlkZXJEYXRhLFxufSBmcm9tICcuLi9JbnRlcmZhY2VzJztcbmltcG9ydCBPYnNlcnZlciBmcm9tICcuLi8uLi9PYnNlcnZlci9PYnNlcnZlcic7XG5pbXBvcnQgeyBNT0RFTF9FVkVOVFMgfSBmcm9tICcuLi8uLi9PYnNlcnZlci9ldmVudHMnO1xuXG5jbGFzcyBNb2RlbEZhY2FkZSBleHRlbmRzIE9ic2VydmVyIHtcbiAgcHJpdmF0ZSBtb2RlbDogTW9kZWw7XG5cbiAgcHJpdmF0ZSB2YWxpZGF0b3I6IFZhbGlkYXRvcjtcblxuICBwcml2YXRlIHZhbGlkU3RhdGU6IE1vZGVsSW50ZXJmYWNlO1xuXG4gIHByaXZhdGUgcHJldk1vdmUhOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioc3RhdGU6IE1vZGVsSW5wdXRTdGF0ZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy52YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKHN0YXRlKTtcbiAgICB0aGlzLnZhbGlkU3RhdGUgPSB0aGlzLnZhbGlkYXRvci52YWxpZGF0ZURhdGEoc3RhdGUpO1xuICAgIHRoaXMubW9kZWwgPSBuZXcgTW9kZWwodGhpcy52YWxpZFN0YXRlKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRTdGF0ZShzdGF0ZTogTW9kZWxJbnB1dFN0YXRlKTogdm9pZCB7XG4gICAgY29uc3QgdmFsaWRTdGF0ZSA9IHRoaXMudmFsaWRhdG9yLnZhbGlkYXRlRGF0YShzdGF0ZSk7XG4gICAgdGhpcy5tb2RlbC5zZXRTdGF0ZSh2YWxpZFN0YXRlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGF0ZSgpOiBTbGlkZXJJbnRlcmZhY2Uge1xuICAgIGlmICh0aGlzLm1vZGVsLmdldFN0YXRlKCkuc2NhbGVNYXJrcykge1xuICAgICAgY29uc3Qgc2xpZGVyTWFya3MgPSB0aGlzLnZhbGlkR2FwTWFya3MoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnRoaXMubW9kZWwuZ2V0U3RhdGUoKSxcbiAgICAgICAgc2NhbGVNYXA6IHNsaWRlck1hcmtzLFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuZ2V0U3RhdGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRHYXBNYXJrcygpOiBTdGVwc01hcCB7XG4gICAgY29uc3QgZ2FwID0gdGhpcy5tb2RlbC5nZXRTdGF0ZSgpLnNjYWxlUGVyY2VudEdhcCB8fCAyMDtcbiAgICBjb25zdCB7IG1pbiwgbWF4LCBzdGVwIH0gPSB0aGlzLm1vZGVsLmdldFN0YXRlKCk7XG4gICAgY29uc3Qgc2xpZGVyTWFya3MgPSB0aGlzLnZhbGlkYXRvci52YWxpZGF0ZU1hcmtzKHtcbiAgICAgIG1pbiwgbWF4LCBzdGVwLCBnYXAsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2xpZGVyTWFya3M7XG4gIH1cblxuICBwdWJsaWMgZ2V0TW9kZWwoKTogTW9kZWwge1xuICAgIHJldHVybiB0aGlzLm1vZGVsO1xuICB9XG5cbiAgcHVibGljIGdldFZhbGlkYXRvcigpOiBWYWxpZGF0b3Ige1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcjtcbiAgfVxuXG4gIHB1YmxpYyBnZXRWYWx1ZSh2YWx1ZTogTW9kZWxWYWwpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbC5nZXRTdGF0ZSgpW2Ake3ZhbHVlfWBdO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZShkYXRhOiBWYWxpZGF0ZVNsaWRlckRhdGEsIGV2ZW50OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQgPT09IE1PREVMX0VWRU5UUy5WQUxVRV9DSEFOR0VEKSB7XG4gICAgICBjb25zdCBtb3ZlZFRvID0gdGhpcy52YWxpZGF0b3IucGVyZm9ybU1vdmVUb1BlcmNlbnQoZGF0YSk7XG4gICAgICBsZXQgeyB0aHVtYklkIH0gPSBkYXRhO1xuICAgICAgaWYgKHRodW1iSWQgPT09IHVuZGVmaW5lZCkgdGh1bWJJZCA9IHRoaXMudmFsaWRhdG9yLnZhbGlkYXRlVGh1bWJJZChtb3ZlZFRvKTtcbiAgICAgIGlmIChtb3ZlZFRvID09PSB0aGlzLnByZXZNb3ZlKSByZXR1cm47XG5cbiAgICAgIHRoaXMucHJldk1vdmUgPSBtb3ZlZFRvO1xuICAgICAgdGhpcy5tb2RlbC51cGRhdGVTdGF0ZU1vdmUobW92ZWRUbywgdGh1bWJJZCBhcyBUaHVtYklEKTtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gdGhpcy5tb2RlbC5nZXRTdGF0ZSgpO1xuICAgICAgY29uc3QgdmFsaWRTdGF0ZSA9IHRoaXMudmFsaWRhdG9yLnZhbGlkYXRlRGF0YShuZXdTdGF0ZSk7XG4gICAgICB0aGlzLm1vZGVsLnNldFN0YXRlKHZhbGlkU3RhdGUpO1xuXG4gICAgICBpZiAobmV3U3RhdGUuc2NhbGVNYXJrcykge1xuICAgICAgICB0aGlzLmVtaXQoTU9ERUxfRVZFTlRTLlZBTFVFX0NIQU5HRUQsIHsgLi4udmFsaWRTdGF0ZSwgc2NhbGVNYXA6IHRoaXMudmFsaWRHYXBNYXJrcygpIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbWl0KE1PREVMX0VWRU5UUy5WQUxVRV9DSEFOR0VELCB2YWxpZFN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0VmFsdWUocGFyYW06IE1vZGVsVmFsLCB2YWx1ZTogbnVtYmVyIHwgYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IG9sZFN0YXRlID0gdGhpcy5tb2RlbC5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IG5ld1N0YXRlID0geyAuLi5vbGRTdGF0ZSwgW3BhcmFtXTogdmFsdWUgfTtcbiAgICBjb25zdCB2YWxpZFN0YXRlID0gdGhpcy52YWxpZGF0b3IudmFsaWRhdGVEYXRhKG5ld1N0YXRlKTtcbiAgICB0aGlzLm1vZGVsLnNldFN0YXRlKHZhbGlkU3RhdGUpO1xuICAgIHRoaXMuZW1pdChNT0RFTF9FVkVOVFMuVkFMVUVfQ0hBTkdFRCwgdGhpcy5tb2RlbC5nZXRTdGF0ZSgpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNb2RlbEZhY2FkZTtcbiIsImltcG9ydCB7IE1vZGVsSW5wdXRTdGF0ZSwgTW9kZWxWYWwsIFNsaWRlckludGVyZmFjZSB9IGZyb20gJy4uL0ludGVyZmFjZXMnO1xuaW1wb3J0IFZpZXcgZnJvbSAnLi4vVmlldy9WaWV3JztcbmltcG9ydCBPYnNlcnZlciBmcm9tICcuLi8uLi9PYnNlcnZlci9PYnNlcnZlcic7XG5pbXBvcnQgeyBNT0RFTF9FVkVOVFMsIFNMSURFUl9FVkVOVFMgfSBmcm9tICcuLi8uLi9PYnNlcnZlci9ldmVudHMnO1xuaW1wb3J0IE1vZGVsRmFjYWRlIGZyb20gJy4uL01vZGVsL01vZGVsRmFjYWRlJztcblxuY2xhc3MgUHJlc2VudGVyIGV4dGVuZHMgT2JzZXJ2ZXIge1xuICBtb2RlbEZhY2FkZTogTW9kZWxGYWNhZGU7XG5cbiAgdmlldzogVmlldztcblxuICByb290OiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3Rvcihyb290OiBIVE1MRWxlbWVudCwgc3RhdGU6IE1vZGVsSW5wdXRTdGF0ZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcblxuICAgIHRoaXMubW9kZWxGYWNhZGUgPSBuZXcgTW9kZWxGYWNhZGUoc3RhdGUpO1xuICAgIHRoaXMudmlldyA9IG5ldyBWaWV3KHJvb3QsIHRoaXMubW9kZWxGYWNhZGUuZ2V0U3RhdGUoKSk7XG4gICAgdGhpcy5zdWJzY3JpYmVNb2RlbCgpO1xuICAgIHRoaXMuc3Vic2NyaWJlU2xpZGVyKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U3RhdGUoKTogU2xpZGVySW50ZXJmYWNlIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbEZhY2FkZS5nZXRTdGF0ZSgpO1xuICB9XG5cbiAgcHVibGljIHNldE5ld1N0YXRlKHN0YXRlOiBNb2RlbElucHV0U3RhdGUpOiB2b2lkIHtcbiAgICB0aGlzLm1vZGVsRmFjYWRlLnNldFN0YXRlKHN0YXRlKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRWYWx1ZShwYXJhbTogTW9kZWxWYWwsIHZhbHVlOiBudW1iZXIgfCBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5tb2RlbEZhY2FkZS5zZXRWYWx1ZShwYXJhbSwgdmFsdWUpO1xuICB9XG5cbiAgcHVibGljIGdldFZhbHVlKHBhcmFtOiBNb2RlbFZhbCk6IG51bWJlciB8IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLm1vZGVsRmFjYWRlLmdldFZhbHVlKHBhcmFtKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlU2xpZGVyKCk6IHZvaWQge1xuICAgIHRoaXMudmlldy5hZGRTdWJzY3JpYmVyKFNMSURFUl9FVkVOVFMuVkFMVUVfQ0hBTkdFRCwgdGhpcy5tb2RlbEZhY2FkZSk7XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZU1vZGVsKCk6IHZvaWQge1xuICAgIHRoaXMubW9kZWxGYWNhZGUuYWRkU3Vic2NyaWJlcihNT0RFTF9FVkVOVFMuVkFMVUVfQ0hBTkdFRCwgdGhpcy52aWV3KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcmVzZW50ZXI7XG4iLCJjb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIG1pbjogMCxcbiAgbWF4OiAxMDAsXG4gIHZhbHVlRnJvbTogMCxcbiAgdmFsdWVUbzogMCxcbiAgc3RlcDogMSxcbiAgc2NhbGVQZXJjZW50R2FwOiAxMCxcbiAgc2NhbGVNYXJrczogZmFsc2UsXG4gIGlzVGlwOiBmYWxzZSxcbiAgaXNQcm9ncmVzczogZmFsc2UsXG4gIGlzUmFuZ2U6IGZhbHNlLFxuICBpc1ZlcnRpY2FsOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRpYWxTdGF0ZTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgUHJlc2VudGVyIGZyb20gJy4vY29tcG9uZW50cy9QcmVzZW50ZXIvUHJlc2VudGVyJztcbmltcG9ydCBpbml0aWFsU3RhdGUgZnJvbSAnLi9zdGF0ZSc7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIEpRdWVyeSB7XG4gICAgc2xpZGVyUGx1Z2luKG9wdGlvbnM6IG9iamVjdCk6IFByZXNlbnRlclxuICB9XG59XG5cbiQuZm4uc2xpZGVyUGx1Z2luID0gZnVuY3Rpb24gc2xpZGVyUGx1Z2luKG9wdGlvbnM6IG9iamVjdCk6IFByZXNlbnRlciB7XG4gIGNvbnN0IHN0YXRlID0geyAuLi5pbml0aWFsU3RhdGUsIC4uLm9wdGlvbnMgfTtcbiAgY29uc3Qgc2xpZGVyID0gbmV3IFByZXNlbnRlcih0aGlzWzBdLCBzdGF0ZSk7XG4gIHJldHVybiBzbGlkZXI7XG59O1xuIl0sIm5hbWVzIjpbIk9ic2VydmVyIiwib2JzZXJ2ZXJzIiwiZXZlbnQiLCJvYnNlcnZlciIsInRoaXMiLCJrZXlzIiwiZmlsdGVyIiwib2JzIiwiZGF0YSIsImZvckVhY2giLCJ1cGRhdGUiLCJNT0RFTF9FVkVOVFMiLCJTTElERVJfRVZFTlRTIiwiU2xpZGVyQ29tcG9uZW50cyIsInJvb3QiLCJpc1ZlcnRpY2FsIiwiZGlyZWN0aW9uIiwic3RhcnRQb2ludCIsInNpemUiLCJtb2QiLCJjbGFzc05hbWUiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGh1bWJQb3MiLCJpZCIsIm1vdXNlTW92ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImVsZW1TaXplIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibmV3UG9zIiwiZW1pdCIsImNvb3Jkc01vdmUiLCJ0aHVtYklkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1vdXNlVXAiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidG91Y2hNb3ZlIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwidG91Y2hlcyIsInRvdWNoRW5kIiwia2V5RXZlbnQiLCJQcm9ncmVzcyIsInBvc2l0aW9uU3RhcnQiLCJwb3NpdGlvbkVuZCIsInByb2dyZXNzIiwic2V0UHJvZ3Jlc3MiLCJzdHlsZSIsImFwcGVuZCIsIlNjYWxlIiwiaW5pdFNjYWxlIiwic2NhbGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJhZGRTY2FsZSIsImFkZExpc3Rlbm5lcnMiLCJoYW5kbGVDbGljayIsImJpbmQiLCJ0YXJnZXQiLCJjbG9zZXN0Iiwic2NhbGVTaXplIiwic2NhbGVTdGFydCIsIlNjYWxlTWFya3MiLCJtYXJrcyIsImluaXQiLCJjcmVhdGVNYXJrcyIsInZhbHVlIiwicGVyY2VudCIsImNyZWF0ZU1hcmsiLCJtYXJrIiwibWFya1ZhbHVlIiwiaW5uZXJUZXh0IiwiVGh1bWIiLCJ2YWx1ZXMiLCJ0aHVtYlBlcmNlbnQiLCJpbml0VGh1bWIiLCJ0aHVtYkVsZW1lbnQiLCJ0YWJJbmRleCIsInNldFBvc2l0aW9uIiwiYWRkTGlzdGVuZXJzIiwiY2hlY2taSW5kIiwiekluZGV4IiwibW91c2VEb3duIiwia2V5RG93biIsInRvdWNoRG93biIsInBhc3NpdmUiLCJzaXplRWxlbWVudCIsIm1vdmVkIiwia2V5IiwiVGlwIiwicGVyY2VudFBvc2l0aW9uIiwidmFsdWVUaXAiLCJ0aXAiLCJjcmVhdGVUaXAiLCJhZGRUaXAiLCJkaXNwbGF5IiwiU2xpZGVyIiwic3RhdGUiLCJjcmVhdGVWYXJpYWJsZXMiLCJpbml0U2xpZGVyIiwic2V0U3RhdGUiLCJzbGlkZXIiLCJjcmVhdGVTbGlkZXIiLCJjcmVhdGVsZW1lbnRzIiwiYWRkU2xpZGVyIiwic2xpZGVyQ29tcG5lbnRzIiwic2NhbGVFbGVtZW50Iiwic2xpZGVyRGF0YSIsImlzVGlwIiwidmFsdWVGcm9tIiwidmFsdWVUbyIsInRodW1iUGVyY2VudEZyb20iLCJ0aHVtYlBlcmNlbnRUbyIsImlzUHJvZ3Jlc3MiLCJpc1JhbmdlIiwic2NhbGVNYXAiLCJzY2FsZU1hcmtzIiwidGlwVmFsdWVGcm9tIiwidGlwVmFsdWVUbyIsImlzU2NhbGVNYXJrcyIsImdldFNjYWxlIiwidGh1bWJGcm9tIiwidGh1bWJUbyIsInRpcEZyb20iLCJ1bmRlZmluZWQiLCJ0aXBUbyIsIndpZHRoUHJvZ3Jlc3MiLCJzbGlkZXJXcmFwcGVyIiwiaXNOZWVkRG91YmxlVGlwIiwiX2EiLCJzZXRWYWx1ZVRpcCIsIl9iIiwiaGlkZVRpcCIsIl9jIiwic2hvd1RpcCIsIl9kIiwic2V0UHJvZ3Jlc3NQb3NpdGlvbiIsIl9lIiwiX2YiLCJWaWV3IiwiaW5pdFZpZXciLCJhZGRTdWJzY3JpYmVTbGlkZXIiLCJ1cGRhdGVTbGlkZXIiLCJhZGRTdWJzY3JpYmVyIiwiVGh1bWJWYWxQZXJjZW50IiwiTW9kZWwiLCJzdGVwUGVyY2VudCIsIk51bWJlciIsInN0ZXAiLCJmaW5kVmFsUGVyY2VudCIsIm9sZFN0YXRlIiwiT2JqZWN0IiwibW92ZWRUbyIsInRodW1iIiwiZmluZFN1aXRhYmxlUGVyY2VudCIsInBlcmNlbnRNb3ZlIiwibWF4IiwibWluIiwibmVhcmVzdFByZXZDb3VudFN0ZXAiLCJNYXRoIiwiZmxvb3IiLCJuZWFyZXN0TmV4dENvdW50U3RlcCIsImNlaWwiLCJwcmV2U3RlcCIsIm5leHRTdGVwIiwicHJldlBlcmNlbnQiLCJuZXh0UGVyY2VudCIsImhhbGZTdGVwIiwidG9GaXhlZCIsImFsbFN0ZXBzIiwiYmVmb3JlRW5kUGVyY2VudCIsImhhbmRsZU1vdmUiLCJoYW5kbGVNb3ZlRnJvbSIsImhhbmRsZU1vdmVUbyIsImlzVmFsVGhlU2FtZVBvcyIsInZhbHVlQW5vdGhlclRodW1iIiwiaWRWYWwiLCJ1cGRhdGVNb3ZlZCIsImNvbXBhcmVWYWwiLCJ2YWwiLCJpc05hTiIsIkVycm9yIiwidGh1bWJQZWNlbnQiLCJmaW5kUmFuZ2UiLCJWYWxpZGF0b3IiLCJERUZBVUxUX0dBUCIsInZhbGlkYXRlRGF0YSIsInByZXZCb29sIiwic2V0Qm9vbGVhbnMiLCJzZXREYXRhIiwicmVzdWx0T2JqZWN0IiwiY2hlY2tSYW5nZSIsImNoZWNrU3RlcCIsImNoZWNrVmFsdWVzIiwiY2hlY2tQZXJjZW50cyIsIm9wdGlvbnMiLCJnYXAiLCJwZXJjZW50RWRnZSIsInZhbGlkYXRlR2FwIiwibWFwU3RlcHMiLCJNYXAiLCJyYW5nZSIsImNvdW50U3RlcCIsImkiLCJwZXJjZW50U3RlcCIsImlzR2V0R2FwIiwic2V0IiwiZGlmZkZyb20iLCJkaWZmVG8iLCJzY2FsZVBlcmNlbnRHYXAiLCJyb3VuZCIsImJhc2lzUGVyY2VudCIsInJlc3VsdCIsImFsbFJhbmdlIiwiY2hlY2tWYWx1ZSIsImNoZWNrUGVyY2VudCIsInZhbE9mUmFuZ2UiLCJjdXJyZW50UGVyY2VudCIsIk1vZGVsRmFjYWRlIiwidmFsaWRhdG9yIiwidmFsaWRTdGF0ZSIsIm1vZGVsIiwiZ2V0U3RhdGUiLCJzbGlkZXJNYXJrcyIsInZhbGlkR2FwTWFya3MiLCJ2YWxpZGF0ZU1hcmtzIiwicGVyZm9ybU1vdmVUb1BlcmNlbnQiLCJ2YWxpZGF0ZVRodW1iSWQiLCJwcmV2TW92ZSIsInVwZGF0ZVN0YXRlTW92ZSIsIm5ld1N0YXRlIiwicGFyYW0iLCJQcmVzZW50ZXIiLCJtb2RlbEZhY2FkZSIsInZpZXciLCJzdWJzY3JpYmVNb2RlbCIsInN1YnNjcmliZVNsaWRlciIsInNldFZhbHVlIiwiZ2V0VmFsdWUiLCIkIiwiaW5pdGlhbFN0YXRlIl0sInNvdXJjZVJvb3QiOiIifQ==