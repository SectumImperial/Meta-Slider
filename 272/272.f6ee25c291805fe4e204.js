"use strict";(self.webpackChunkmeta_slider=self.webpackChunkmeta_slider||[]).push([[272],{272:function(t,e,r){var n=r(755),i=r.n(n);function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.observers={}}var e,r,n;return e=t,(r=[{key:"addSubscriber",value:function(t,e){if(this.observers[t]){var r=this.observers[t];this.observers[t]=[].concat(o(r),[e])}else this.observers[t]=[e]}},{key:"removeSubscriber",value:function(t,e){this.observers[t].filter((function(t){return t!==e}))}},{key:"emit",value:function(t,e){(this.observers[t]||[]).forEach((function(r){r.update(e,t)}))}}])&&u(e.prototype,r),n&&u(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),a="VALUE_CHANGED",l="VALUE_START_CHANGE",f="DATA_COLLECTED",h="VALUE_CHANGED",p=" SCALE_CLICKED",b="KEY_DOWN";function y(t){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},y(t)}function m(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function d(t,e){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},d(t,e)}function v(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=g(t);if(e){var i=g(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return P(this,r)}}function P(t,e){if(e&&("object"===y(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function g(t){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},g(t)}var w=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&d(t,e)}(o,t);var e,r,n,i=v(o);function o(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(r=i.call(this)).isVertical=e,r.direction=r.isVertical?"clientY":"clientX",r.startPoint=r.isVertical?"top":"left",r.size=r.isVertical?"height":"width",r.mod=r.isVertical?"vertical":"horizontal",r.root=t,r}return e=o,(r=[{key:"createElement",value:function(t){var e=document.createElement("div");return e.className=t,e}},{key:"performMouseMove",value:function(t,e){var r=this,n=function(n){n.preventDefault();var i=r.root.getBoundingClientRect()[r.startPoint],o=n[r.direction]-t-i;r.emit(l,{coordsMove:o,thumbId:e})};document.addEventListener("mousemove",n),document.addEventListener("mouseup",(function t(){document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",t)}))}},{key:"performToucMove",value:function(t,e){var r=this,n=function(n){n.stopImmediatePropagation();var i=r.root.getBoundingClientRect()[r.startPoint],o=n.touches[0][r.direction]-t-i;r.emit(l,{coordsMove:o,thumbId:e})};document.addEventListener("touchmove",n),document.addEventListener("touchend",(function t(){document.removeEventListener("touchmove",n),document.removeEventListener("touchend",t)}))}},{key:"performKeyDown",value:function(t,e){this.emit(b,{keyEvent:t,thumbId:e})}}])&&m(e.prototype,r),n&&m(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(c);function O(t){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},O(t)}function T(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function k(t,e){return k=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},k(t,e)}function j(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=_(t);if(e){var i=_(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return S(this,r)}}function S(t,e){if(e&&("object"===O(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var E=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&k(t,e)}(o,t);var e,r,n,i=j(o);function o(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var r=t.root,n=t.positionStart,s=t.positionEnd,u=t.isVertical;return(e=i.call(this,r,u)).positionStart=n,e.positionEnd=s,e.progress=e.createElement("plugin-slider__progress"),e.setProgress(),e}return e=o,r=[{key:"setProgress",value:function(){this.progress.style[this.startPoint]="".concat(this.positionStart,"%"),this.progress.style[this.size]="".concat(this.positionEnd,"%"),this.root.append(this.progress)}},{key:"setProgressPosition",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100;this.progress.style[this.startPoint]="".concat(t,"%"),this.progress.style[this.size]="".concat(e,"%")}}],r&&T(e.prototype,r),n&&T(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(w),R=E;function F(t){return F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},F(t)}function V(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function M(t,e){return M=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},M(t,e)}function x(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=C(t);if(e){var i=C(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return D(this,r)}}function D(t,e){if(e&&("object"===F(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function C(t){return C=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},C(t)}var A=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&M(t,e)}(o,t);var e,r,n,i=x(o);function o(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(r=i.call(this,t,e)).initScale(),r}return e=o,(r=[{key:"initScale",value:function(){this.scale=this.createElement("plugin-slider__scale"),this.isVertical&&this.scale.classList.add("plugin-slider__scale_vertical"),this.isVertical||this.scale.classList.add("plugin-slider__scale_horizontal"),this.addScale(),this.addListenners()}},{key:"getScale",value:function(){return this.scale||(this.scale=this.createElement("plugin-slider__scale")),this.scale}},{key:"addScale",value:function(){this.root.append(this.scale)}},{key:"addListenners",value:function(){this.scale.addEventListener("click",this.handleClick.bind(this))}},{key:"handleClick",value:function(t){if(t.target.closest(".plugin-slider__scale")){var e=this.scale.getBoundingClientRect()[this.size],r=this.scale.getBoundingClientRect()[this.startPoint],n=t[this.direction]-r;if(!(n>e||n<0)){var i={coordsMove:n,scaleSize:e};this.emit(p,i)}}}}])&&V(e.prototype,r),n&&V(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(w);function I(t){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},I(t)}function L(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function N(t,e){return N=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},N(t,e)}function B(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=z(t);if(e){var i=z(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return G(this,r)}}function G(t,e){if(e&&("object"===I(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function z(t){return z=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},z(t)}var U=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&N(t,e)}(o,t);var e,r,n,i=B(o);function o(t,e,r){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(n=i.call(this,t,r)).marks=e,n.init(),n}return e=o,(r=[{key:"init",value:function(){this.createMarks()}},{key:"createMarks",value:function(){var t=this;this.marks.forEach((function(e,r){return t.createMark(e,r)}))}},{key:"createMark",value:function(t,e){var r=this.createElement("plugin-slider__mark");r.classList.add("plugin-slider__mark_".concat(this.mod)),r.style[this.startPoint]="".concat(t,"%");var n=document.createElement("span");n.className="plugin-slider__mark-value",n.classList.add("plugin-slider__mark-value_".concat(this.mod)),n.innerText="".concat(e),r.append(n),this.root.append(r)}}])&&L(e.prototype,r),n&&L(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(w);function K(t){return K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},K(t)}function H(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Z(){return Z="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Y(t,e);if(n){var i=Object.getOwnPropertyDescriptor(n,e);return i.get?i.get.call(arguments.length<3?t:r):i.value}},Z.apply(this,arguments)}function Y(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=q(t)););return t}function W(t,e){return W=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},W(t,e)}function X(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=q(t);if(e){var i=q(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return $(this,r)}}function $(t,e){if(e&&("object"===K(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function q(t){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},q(t)}var J=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&W(t,e)}(o,t);var e,r,n,i=X(o);function o(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var r=t.root,n=t.thumbPercent,s=void 0===n?0:n,u=t.id,c=void 0===u?"valueFrom":u,a=t.isVertical;return(e=i.call(this,r,a)).thumbPercent=s,e.thumbId=c,e.initThumb(),e}return e=o,(r=[{key:"initThumb",value:function(){this.thumbElement=this.createElement("plugin-slider__thumb"),this.thumbElement.id=this.thumbId,this.thumbElement.tabIndex=1,this.root.append(this.thumbElement),this.setPosition(this.thumbPercent),this.addListeners()}},{key:"setPosition",value:function(t){this.thumbPercent=t,this.checkZInd(),this.thumbElement.style[this.startPoint]="".concat(this.thumbPercent,"%")}},{key:"getThumb",value:function(){return this.thumbElement}},{key:"getThumbId",value:function(){return this.thumbId}},{key:"checkZInd",value:function(){"valueFrom"===this.thumbId&&100===this.thumbPercent&&(this.thumbElement.style.zIndex="10"),"valueFrom"===this.thumbId&&this.thumbPercent<100&&(this.thumbElement.style.zIndex="6"),"valueTo"===this.thumbId&&0===this.thumbPercent&&(this.thumbElement.style.zIndex="10"),"valueTo"===this.thumbId&&this.thumbPercent>0&&(this.thumbElement.style.zIndex="5")}},{key:"addListeners",value:function(){this.thumbElement.addEventListener("mousedown",this.mouseDown.bind(this)),this.thumbElement.addEventListener("keydown",this.keyDown.bind(this)),this.thumbElement.addEventListener("touchstart",this.touchDown.bind(this),{passive:!0})}},{key:"touchDown",value:function(t){t.preventDefault();var e=this.thumbElement.getBoundingClientRect()[this.startPoint];this.moved=t.touches[0][this.direction]-e,Z(q(o.prototype),"performToucMove",this).call(this,this.moved,this.thumbId)}},{key:"mouseDown",value:function(t){t.preventDefault(),this.moved=t[this.direction]-this.thumbElement.getBoundingClientRect()[this.startPoint],this.checkZInd(),Z(q(o.prototype),"performMouseMove",this).call(this,this.moved,this.thumbId)}},{key:"keyDown",value:function(t){t.preventDefault();var e=t.key;"ArrowLeft"!==e&&"ArrowUp"!==e&&"ArrowRight"!==e&&"ArrowDown"!==e||t.preventDefault(),("ArrowLeft"===e&&!this.isVertical||"ArrowUp"===e&&this.isVertical)&&Z(q(o.prototype),"performKeyDown",this).call(this,"decrement",this.thumbId),("ArrowRight"===e&&!this.isVertical||"ArrowDown"===e&&this.isVertical)&&Z(q(o.prototype),"performKeyDown",this).call(this,"increment",this.thumbId)}}])&&H(e.prototype,r),n&&H(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(w);function Q(t){return Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Q(t)}function tt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function et(){return et="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=rt(t,e);if(n){var i=Object.getOwnPropertyDescriptor(n,e);return i.get?i.get.call(arguments.length<3?t:r):i.value}},et.apply(this,arguments)}function rt(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=st(t)););return t}function nt(t,e){return nt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},nt(t,e)}function it(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st(t);if(e){var i=st(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ot(this,r)}}function ot(t,e){if(e&&("object"===Q(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function st(t){return st=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},st(t)}var ut=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&nt(t,e)}(o,t);var e,r,n,i=it(o);function o(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var r=t.root,n=t.percentPosition,s=t.valueTip,u=t.isVertical;return(e=i.call(this,r,u)).percentPosition=n,e.valueTip=s,e.tip=e.createTip(),e.addTip(),e}return e=o,(r=[{key:"setValueTip",value:function(t){this.tip.innerText="".concat(t)}},{key:"hideTip",value:function(){this.tip.style.display="none"}},{key:"showTip",value:function(){this.tip.style.display=""}},{key:"createTip",value:function(){var t=this.createElement("plugin-slider__tip");return t.classList.add("plugin-slider__tip_".concat(this.mod)),t.innerText="".concat(this.valueTip),t.style[et(st(o.prototype),"startPoint",this)]="".concat(this.percentPosition,"%"),t}},{key:"addTip",value:function(){this.root.append(this.tip)}},{key:"setPosition",value:function(t,e){this.tip.style[this.startPoint]="".concat(t,"%"),this.tip.innerText="".concat(e)}}])&&tt(e.prototype,r),n&&tt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(w);function ct(t){return ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ct(t)}function at(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function lt(t,e){return lt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},lt(t,e)}function ft(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=pt(t);if(e){var i=pt(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ht(this,r)}}function ht(t,e){if(e&&("object"===ct(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function pt(t){return pt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},pt(t)}var bt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&lt(t,e)}(o,t);var e,r,n,i=ft(o);function o(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(r=i.call(this)).state=e,r.createVariables(t,e),r.initSlider(),r.setState(e),r}return e=o,(r=[{key:"initSlider",value:function(){this.slider=this.createSlider(),this.createlements(),this.addSlider()}},{key:"update",value:function(t,e){if(e===l){var r=this.sliderCompnents.size,n=this.scaleElement.getBoundingClientRect()[r],i=Object.assign(Object.assign({},t),{scaleSize:n});this.emit(f,i)}e!==p&&e!==b||this.emit(f,t)}},{key:"createVariables",value:function(t,e){var r=e.isTip,n=e.valueFrom,i=e.valueTo,o=e.thumbPercentFrom,s=e.thumbPercentTo,u=e.isProgress,c=e.isRange,a=e.scaleMap,l=e.isVertical,f=e.scaleMarks;this.thumbPercentFrom=o,s&&(this.thumbPercentTo=s),this.isTip=r||!1,this.tipValueFrom=n||0,this.tipValueTo=i||0,this.isProgress=u||!1,this.isRange=c||!1,this.isVertical=l||!1,this.scaleMap=a,this.isScaleMarks=f,this.root=t}},{key:"createlements",value:function(){if(this.sliderCompnents=new w(this.slider,this.isVertical),this.scale=new A(this.slider,this.isVertical),this.scaleElement=this.scale.getScale(),this.thumbFrom=new J({root:this.scaleElement,thumbPercent:this.thumbPercentFrom,id:"valueFrom",isVertical:this.isVertical}),this.isRange&&this.thumbPercentTo&&(this.thumbTo=new J({root:this.scaleElement,thumbPercent:this.thumbPercentTo,id:"valueTo",isVertical:this.isVertical})),this.isTip&&(this.tipFrom=new ut({root:this.scaleElement,percentPosition:this.thumbPercentFrom,valueTip:this.tipValueFrom,isVertical:this.isVertical})),this.isTip&&this.thumbPercentTo&&this.isRange&&void 0!==this.tipValueTo&&(this.tipTo=new ut({root:this.scaleElement,percentPosition:this.thumbPercentTo,valueTip:this.tipValueTo,isVertical:this.isVertical})),this.isProgress&&!this.isRange&&(this.progress=new R({root:this.scaleElement,positionStart:this.thumbPercentFrom,positionEnd:0,isVertical:this.isVertical})),this.isProgress&&this.isRange){var t=this.thumbPercentTo?this.thumbPercentTo-this.thumbPercentFrom:0;this.progress=new R({root:this.scaleElement,positionStart:this.thumbPercentFrom,positionEnd:t,isVertical:this.isVertical})}this.scaleMap&&this.isScaleMarks&&(this.scaleMarks=new U(this.scaleElement,this.scaleMap,this.isVertical))}},{key:"addSlider",value:function(){this.root.append(this.slider)}},{key:"createSlider",value:function(){var t=document.createElement("div");return t.className="plugin-slider",t}},{key:"setState",value:function(t){var e,r,n,i,o,s,u=t.thumbPercentFrom,c=t.valueFrom,a=t.isRange,l=t.thumbPercentTo,f=t.valueTo;this.thumbPercentFrom=u,this.thumbFrom.setPosition(this.thumbPercentFrom),a&&void 0!==l&&this.thumbTo&&(this.thumbPercentTo=l,this.thumbTo.setPosition(this.thumbPercentTo)),this.isTip&&this.tipFrom&&(this.tipValueFrom=c,this.tipFrom.setPosition(this.thumbPercentFrom,this.tipValueFrom)),this.isNeedDoubleTip()?(null===(e=this.tipFrom)||void 0===e||e.setValueTip("".concat(c," - ").concat(f)),null===(r=this.tipTo)||void 0===r||r.hideTip()):null===(n=this.tipTo)||void 0===n||n.showTip(),a&&this.tipTo&&void 0!==f&&this.thumbPercentTo&&(this.tipValueTo=f,this.tipTo.setPosition(this.thumbPercentTo,this.tipValueTo)),this.isProgress&&!a&&(null===(i=this.progress)||void 0===i||i.setProgressPosition(0,this.thumbPercentFrom)),this.isProgress&&a&&l&&(null===(o=this.progress)||void 0===o||o.setProgressPosition(this.thumbPercentFrom,l-u)),this.isProgress&&l===u&&(null===(s=this.progress)||void 0===s||s.setProgressPosition(0,0))}},{key:"isNeedDoubleTip",value:function(){return this.isTip&&this.isRange&&void 0!==this.thumbPercentTo&&(this.thumbPercentTo-this.thumbPercentFrom<=2||0===this.thumbPercentTo&&0===this.thumbPercentFrom)}}])&&at(e.prototype,r),n&&at(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(c);function yt(t){return yt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},yt(t)}function mt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function dt(t,e){return dt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},dt(t,e)}function vt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=gt(t);if(e){var i=gt(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return Pt(this,r)}}function Pt(t,e){if(e&&("object"===yt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function gt(t){return gt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},gt(t)}var wt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&dt(t,e)}(o,t);var e,r,n,i=vt(o);function o(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(r=i.call(this)).state=e,r.initView(t,e),r}return e=o,(r=[{key:"initView",value:function(t,e){var r=e.isRange;this.root=t,this.isRange=r,this.slider=new bt(t,e),this.addSubscribeSlider()}},{key:"updateSlider",value:function(t){this.slider.setState(t)}},{key:"update",value:function(t,e){e===f&&this.emit(h,t),e===h&&this.updateSlider(t)}},{key:"addSubscribeSlider",value:function(){this.slider.thumbFrom.addSubscriber(l,this.slider),this.slider.thumbFrom.addSubscriber(b,this.slider),this.isRange&&this.slider.thumbTo&&(this.slider.thumbTo.addSubscriber(l,this.slider),this.slider.thumbTo.addSubscriber(b,this.slider)),this.slider.scale.addSubscriber(p,this.slider),this.slider.addSubscriber(p,this),this.slider.addSubscriber(f,this)}}])&&mt(e.prototype,r),n&&mt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(c),Ot={valueFrom:"thumbPercentFrom",valueTo:"thumbPercentTo"};function Tt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function kt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var jt=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.state=e,this.init()}var e,r,n;return e=t,(r=[{key:"init",value:function(){this.stepPercent=Number(this.state.step/this.findValPercent())}},{key:"setState",value:function(t){var e=this.state;this.state=Object.assign(Object.assign({},e),t)}},{key:"getState",value:function(){return this.state}},{key:"updateStateMove",value:function(t,e){this.findSuitablePercent(t,e)}},{key:"getValue",value:function(t){return this.state["".concat(t)]}},{key:"getPercentVal",value:function(){var t=this.state,e=t.valueFrom,r=t.min,n=t.max;return Number((e/(n-r)*100).toFixed(3))}},{key:"findSuitablePercent",value:function(t,e){var r,n,i=this.state,o=i.step,s=i.max,u=i.min,c=Math.floor(t/this.stepPercent),a=Math.ceil(t/this.stepPercent),l=u+o*c,f=u+o*a,h=this.stepPercent*c,p=this.stepPercent*a,b=Number((this.stepPercent/2).toFixed(3));Number((t%this.stepPercent).toFixed(3))<b?(r=l,n=h):(r=f,n=p);var y=Math.ceil((s-u)/o),m=this.stepPercent*(y-1);(100===t||100-(100-m)/2<t)&&(r=s,n=100),void 0===n&&(n=this.stepPercent*c),this.handleMove({value:r,thumb:e,percent:n})}},{key:"handleMove",value:function(t){var e=t.value,r=t.thumb,n=t.percent;"valueFrom"===r&&this.handleMoveFrom({value:e,thumb:r,percent:n}),"valueTo"===r&&this.handleMoveTo({value:e,thumb:r,percent:n})}},{key:"handleMoveFrom",value:function(t){var e=t.value,r=t.thumb,n=t.percent,i=this.state,o=i.valueTo,s=i.thumbPercentTo;this.isValTheSamePos({value:e,valueAnotherThumb:o,thumbPercent:s,thumb:r,idVal:"valueFrom"})&&void 0!==o&&void 0!==s?this.updateMoved(o,s,r):void 0!==e&&this.updateMoved(e,n,r)}},{key:"handleMoveTo",value:function(t){var e=t.value,r=t.thumb,n=t.percent,i=this.state,o=i.valueFrom,s=i.thumbPercentFrom;this.isValTheSamePos({value:e,valueAnotherThumb:o,thumbPercent:s,thumb:r,idVal:"valueTo"})&&void 0!==o?this.updateMoved(o,s,r):void 0!==e&&this.updateMoved(e,n,r)}},{key:"isValTheSamePos",value:function(t){var e=t.value,r=t.valueAnotherThumb,n=t.thumbPercent,i=t.thumb,o=t.idVal,s=!1;return void 0!==e&&void 0!==r&&(s="valueFrom"===o?e>r:e<r),this.state.isRange&&void 0!==n&&i===o&&s}},{key:"findValPercent",value:function(){return this.findRange()/100}},{key:"findRange",value:function(){return this.state.max-this.state.min}},{key:"updateMoved",value:function(t,e,r){var n;if(Number.isNaN(t)||void 0===e)throw new Error("Something wrong with setting new values");var i=Ot[r];this.setState((Tt(n={},r,t),Tt(n,i,e),n))}}])&&kt(e.prototype,r),n&&kt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function St(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var _t=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.data=e,this.DEFAULT_GAP=20,this.validateData(e)}var e,r,n;return e=t,r=[{key:"validateData",value:function(t){var e=this.setBooleans(t);return this.setData(t),this.resultObject=Object.assign(Object.assign(Object.assign({},t),e),{thumbPercentFrom:0,thumbPercentTo:void 0}),this.checkRange(),this.checkStep(),this.checkValues(),this.checkPercents(),this.resultObject}},{key:"performMoveToPercent",value:function(t){var e=t.coordsMove,r=t.scaleSize,n=t.keyEvent,i=t.thumbId;if(n){if("increment"===n&&"valueFrom"===i)return this.thumbPercentFrom+this.stepPercent;if("decrement"===n&&"valueFrom"===i)return this.thumbPercentFrom-this.stepPercent;if("increment"===n&&"valueTo"===i&&void 0!==this.thumbPercentTo)return this.thumbPercentTo+this.stepPercent;if("decrement"===n&&"valueTo"===i&&void 0!==this.thumbPercentTo)return this.thumbPercentTo-this.stepPercent}if(void 0===e||void 0===r)return 0;var o=Number((e/(r/100)).toFixed(2));return o<0&&(o=0),o>100&&(o=100),o}},{key:"validateMarks",value:function(t){for(var e=t.step,r=t.max,n=t.min,i=t.gap,o=new Map,s=this.validateGap(i),u=this.findRange()/100,c=e/u,a=e*Math.ceil(s/c),l=Math.ceil(a/u),f=0;f<=100;f+=l)if(f<=100-l){var h=e*Math.round(f/c),p=h/u,b=n+h;o.set(b,p)}return o.set(r,100),o}},{key:"validateThumbId",value:function(t){if(!this.isRange)return"valueFrom";if(t<this.thumbPercentFrom)return"valueFrom";if(void 0!==this.thumbPercentTo&&t>this.thumbPercentTo)return"valueTo";if(t>this.thumbPercentFrom&&void 0!==this.thumbPercentTo&&t<this.thumbPercentTo){var e=t-this.thumbPercentFrom,r=this.thumbPercentTo-t;if(e===r||e<r)return"valueFrom";if(e>r)return"valueTo"}return"valueTo"}},{key:"setData",value:function(t){var e=t.min,r=t.max,n=t.valueFrom,i=t.step,o=t.scalePercentGap,s=t.valueTo;this.min=e,this.max=r,this.valueFrom=n,this.step=i,this.scalePercentGap=o,void 0!==this.scalePercentGap&&"number"!=typeof this.scalePercentGap&&(this.scalePercentGap=void 0),this.isRange&&void 0!==s&&(this.valueTo=s),this.stepPercent=this.step/(this.findRange()/100)}},{key:"setBooleans",value:function(t){var e=t.isRange,r=t.isTip,n=t.isVertical,i=t.isProgress,o=t.scaleMarks;return this.isRange="boolean"==typeof e&&e,this.isTip="boolean"==typeof r&&r,this.isVertical="boolean"==typeof n&&n,this.isProgress="boolean"==typeof i&&i,this.scaleMarks="boolean"==typeof o&&o,{isRange:this.isRange,isTip:this.isTip,isVertical:this.isVertical,isProgress:this.isProgress,scaleMarks:this.scaleMarks}}},{key:"validateGap",value:function(t){var e=t;return(e<0||e>100)&&(e=this.DEFAULT_GAP),e}},{key:"checkRange",value:function(){if(Number.isNaN(this.min)&&(this.min=0),Number.isNaN(this.max)&&(this.max=10),this.min===this.max&&(this.max=this.min+this.step),this.min>this.max){var t=[this.max,this.min];this.min=t[0],this.max=t[1]}this.resultObject.min=this.min,this.resultObject.max=this.max}},{key:"checkStep",value:function(){Number.isNaN(this.step)&&(this.step=1);var t=this.findRange();this.step>t&&(this.step=t),this.step||(this.step=1),this.resultObject.step=this.step}},{key:"findRange",value:function(){return this.max-this.min}},{key:"checkValues",value:function(){if(this.valueFrom=this.checkValue(this.valueFrom),this.isRange&&(this.valueTo=this.checkValue(this.valueTo)),void 0!==this.valueTo&&this.valueFrom>this.valueTo&&this.isRange){var t=[this.valueTo,this.valueFrom];this.valueFrom=t[0],this.valueTo=t[1]}this.resultObject.valueFrom=this.valueFrom,this.isRange&&(this.resultObject.valueTo=this.valueTo)}},{key:"checkValue",value:function(t){var e=t;if(Number.isNaN(e)&&(e=0),e===this.max)return e=this.max;if(e%this.step!=0&&e!==this.min){var r=Math.round((e-this.min)/this.step);e=this.min+this.step*r}return e>this.max&&(e=this.max),e<this.min&&(e=this.min),e}},{key:"checkPercents",value:function(){this.thumbPercentFrom=this.checkPercent("valueFrom"),this.resultObject.thumbPercentFrom=this.thumbPercentFrom,this.isRange&&(this.thumbPercentTo=this.checkPercent("valueTo"),this.resultObject.thumbPercentTo=this.thumbPercentTo)}},{key:"checkPercent",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"valueFrom",e=this[t]-this.min,r=Number((e/(this.findRange()/100)).toFixed(3));return r}}],r&&St(e.prototype,r),n&&St(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),Et=_t;function Rt(t){return Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Rt(t)}function Ft(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Vt(t,e){return Vt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Vt(t,e)}function Mt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Dt(t);if(e){var i=Dt(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return xt(this,r)}}function xt(t,e){if(e&&("object"===Rt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Dt(t){return Dt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Dt(t)}var Ct=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Vt(t,e)}(o,t);var e,r,n,i=Mt(o);function o(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(e=i.call(this)).validator=new Et(t),e.validState=e.validator.validateData(t),e.model=new jt(e.validState),e}return e=o,(r=[{key:"setState",value:function(t){var e=this.validator.validateData(t);this.model.setState(e)}},{key:"getState",value:function(){if(this.model.getState().scaleMarks){var t=this.validGapMarks();return Object.assign(Object.assign({},this.model.getState()),{scaleMap:t})}return this.model.getState()}},{key:"validGapMarks",value:function(){var t=this.model.getState().scalePercentGap||20,e=this.model.getState(),r=e.min,n=e.max,i=e.step;return this.validator.validateMarks({min:r,max:n,step:i,gap:t})}},{key:"getModel",value:function(){return this.model}},{key:"getValidator",value:function(){return this.validator}},{key:"getValue",value:function(t){return this.model.getState()["".concat(t)]}},{key:"update",value:function(t,e){if(e===a){var r=this.validator.performMoveToPercent(t),n=t.thumbId;if(void 0===n&&(n=this.validator.validateThumbId(r)),r===this.prevMove)return;this.prevMove=r,this.model.updateStateMove(r,n);var i=this.model.getState(),o=this.validator.validateData(i);this.model.setState(o),i.scaleMarks?this.emit(a,Object.assign(Object.assign({},o),{scaleMap:this.validGapMarks()})):this.emit(a,o)}}},{key:"setValue",value:function(t,e){var r=this.model.getState(),n=Object.assign(Object.assign({},r),function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}({},t,e)),i=this.validator.validateData(n);this.model.setState(i),this.emit(a,this.model.getState())}}])&&Ft(e.prototype,r),n&&Ft(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(c);function At(t){return At="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},At(t)}function It(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Lt(t,e){return Lt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Lt(t,e)}function Nt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Gt(t);if(e){var i=Gt(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return Bt(this,r)}}function Bt(t,e){if(e&&("object"===At(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Gt(t){return Gt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Gt(t)}var zt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Lt(t,e)}(o,t);var e,r,n,i=Nt(o);function o(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(r=i.call(this)).modelFacade=new Ct(e),r.view=new wt(t,r.modelFacade.getState()),r.subscribeModel(),r.subscribeSlider(),r}return e=o,(r=[{key:"getState",value:function(){return this.modelFacade.getState()}},{key:"setNewState",value:function(t){this.modelFacade.setState(t)}},{key:"setValue",value:function(t,e){this.modelFacade.setValue(t,e)}},{key:"getValue",value:function(t){return this.modelFacade.getValue(t)}},{key:"subscribeSlider",value:function(){this.view.addSubscriber(h,this.modelFacade)}},{key:"subscribeModel",value:function(){this.modelFacade.addSubscriber(a,this.view)}}])&&It(e.prototype,r),n&&It(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(c),Ut={min:0,max:100,valueFrom:0,valueTo:0,step:1,scalePercentGap:10,scaleMarks:!1,isTip:!1,isProgress:!1,isRange:!1,isVertical:!1};i().fn.sliderPlugin=function(t){var e=Object.assign(Object.assign({},Ut),t);return new zt(this[0],e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,