"use strict";(self.webpackChunkmeta_slider=self.webpackChunkmeta_slider||[]).push([[419],{419:function(e,t,s){var i=s(755),a=s.n(i);const r="VALUE_CHANGED",o="VALUE_START_CHANGE",n="DATA_COLLECTED",l="VALUE_CHANGED",h=" SCALE_CLICKED",m="KEY_DOWN",u="MARK_CLICKED";var c=class{constructor(){this.observers=Object.create(null)}addSubscriber(e,t){if(this.observers[e]){const s=this.observers[e];this.observers[e]=[...s,t]}else this.observers[e]=[t]}removeSubscriber(e,t){this.observers[e]=(this.observers[e]||[]).filter((e=>e!==t))}emit(e,t){(this.observers[e]||[]).forEach((s=>{s.update(t,e)}))}};var b=class extends c{constructor(e,t){super(),this.isVertical=t,this.direction=this.isVertical?"clientY":"clientX",this.startPoint=this.isVertical?"top":"left",this.size=this.isVertical?"height":"width",this.mod=this.isVertical?"vertical":"horizontal",this.root=e}static createElement(e){const t=document.createElement("div");return t.className=e,t}performPointerMove(e,t){const s=s=>{s.preventDefault();const i=this.root.getBoundingClientRect()[this.startPoint],a=s[this.direction]-e-i;this.emit(o,{coordsMove:a,ThumbAttr:t})},i=()=>{document.removeEventListener("pointermove",s),document.removeEventListener("pointerup",i)};document.addEventListener("pointermove",s),document.addEventListener("pointerup",i)}performTouchMove(e,t){const s=s=>{s.stopImmediatePropagation();const i=this.root.getBoundingClientRect()[this.startPoint],a=s.touches[0][this.direction]-e-i;this.emit(o,{coordsMove:a,ThumbAttr:t})},i=()=>{document.removeEventListener("touchmove",s),document.removeEventListener("touchend",i)};document.addEventListener("touchmove",s),document.addEventListener("touchend",i)}performKeyDown(e,t){this.emit(m,{keyEvent:e,ThumbAttr:t})}performClickMark(e,t){this.emit(u,{percent:e,value:t})}};var d=class extends b{constructor(e){const{root:t,positionStart:s,positionEnd:i,isVertical:a}=e;super(t,a),this.positionStart=s,this.positionEnd=i,this.progress=b.createElement("plugin-slider__progress js-plugin-slider__progress"),this.setProgress()}setProgress(){this.progress.style[this.startPoint]=`${this.positionStart}%`,this.progress.style[this.size]=`${this.positionEnd}%`,this.root.append(this.progress)}setProgressPosition(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100;this.progress.style[this.startPoint]=`${e}%`,this.progress.style[this.size]=`${t}%`}};var v=class extends b{constructor(e,t){super(e,t),this.scale=b.createElement("plugin-slider__scale js-plugin-slider__scale"),this.handleScalePointerDown=this.handleScalePointerDown.bind(this),this.init()}getScale(){return this.scale||(this.scale=b.createElement("plugin-slider__scale")),this.scale}init(){const e=this.isVertical?"plugin-slider__scale_orientation_vertical":"plugin-slider__scale_orientation_horizontal";this.scale.classList.add(e),this.addScale(),this.addListeners()}addScale(){this.root.append(this.scale)}addListeners(){this.scale.addEventListener("pointerdown",this.handleScalePointerDown)}handleScalePointerDown(e){const t=e.target;if(!t.closest(".plugin-slider__scale")||t.classList.contains("plugin-slider__mark-value"))return;const s=this.scale.getBoundingClientRect(),i=s[this.size],a=s[this.startPoint],r=e[this.direction]-a;r>i||r<0||this.emitData(r,i)}emitData(e,t){const s={coordsMove:e,scaleSize:t};this.emit(h,s)}};const p="plugin-slider__mark_hidden";var P=class extends b{constructor(e,t,s){super(e,s),this.marks=t,this.init()}init(){this.createMarks(),this.addListeners(),this.adjustMarkVisibility()}addListeners(){this.root.addEventListener("click",this.handleRootClick.bind(this))}handleRootClick(e){const t=e.target,{value:s,percent:i}=t.dataset;t.classList.contains("plugin-slider__mark-value")&&void 0!==i&&this.performClickMark(Number(i),Number(s))}createMarks(){this.marks.forEach(((e,t)=>{this.createMark(t,e)}))}createMark(e,t){const s=this.createMarkElement(t),i=this.createMarkValueElement(e,t);s.append(i),this.root.append(s)}createMarkElement(e){const t=b.createElement("plugin-slider__mark js-plugin-slider__mark");return t.classList.add(`plugin-slider__mark_${this.mod}`),t.style[this.startPoint]=`${e}%`,t}createMarkValueElement(e,t){const s=document.createElement("span");return s.className=`plugin-slider__mark-value plugin-slider__mark-value_${this.mod}`,s.dataset.value=`${e}`,s.dataset.percent=`${t}`,s.innerText=`${e}`,s}adjustMarkVisibility(){const e=Array.from(this.root.querySelectorAll(".plugin-slider__mark"));let t=null;e.forEach((e=>{const s=e.querySelector(".plugin-slider__mark-value"),i=s?Number(s.getAttribute("data-percent")):null;if(null===t)return e.classList.remove(p),void(t=i);(null!==i?i-t:0)<5?e.classList.add(p):(e.classList.remove(p),t=i)}))}};var g=class extends b{constructor(e){const{root:t,thumbPercent:s=0,attr:i="valueFrom",isVertical:a,minValue:r,maxValue:o}=e;super(t,a),this.thumbPercent=s,this.thumbAttr=i,this.minValue=r,this.maxValue=o,this.handleThumbPointerDown=this.handleThumbPointerDown.bind(this),this.handleThumbKeyDown=this.handleThumbKeyDown.bind(this),this.handleThumbTouch=this.handleThumbTouch.bind(this),this.init()}init(){this.thumbElement=this.createThumb(),this.thumbElement.setAttribute("data-thumb-attr",this.thumbAttr),this.thumbElement.tabIndex=1,this.root.append(this.thumbElement),this.setPosition(this.thumbPercent),this.addListeners()}setPosition(e){if(this.thumbPercent=e,this.checkZInd(),void 0!==this.thumbElement){this.thumbElement.style[this.startPoint]=`${this.thumbPercent}%`;const e=this.minValue+this.thumbPercent/100*(this.maxValue-this.minValue);this.thumbElement.setAttribute("aria-valuenow",e.toString())}}getThumb(){return this.thumbElement}getThumbAttr(){return this.thumbAttr}addListeners(){void 0!==this.thumbElement&&(this.thumbElement.addEventListener("pointerdown",this.handleThumbPointerDown),this.thumbElement.addEventListener("keydown",this.handleThumbKeyDown),this.thumbElement.addEventListener("touchstart",this.handleThumbTouch))}createThumb(){const e=b.createElement("plugin-slider__thumb js-plugin-slider__thumb");return e.setAttribute("role","slider"),e.setAttribute("aria-valuemin",this.minValue.toString()),e.setAttribute("aria-valuemax",this.maxValue.toString()),e.setAttribute("aria-valuenow",this.thumbPercent.toString()),e.setAttribute("aria-label","Value slider"),e}checkZInd(){void 0!==this.thumbElement&&("valueFrom"===this.thumbAttr&&100===this.thumbPercent&&(this.thumbElement.style.zIndex="10"),"valueFrom"===this.thumbAttr&&this.thumbPercent<100&&(this.thumbElement.style.zIndex="5"),"valueTo"===this.thumbAttr&&0===this.thumbPercent&&(this.thumbElement.style.zIndex="10"),"valueTo"===this.thumbAttr&&this.thumbPercent>0&&(this.thumbElement.style.zIndex="5"))}handleThumbTouch(e){if(e.preventDefault(),void 0===this.thumbElement)return;const t=this.thumbElement.getBoundingClientRect()[this.startPoint];this.moved=e.touches[0][this.direction]-(t+this.thumbElement.getBoundingClientRect()[this.size]/2),super.performTouchMove(this.moved,this.thumbAttr)}handleThumbPointerDown(e){e.preventDefault(),void 0!==this.thumbElement&&(this.moved=e[this.direction]-(this.thumbElement.getBoundingClientRect()[this.startPoint]+this.thumbElement.getBoundingClientRect()[this.size]/2),this.checkZInd(),super.performPointerMove(this.moved,this.thumbAttr))}handleThumbKeyDown(e){if("Tab"===e.key)return;e.preventDefault();const{key:t}=e;"ArrowLeft"!==t&&"ArrowUp"!==t&&"ArrowRight"!==t&&"ArrowDown"!==t||e.preventDefault(),("ArrowLeft"===t&&!this.isVertical||"ArrowUp"===t&&this.isVertical)&&super.performKeyDown("decrement",this.thumbAttr),("ArrowRight"===t&&!this.isVertical||"ArrowDown"===t&&this.isVertical)&&super.performKeyDown("increment",this.thumbAttr)}};var T=class extends b{constructor(e){const{root:t,percentPosition:s,valueTip:i,isVertical:a}=e;super(t,a),this.percentPosition=s,this.valueTip=i,this.tip=this.createTip(),this.addTip()}setValueTip(e){this.tip.innerText=`${e}`}hideTip(){this.tip.style.display="none"}showTip(){this.tip.style.display=""}setPosition(e,t){this.tip.style[this.startPoint]=`${e}%`,this.tip.innerText=`${t}`}createTip(){const e=b.createElement("plugin-slider__tip js-plugin-slider__tip");return e.classList.add(`plugin-slider__tip_${this.mod}`),e.innerText=`${this.valueTip}`,e.style[super.startPoint]=`${this.percentPosition}%`,e}addTip(){this.root.append(this.tip)}};class V extends c{constructor(e,t){super(),this.state=t,this.dom={slider:void 0,scaleElement:void 0,root:e},this.numberVariables={tipValueFrom:0,thumbPercentFrom:0,thumbPercentTo:void 0,tipValueTo:void 0},this.booleanVariables={isProgress:!1,isRange:!1,isVertical:!1,isTip:!1,isScaleMarks:!1},this.classElements={thumbFrom:void 0,thumbTo:void 0,scale:void 0,scaleMarks:void 0,tipFrom:void 0,tipTo:void 0,progress:void 0,sliderComponents:void 0},this.createVariables(e,t),this.init(),this.setState(t)}static createSlider(){const e=document.createElement("div");return e.className="plugin-slider js-plugin-slider",e}update(e,t){if(void 0===this.dom)return;if(void 0===this.classElements.sliderComponents||void 0===this.dom.scaleElement)return;const{size:s}=this.classElements.sliderComponents,i=this.dom.scaleElement.getBoundingClientRect()[s];if(t===o){const t=Object.assign(Object.assign({},e),{scaleSize:i});this.emit(n,t)}else this.emit(n,e)}setState(e){const{thumbPercentFrom:t,valueFrom:s,isRange:i,thumbPercentTo:a,valueTo:r}=e;this.setThumbs(t,a,i),this.setTips(s,r,i),this.setProgress(t,a,i)}setThumbs(e,t,s){if(void 0!==this.classElements.thumbFrom&&void 0!==this.numberVariables&&void 0!==this.dom){if(this.numberVariables.thumbPercentFrom=e,this.classElements.thumbFrom.setPosition(this.numberVariables.thumbPercentFrom),s&&void 0!==this.dom.slider){null===this.dom.slider.querySelector('[data-thumb-attr="valueTo"')&&void 0!==t&&this.setThumb("valueTo",t)}s&&void 0!==t&&this.classElements.thumbTo&&(this.numberVariables.thumbPercentTo=t,this.classElements.thumbTo.setPosition(this.numberVariables.thumbPercentTo))}}setThumb(e,t){const s="valueTo"===e?"thumbTo":"thumbFrom";void 0!==this.dom&&void 0!==this.booleanVariables&&void 0!==this.dom.scaleElement&&void 0!==this.booleanVariables.isVertical&&(this.classElements[s]=new g({root:this.dom.scaleElement,thumbPercent:t,attr:e,isVertical:this.booleanVariables.isVertical,minValue:this.state.min,maxValue:this.state.max}))}setTips(e,t,s){var i,a,r;if(void 0===this.booleanVariables)return;if(void 0===this.numberVariables)return;const{isTip:o}=this.booleanVariables;if(o&&this.classElements.tipFrom){if(this.numberVariables.tipValueFrom=e,void 0===this.numberVariables.thumbPercentFrom)return;this.classElements.tipFrom.setPosition(this.numberVariables.thumbPercentFrom,this.numberVariables.tipValueFrom)}this.isNeedDoubleTip()?(null===(i=this.classElements.tipFrom)||void 0===i||i.setValueTip(`${e} - ${t}`),null===(a=this.classElements.tipTo)||void 0===a||a.hideTip()):null===(r=this.classElements.tipTo)||void 0===r||r.showTip(),s&&this.classElements.tipTo&&void 0!==t&&this.numberVariables.thumbPercentTo&&(this.numberVariables.tipValueTo=t,this.classElements.tipTo.setPosition(this.numberVariables.thumbPercentTo,this.numberVariables.tipValueTo))}setTip(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"valueFrom";var t;const s="valueFrom"===e?"tipValueFrom":"tipValueTo",i="valueFrom"===e?"tipFrom":"tipTo",a="valueFrom"===e?"thumbPercentFrom":"thumbPercentTo";void 0!==this.numberVariables&&void 0!==this.dom&&void 0!==this.booleanVariables&&("valueTo"===e&&void 0===this.numberVariables[a]||void 0!==this.dom.scaleElement&&void 0!==this.booleanVariables.isVertical&&(this.classElements[i]=new T({root:this.dom.scaleElement,percentPosition:null!==(t=this.numberVariables[a])&&void 0!==t?t:0,valueTip:s,isVertical:this.booleanVariables.isVertical})))}setProgress(e,t,s){var i,a,r;if(void 0===this.dom)return;if(void 0===this.booleanVariables)return;if(void 0===this.numberVariables)return;if(void 0===this.dom.slider)return;if(null===this.dom.slider.querySelector(".js-plugin-slider__progress")){const e="number"==typeof t?t:0;if(void 0===this.dom.scaleElement||void 0===this.booleanVariables.isVertical||void 0===this.numberVariables.thumbPercentFrom)return;this.classElements.progress=new d({root:this.dom.scaleElement,positionStart:this.numberVariables.thumbPercentFrom,positionEnd:e,isVertical:this.booleanVariables.isVertical})}this.booleanVariables.isProgress&&s&&t&&(null===(i=this.classElements.progress)||void 0===i||i.setProgressPosition(this.numberVariables.thumbPercentFrom,t-e)),this.booleanVariables.isProgress&&t===e&&(null===(a=this.classElements.progress)||void 0===a||a.setProgressPosition(0,0)),this.booleanVariables.isProgress&&!s&&(null===(r=this.classElements.progress)||void 0===r||r.setProgressPosition(0,this.numberVariables.thumbPercentFrom))}init(){void 0!==this.dom&&(this.dom.slider=V.createSlider(),this.createElements(),this.addSlider())}createVariables(e,t){const{isTip:s,valueFrom:i,valueTo:a,thumbPercentFrom:r,thumbPercentTo:o,isProgress:n,isRange:l,scaleMap:h,isVertical:m,scaleMarks:u}=t;void 0!==this.numberVariables&&(this.numberVariables.thumbPercentFrom=r,o&&(this.numberVariables.thumbPercentTo=o),void 0!==this.booleanVariables&&(this.booleanVariables.isTip=s||!1,this.numberVariables.tipValueFrom=i||0,this.numberVariables.tipValueTo=a||0,this.booleanVariables.isProgress=n||!1,this.booleanVariables.isRange=l||!1,this.booleanVariables.isVertical=m||!1,this.scaleMap=h,this.booleanVariables.isScaleMarks=u,void 0!==this.dom&&(this.dom.root=e)))}createElements(){void 0!==this.dom&&void 0!==this.booleanVariables&&void 0!==this.numberVariables&&void 0!==this.dom.slider&&void 0!==this.booleanVariables.isVertical&&void 0!==this.numberVariables.thumbPercentFrom&&(this.classElements.sliderComponents=new b(this.dom.slider,this.booleanVariables.isVertical),this.classElements.scale=new v(this.dom.slider,this.booleanVariables.isVertical),this.dom.scaleElement=this.classElements.scale.getScale(),this.setThumb("valueFrom",this.numberVariables.thumbPercentFrom),this.booleanVariables.isRange&&void 0!==this.numberVariables.thumbPercentTo&&this.setThumb("valueTo",this.numberVariables.thumbPercentTo),this.booleanVariables.isTip&&this.setTip("valueFrom"),this.booleanVariables.isTip&&this.numberVariables.thumbPercentTo&&this.booleanVariables.isRange&&void 0!==this.numberVariables.tipValueTo&&this.setTip("valueTo"),void 0!==this.booleanVariables.isRange&&this.setProgress(this.numberVariables.thumbPercentFrom,0,this.booleanVariables.isRange),this.scaleMap&&this.booleanVariables.isScaleMarks&&(this.classElements.scaleMarks=new P(this.dom.scaleElement,this.scaleMap,this.booleanVariables.isVertical)))}addSlider(){void 0!==this.dom&&void 0!==this.dom.root&&void 0!==this.dom.slider&&this.dom.root.append(this.dom.slider)}isNeedDoubleTip(){return void 0!==this.booleanVariables&&void 0!==this.numberVariables&&(void 0!==this.numberVariables.thumbPercentTo&&void 0!==this.booleanVariables.isRange&&void 0!==this.numberVariables.thumbPercentFrom&&void 0!==this.booleanVariables.isTip&&(this.numberVariables.thumbPercentTo-this.numberVariables.thumbPercentFrom<=2||0===this.numberVariables.thumbPercentTo&&0===this.numberVariables.thumbPercentFrom))}}var E=V;var F=class extends c{constructor(e,t){super(),this.state=t,this.init(e,t)}updateSlider(e){void 0!==this.slider&&this.slider.setState(e)}update(e,t){t===n&&this.emit(l,e),t===l&&this.updateSlider(e)}getRoot(){return this.root}setRoot(e){this.root=e}getSlider(){return this.slider}setSlider(e){this.slider=e}init(e,t){const{isRange:s}=t;this.root=e,this.isRange=s,this.slider=new E(e,t),this.addSubscribeSlider()}addSubscribeSlider(){void 0!==this.slider&&void 0!==this.slider.classElements&&void 0!==this.slider.booleanVariables&&(void 0!==this.slider.classElements.thumbFrom&&(this.slider.classElements.thumbFrom.addSubscriber(o,this.slider),this.slider.classElements.thumbFrom.addSubscriber(m,this.slider)),this.isRange&&this.slider.classElements.thumbTo&&(this.slider.classElements.thumbTo.addSubscriber(o,this.slider),this.slider.classElements.thumbTo.addSubscriber(m,this.slider)),void 0!==this.slider.classElements.scale&&(this.slider.classElements.scale.addSubscriber(h,this.slider),this.slider.booleanVariables.isScaleMarks&&void 0!==this.slider.classElements.scaleMarks&&this.slider.classElements.scaleMarks.addSubscriber(u,this.slider)),this.slider.addSubscriber(h,this),this.slider.addSubscriber(n,this))}};var S=class{constructor(e){this.handleSliderClick=(e,t)=>{const s=this.findSuitablePercent(e);this.updateStateMove(s.value,t)},this.handleMouseMove=(e,t)=>{const s=this.findPercent(e,t),{value:i}=s;void 0!==i&&"number"==typeof i&&this.updateStateMove(i,t)},this.getValue=e=>this.state[e],this.getPercentVal=()=>{const{valueFrom:e,min:t,max:s}=this.state;return Number((e/(s-t)*100).toFixed(3))},this.getStepsCount=()=>Math.ceil((this.state.max-this.state.min)/this.state.step),this.updateStateMove=(e,t)=>{if(Number.isNaN(e)||e<this.state.min||e>this.state.max)throw new Error("Invalid value provided while updating the model.");this.setState({[t]:e})},this.state=e}setState(e){this.state=Object.assign(Object.assign({},this.state),e)}getState(){return this.state}findSuitablePercent(e){const{step:t,min:s,max:i}=this.state,a=Math.round(e/(100/this.getStepsCount())),r=100/this.getStepsCount()*a;let o;return o=100===r?i:s+t*a,{value:o,percent:r}}findPercent(e,t){const{min:s,max:i,step:a,isRange:r}=this.state,o="valueFrom"===t?"thumbPercentFrom":"thumbPercentTo";let n=this.state[o],l=this.state[t];void 0===l&&(l=s),void 0===n&&("number"==typeof l?void 0===n&&(n=(l-s)/(i-s)*100):(l=s,n=(l-s)/(i-s)*100));const h=n+100/this.getStepsCount(),m=n-100/this.getStepsCount(),u=s+Math.floor(e/100*this.getStepsCount())*a,c=s+Math.ceil(e/100*this.getStepsCount())*a,b=e>=h?u:e<=m?c:l,d=e>=h?(u-s)/(i-s)*100:e<=m?(c-s)/(i-s)*100:e;if("number"!=typeof b)throw new Error("value should be a number");if("valueFrom"===t&&void 0!==this.state.valueTo&&b>this.state.valueTo&&r){const{valueTo:e,thumbPercentTo:t}=this.state;return{valueTo:e,thumbPercentTo:t}}if("valueTo"===t&&void 0!==this.state.valueFrom&&b<this.state.valueFrom&&r){const{valueFrom:e,thumbPercentFrom:t}=this.state;return{valueFrom:e,thumbPercentFrom:t}}return{value:b,percent:d}}};var f=class{constructor(e){this.data=e,this.DEFAULT_GAP=20,this.baseParams={min:0,max:100,valueFrom:0,step:1,valueTo:void 0,stepPercent:10,thumbPercentFrom:void 0,thumbPercentTo:void 0},this.booleanVariables={isTip:!1,isVertical:!1,isProgress:!1,scaleMarks:!1,isRange:!1},this.validateData(e)}validateData(e){return this.setBooleans(e),this.setData(e),this.resultObject=Object.assign(Object.assign(Object.assign({},e),this.booleanVariables),{thumbPercentFrom:0,thumbPercentTo:void 0}),this.checkRange(),this.checkStep(),this.checkValues(),this.checkPercents(),this.resultObject}performMoveToPercent(e){const{coordsMove:t,scaleSize:s,keyEvent:i,ThumbAttr:a}=e;if(void 0!==i&&void 0!==this.baseParams.stepPercent&&void 0!==this.baseParams.thumbPercentFrom){if("increment"===i&&"valueFrom"===a)return this.baseParams.thumbPercentFrom+this.baseParams.stepPercent;if("decrement"===i&&"valueFrom"===a)return this.baseParams.thumbPercentFrom-this.baseParams.stepPercent;if("increment"===i&&"valueTo"===a&&void 0!==this.baseParams.thumbPercentTo)return this.baseParams.thumbPercentTo+this.baseParams.stepPercent;if("decrement"===i&&"valueTo"===a&&void 0!==this.baseParams.thumbPercentTo)return this.baseParams.thumbPercentTo-this.baseParams.stepPercent}if(void 0===t||void 0===s)return 0;let r=Number((t/(s/100)).toFixed(2));return r<0&&(r=0),r>100&&(r=100),r}validateMarks(e){const{step:t,max:s,min:i,gap:a}=e,r=new Map,o=this.validateGap(a),n=this.findRange()/100,l=t/n,h=t*Math.ceil(o/l),m=Math.ceil(h/n);for(let e=0;e<=100;e+=m)if(e<=100-m){const s=t*Math.round(e/l),a=s/n,o=i+s;r.set(o,a)}return r.set(s,100),r}validateThumbAttr(e){if(void 0===this.baseParams.thumbPercentFrom)return"valueTo";if(!this.booleanVariables.isRange)return"valueFrom";if(e<this.baseParams.thumbPercentFrom)return"valueFrom";if(void 0!==this.baseParams.thumbPercentTo&&e>this.baseParams.thumbPercentTo)return"valueTo";if(void 0!==this.baseParams.thumbPercentTo&&e>this.baseParams.thumbPercentFrom&&e<this.baseParams.thumbPercentTo){const t=e-this.baseParams.thumbPercentFrom,s=this.baseParams.thumbPercentTo-e;if(t===s||t<s)return"valueFrom";if(t>s)return"valueTo"}return"valueTo"}validatePercent(e,t,s){const{isRange:i}=s;if(!i){const i=Object.assign(Object.assign({},s),{valueFrom:t,thumbPercentFrom:e});return this.validateData(i)}if(void 0!==s.thumbPercentTo){const{thumbPercentFrom:i,thumbPercentTo:a}=s;let r="thumbPercentFrom",o="valueFrom";if(e>a)r="thumbPercentTo",o="valueTo";else if(e>i&&e<a){e-i>=(a-i)/2&&(r="thumbPercentTo",o="valueTo")}const n=Object.assign(Object.assign({},s),{[o]:t,[r]:e});return this.validateData(n)}return s}setData(e){const{min:t,max:s,valueFrom:i,step:a,scalePercentGap:r,valueTo:o}=e;this.baseParams.min=t,this.baseParams.max=s,this.baseParams.valueFrom=i,this.baseParams.step=a,this.scalePercentGap="number"==typeof r?r:void 0,this.booleanVariables.isRange&&void 0!==o&&(this.baseParams.valueTo=o),this.baseParams.stepPercent=this.baseParams.step/(this.findRange()/100)}setBooleans(e){const{isRange:t,isTip:s,isVertical:i,isProgress:a,scaleMarks:r}=e;this.booleanVariables.isRange="boolean"==typeof t&&t,this.booleanVariables.isTip="boolean"==typeof s&&s,this.booleanVariables.isVertical="boolean"==typeof i&&i,this.booleanVariables.isProgress="boolean"==typeof a&&a,this.booleanVariables.scaleMarks="boolean"==typeof r&&r}validateGap(e){let t=e;return(t<0||t>100)&&(t=this.DEFAULT_GAP),t}checkRange(){Number.isNaN(this.baseParams.min)&&(this.baseParams.min=0),Number.isNaN(this.baseParams.max)&&(this.baseParams.max=10),this.baseParams.min===this.baseParams.max&&(this.baseParams.max=this.baseParams.min+this.baseParams.step),this.baseParams.min>this.baseParams.max&&([this.baseParams.min,this.baseParams.max]=[this.baseParams.max,this.baseParams.min]),this.resultObject.min=this.baseParams.min,this.resultObject.max=this.baseParams.max}checkStep(){Number.isNaN(this.baseParams.step)&&(this.baseParams.step=1);const e=this.findRange();this.baseParams.step>e&&(this.baseParams.step=e),this.baseParams.step<.001&&(this.baseParams.step=.001),this.resultObject.step=this.baseParams.step}findRange(){return this.baseParams.max-this.baseParams.min}checkValues(){this.baseParams.valueFrom=this.checkValue(this.baseParams.valueFrom),this.booleanVariables.isRange&&void 0!==this.baseParams.valueTo&&(this.baseParams.valueTo=this.checkValue(this.baseParams.valueTo)),void 0!==this.baseParams.valueTo&&this.baseParams.valueFrom>this.baseParams.valueTo&&this.booleanVariables.isRange&&([this.baseParams.valueFrom,this.baseParams.valueTo]=[this.baseParams.valueTo,this.baseParams.valueFrom]),this.resultObject.valueFrom=this.baseParams.valueFrom,this.booleanVariables.isRange&&(this.resultObject.valueTo=this.baseParams.valueTo)}checkValue(e){let t=e;if(Number.isNaN(t)&&(t=0),t===this.baseParams.max)return t;if(t%this.baseParams.step!=0&&t!==this.baseParams.min){const e=Math.round((t-this.baseParams.min)/this.baseParams.step);t=this.baseParams.min+this.baseParams.step*e}return t>this.baseParams.max&&(t=this.baseParams.max),t<this.baseParams.min&&(t=this.baseParams.min),t}checkPercents(){this.baseParams.thumbPercentFrom=this.checkPercent("valueFrom"),this.resultObject.thumbPercentFrom=this.baseParams.thumbPercentFrom,this.booleanVariables.isRange&&(this.baseParams.thumbPercentTo=this.checkPercent("valueTo"),this.resultObject.thumbPercentTo=this.baseParams.thumbPercentTo)}checkPercent(e){let t=0;if(e in this.baseParams&&(t=this.baseParams[e]),void 0===t)return 0;const s=t-this.baseParams.min;return Number((s/(this.findRange()/100)).toFixed(3))}};var k=class extends c{constructor(e){super(),this.validator=new f(e);const t=this.validator.validateData(e);this.model=new S(t)}setState(e){const t=this.validator.validateData(e);this.model.setState(t)}getState(){if(this.model.getState().scaleMarks){const e=this.validGapMarks();return Object.assign(Object.assign({},this.model.getState()),{scaleMap:e})}return this.model.getState()}getValue(e){return this.model.getState()[e]}update(e){if(void 0===e.percent){const t=this.validator.performMoveToPercent(e);if(void 0!==e.ThumbAttr&&this.model.handleMouseMove(t,e.ThumbAttr),void 0===e.ThumbAttr){const e=this.validator.validateThumbAttr(t);this.model.handleSliderClick(t,e)}const s=this.model.getState(),i=this.validator.validateData(s);this.model.setState(i),s.scaleMarks?this.emit(r,Object.assign(Object.assign({},this.model.getState()),{scaleMap:this.validGapMarks()})):this.emit(r,this.model.getState())}else{const{percent:t,value:s}=e,i=this.validator.validatePercent(t,s,this.model.getState());this.model.setState(i),this.emit(r,this.model.getState())}}setValue(e,t){const s=this.model.getState(),i=Object.assign(Object.assign({},s),{[e]:t}),a=this.validator.validateData(i);this.model.setState(a),this.emit(r,this.model.getState())}validGapMarks(){const{scalePercentGap:e,min:t,max:s,step:i}=this.model.getState(),a=null!=e?e:20;return this.validator.validateMarks({min:t,max:s,step:i,gap:a})}};var _=class extends c{constructor(e,t){super(),this.modelFacade=new k(t),this.view=new F(e,this.modelFacade.getState()),this.subscribeModel(),this.subscribeSlider()}getState(){return this.modelFacade.getState()}setState(e){this.modelFacade.setState(e)}setValue(e,t){this.modelFacade.setValue(e,t)}getValue(e){return this.modelFacade.getValue(e)}subscribeSlider(){this.view.addSubscriber(l,this.modelFacade)}subscribeModel(){this.modelFacade.addSubscriber(r,this.view)}};var M={min:0,max:100,valueFrom:0,valueTo:0,step:1,scalePercentGap:10,scaleMarks:!1,isTip:!1,isProgress:!1,isRange:!1,isVertical:!1};a().fn.sliderPlugin=function(e){const t=Object.assign(Object.assign({},M),e);return new _(this[0],t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,