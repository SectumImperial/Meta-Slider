"use strict";(self.webpackChunkmeta_slider=self.webpackChunkmeta_slider||[]).push([[390],{390:function(e,t,s){var i=s(755),a=s.n(i);const r="VALUE_CHANGED",o="VALUE_START_CHANGE",n="DATA_COLLECTED",h="VALUE_CHANGED",l=" SCALE_CLICKED",m="KEY_DOWN",c="MARK_CLICKED";var u=class{constructor(){this.observers={}}addSubscriber(e,t){if(this.observers[e]){const s=this.observers[e];this.observers[e]=[...s,t]}else this.observers[e]=[t]}removeSubscriber(e,t){this.observers[e].filter((e=>e!==t))}emit(e,t){(this.observers[e]||[]).forEach((s=>{s.update(t,e)}))}};var b=class extends u{constructor(e,t){super(),this.isVertical=t,this.direction=this.isVertical?"clientY":"clientX",this.startPoint=this.isVertical?"top":"left",this.size=this.isVertical?"height":"width",this.mod=this.isVertical?"vertical":"horizontal",this.root=e}static createElement(e){const t=document.createElement("div");return t.className=e,t}performPointerMove(e,t){const s=s=>{s.preventDefault();const i=this.root.getBoundingClientRect()[this.startPoint],a=s[this.direction]-e-i;this.emit(o,{coordsMove:a,thumbId:t})},i=()=>{document.removeEventListener("pointermove",s),document.removeEventListener("pointerup",i)};document.addEventListener("pointermove",s),document.addEventListener("pointerup",i)}performTouchMove(e,t){const s=s=>{s.stopImmediatePropagation();const i=this.root.getBoundingClientRect()[this.startPoint],a=s.touches[0][this.direction]-e-i;this.emit(o,{coordsMove:a,thumbId:t})},i=()=>{document.removeEventListener("touchmove",s),document.removeEventListener("touchend",i)};document.addEventListener("touchmove",s),document.addEventListener("touchend",i)}performKeyDown(e,t){this.emit(m,{keyEvent:e,thumbId:t})}performClickMark(e,t){this.emit(c,{percent:e,value:t})}};var d=class extends b{constructor(e){const{root:t,positionStart:s,positionEnd:i,isVertical:a}=e;super(t,a),this.positionStart=s,this.positionEnd=i,this.progress=b.createElement("plugin-slider__progress js-plugin-slider__progress"),this.setProgress()}setProgress(){this.progress.style[this.startPoint]="".concat(this.positionStart,"%"),this.progress.style[this.size]="".concat(this.positionEnd,"%"),this.root.append(this.progress)}setProgressPosition(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100;this.progress.style[this.startPoint]="".concat(e,"%"),this.progress.style[this.size]="".concat(t,"%")}};var v=class extends b{constructor(e,t){super(e,t),this.scale=b.createElement("plugin-slider__scale js-plugin-slider__scale"),this.handleScalePointerDown=this.handleScalePointerDown.bind(this),this.init()}getScale(){return this.scale||(this.scale=b.createElement("plugin-slider__scale")),this.scale}init(){this.isVertical&&this.scale.classList.add("plugin-slider__scale_vertical"),this.isVertical||this.scale.classList.add("plugin-slider__scale_horizontal"),this.addScale(),this.addListeners()}addScale(){this.root.append(this.scale)}addListeners(){this.scale.addEventListener("pointerdown",this.handleScalePointerDown)}handleScalePointerDown(e){const{target:t}=e;if(!t.closest(".plugin-slider__scale"))return;if(t.classList.contains("plugin-slider__mark-value"))return;const s=this.scale.getBoundingClientRect()[this.size],i=this.scale.getBoundingClientRect()[this.startPoint],a=e[this.direction]-i;a>s||a<0||this.emitData(a,s)}emitData(e,t){const s={coordsMove:e,scaleSize:t};this.emit(l,s)}};var p=class extends b{constructor(e,t,s){super(e,s),this.marks=t,this.handleRootClick=this.handleRootClick.bind(this),this.init()}init(){this.createMarks(),this.addListeners()}addListeners(){this.root.addEventListener("click",this.handleRootClick)}handleRootClick(e){const t=e.target;if(null===t)return;const{value:s,percent:i}=t.dataset;t.classList.contains("plugin-slider__mark-value")&&void 0!==i&&this.performClickMark(Number(i),Number(s))}createMarks(){this.marks.forEach(((e,t)=>this.createMark(e,t)))}createMark(e,t){const s=b.createElement("plugin-slider__mark js-plugin-slider__mark");s.classList.add("plugin-slider__mark_".concat(this.mod)),s.style[this.startPoint]="".concat(e,"%");const i=document.createElement("span");i.className="plugin-slider__mark-value",i.classList.add("plugin-slider__mark-value_".concat(this.mod)),i.dataset.value="".concat(t),i.dataset.percent="".concat(e),i.innerText="".concat(t),s.append(i),this.root.append(s)}};var P=class extends b{constructor(e){const{root:t,thumbPercent:s=0,id:i="valueFrom",isVertical:a}=e;super(t,a),this.thumbPercent=s,this.thumbId=i,this.handleThumbPointerDown=this.handleThumbPointerDown.bind(this),this.handleThumbKeyDown=this.handleThumbKeyDown.bind(this),this.handleThumbTouch=this.handleThumbTouch.bind(this),this.init()}init(){this.thumbElement=b.createElement("plugin-slider__thumb js-plugin-slider__thumb"),this.thumbElement.id=this.thumbId,this.thumbElement.tabIndex=1,this.root.append(this.thumbElement),this.setPosition(this.thumbPercent),this.addListeners()}setPosition(e){this.thumbPercent=e,this.checkZInd(),void 0!==this.thumbElement&&(this.thumbElement.style[this.startPoint]="".concat(this.thumbPercent,"%"))}getThumb(){return this.thumbElement}getThumbId(){return this.thumbId}checkZInd(){void 0!==this.thumbElement&&("valueFrom"===this.thumbId&&100===this.thumbPercent&&(this.thumbElement.style.zIndex="10"),"valueFrom"===this.thumbId&&this.thumbPercent<100&&(this.thumbElement.style.zIndex="5"),"valueTo"===this.thumbId&&0===this.thumbPercent&&(this.thumbElement.style.zIndex="10"),"valueTo"===this.thumbId&&this.thumbPercent>0&&(this.thumbElement.style.zIndex="5"))}addListeners(){void 0!==this.thumbElement&&(this.thumbElement.addEventListener("pointerdown",this.handleThumbPointerDown),this.thumbElement.addEventListener("keydown",this.handleThumbKeyDown),this.thumbElement.addEventListener("touchstart",this.handleThumbTouch))}handleThumbTouch(e){if(e.preventDefault(),void 0===this.thumbElement)return;const t=this.thumbElement.getBoundingClientRect()[this.startPoint];this.moved=e.touches[0][this.direction]-(t+this.thumbElement.getBoundingClientRect()[this.size]/2),super.performTouchMove(this.moved,this.thumbId)}handleThumbPointerDown(e){e.preventDefault(),void 0!==this.thumbElement&&(this.moved=e[this.direction]-(this.thumbElement.getBoundingClientRect()[this.startPoint]+this.thumbElement.getBoundingClientRect()[this.size]/2),this.checkZInd(),super.performPointerMove(this.moved,this.thumbId))}handleThumbKeyDown(e){e.preventDefault();const{key:t}=e;"ArrowLeft"!==t&&"ArrowUp"!==t&&"ArrowRight"!==t&&"ArrowDown"!==t||e.preventDefault(),("ArrowLeft"===t&&!this.isVertical||"ArrowUp"===t&&this.isVertical)&&super.performKeyDown("decrement",this.thumbId),("ArrowRight"===t&&!this.isVertical||"ArrowDown"===t&&this.isVertical)&&super.performKeyDown("increment",this.thumbId)}};var V=class extends b{constructor(e){const{root:t,percentPosition:s,valueTip:i,isVertical:a}=e;super(t,a),this.percentPosition=s,this.valueTip=i,this.tip=this.createTip(),this.addTip()}setValueTip(e){this.tip.innerText="".concat(e)}hideTip(){this.tip.style.display="none"}showTip(){this.tip.style.display=""}setPosition(e,t){this.tip.style[this.startPoint]="".concat(e,"%"),this.tip.innerText="".concat(t)}createTip(){const e=b.createElement("plugin-slider__tip js-plugin-slider__tip");return e.classList.add("plugin-slider__tip_".concat(this.mod)),e.innerText="".concat(this.valueTip),e.style[super.startPoint]="".concat(this.percentPosition,"%"),e}addTip(){this.root.append(this.tip)}};class g extends u{constructor(e,t){super(),this.state=t,this.dom={slider:void 0,scaleElement:void 0,root:e},this.numberVariables={tipValueFrom:void 0,thumbPercentFrom:void 0,thumbPercentTo:void 0,tipValueTo:void 0},this.booleanVariables={isProgress:!1,isRange:!1,isVertical:!1,isTip:!1,isScaleMarks:!1},this.classElements={thumbFrom:void 0,thumbTo:void 0,scale:void 0,scaleMarks:void 0,tipFrom:void 0,tipTo:void 0,progress:void 0,sliderComponents:void 0},this.createVariables(e,t),this.init(),this.setState(t)}static createSlider(){const e=document.createElement("div");return e.className="plugin-slider js-plugin-slider",e}update(e,t){if(void 0===this.dom)return;if(void 0===this.classElements.sliderComponents||void 0===this.dom.scaleElement)return;const{size:s}=this.classElements.sliderComponents,i=this.dom.scaleElement.getBoundingClientRect()[s];if(t===o){const t=Object.assign(Object.assign({},e),{scaleSize:i});this.emit(n,t)}else this.emit(n,e)}setState(e){const{thumbPercentFrom:t,valueFrom:s,isRange:i,thumbPercentTo:a,valueTo:r}=e;this.setThumbs(t,a,i),this.setTips(s,r,i),this.setProgress(t,a,i)}setThumbs(e,t,s){if(void 0!==this.classElements.thumbFrom&&void 0!==this.numberVariables&&void 0!==this.dom){if(this.numberVariables.thumbPercentFrom=e,this.classElements.thumbFrom.setPosition(this.numberVariables.thumbPercentFrom),s&&void 0!==this.dom.slider){null===this.dom.slider.querySelector("#valueTo")&&void 0!==t&&this.setThumb("valueTo",t)}s&&void 0!==t&&this.classElements.thumbTo&&(this.numberVariables.thumbPercentTo=t,this.classElements.thumbTo.setPosition(this.numberVariables.thumbPercentTo))}}setThumb(e,t){const s="valueTo"===e?"thumbTo":"thumbFrom";void 0!==this.dom&&void 0!==this.booleanVariables&&void 0!==this.dom.scaleElement&&void 0!==this.booleanVariables.isVertical&&(this.classElements[s]=new P({root:this.dom.scaleElement,thumbPercent:t,id:e,isVertical:this.booleanVariables.isVertical}))}setTips(e,t,s){var i,a,r;if(void 0===this.booleanVariables)return;if(void 0===this.numberVariables)return;const{isTip:o}=this.booleanVariables;if(o&&this.classElements.tipFrom){if(this.numberVariables.tipValueFrom=e,void 0===this.numberVariables.thumbPercentFrom)return;this.classElements.tipFrom.setPosition(this.numberVariables.thumbPercentFrom,this.numberVariables.tipValueFrom)}this.isNeedDoubleTip()?(null===(i=this.classElements.tipFrom)||void 0===i||i.setValueTip("".concat(e," - ").concat(t)),null===(a=this.classElements.tipTo)||void 0===a||a.hideTip()):null===(r=this.classElements.tipTo)||void 0===r||r.showTip(),s&&this.classElements.tipTo&&void 0!==t&&this.numberVariables.thumbPercentTo&&(this.numberVariables.tipValueTo=t,this.classElements.tipTo.setPosition(this.numberVariables.thumbPercentTo,this.numberVariables.tipValueTo))}setTip(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"valueFrom";const t="valueFrom"===e?"tipValueFrom":"tipValueTo",s="valueFrom"===e?"tipFrom":"tipTo",i="valueFrom"===e?"thumbPercentFrom":"thumbPercentTo";void 0!==this.numberVariables&&void 0!==this.dom&&void 0!==this.booleanVariables&&("valueTo"===e&&void 0===this.numberVariables[i]||void 0!==this.dom.scaleElement&&void 0!==this.booleanVariables.isVertical&&(this.classElements[s]=new V({root:this.dom.scaleElement,percentPosition:this.numberVariables[i],valueTip:t,isVertical:this.booleanVariables.isVertical})))}setProgress(e,t,s){var i,a,r;if(void 0===this.dom)return;if(void 0===this.booleanVariables)return;if(void 0===this.numberVariables)return;if(void 0===this.dom.slider)return;if(null===this.dom.slider.querySelector(".js-plugin-slider__progress")){const e="number"==typeof t?t:0;if(void 0===this.dom.scaleElement||void 0===this.booleanVariables.isVertical||void 0===this.numberVariables.thumbPercentFrom)return;this.classElements.progress=new d({root:this.dom.scaleElement,positionStart:this.numberVariables.thumbPercentFrom,positionEnd:e,isVertical:this.booleanVariables.isVertical})}this.booleanVariables.isProgress&&s&&t&&(null===(i=this.classElements.progress)||void 0===i||i.setProgressPosition(this.numberVariables.thumbPercentFrom,t-e)),this.booleanVariables.isProgress&&t===e&&(null===(a=this.classElements.progress)||void 0===a||a.setProgressPosition(0,0)),this.booleanVariables.isProgress&&!s&&(null===(r=this.classElements.progress)||void 0===r||r.setProgressPosition(0,this.numberVariables.thumbPercentFrom))}init(){void 0!==this.dom&&(this.dom.slider=g.createSlider(),this.createElements(),this.addSlider())}createVariables(e,t){const{isTip:s,valueFrom:i,valueTo:a,thumbPercentFrom:r,thumbPercentTo:o,isProgress:n,isRange:h,scaleMap:l,isVertical:m,scaleMarks:c}=t;void 0!==this.numberVariables&&(this.numberVariables.thumbPercentFrom=r,o&&(this.numberVariables.thumbPercentTo=o),void 0!==this.booleanVariables&&(this.booleanVariables.isTip=s||!1,this.numberVariables.tipValueFrom=i||0,this.numberVariables.tipValueTo=a||0,this.booleanVariables.isProgress=n||!1,this.booleanVariables.isRange=h||!1,this.booleanVariables.isVertical=m||!1,this.scaleMap=l,this.booleanVariables.isScaleMarks=c,void 0!==this.dom&&(this.dom.root=e)))}createElements(){void 0!==this.dom&&void 0!==this.booleanVariables&&void 0!==this.numberVariables&&void 0!==this.dom.slider&&void 0!==this.booleanVariables.isVertical&&void 0!==this.numberVariables.thumbPercentFrom&&(this.classElements.sliderComponents=new b(this.dom.slider,this.booleanVariables.isVertical),this.classElements.scale=new v(this.dom.slider,this.booleanVariables.isVertical),this.dom.scaleElement=this.classElements.scale.getScale(),this.setThumb("valueFrom",this.numberVariables.thumbPercentFrom),this.booleanVariables.isRange&&void 0!==this.numberVariables.thumbPercentTo&&this.setThumb("valueTo",this.numberVariables.thumbPercentTo),this.booleanVariables.isTip&&this.setTip("valueFrom"),this.booleanVariables.isTip&&this.numberVariables.thumbPercentTo&&this.booleanVariables.isRange&&void 0!==this.numberVariables.tipValueTo&&this.setTip("valueTo"),void 0!==this.booleanVariables.isRange&&this.setProgress(this.numberVariables.thumbPercentFrom,0,this.booleanVariables.isRange),this.scaleMap&&this.booleanVariables.isScaleMarks&&(this.classElements.scaleMarks=new p(this.dom.scaleElement,this.scaleMap,this.booleanVariables.isVertical)))}addSlider(){void 0!==this.dom&&void 0!==this.dom.root&&void 0!==this.dom.slider&&this.dom.root.append(this.dom.slider)}isNeedDoubleTip(){return void 0!==this.booleanVariables&&void 0!==this.numberVariables&&(void 0!==this.numberVariables.thumbPercentTo&&void 0!==this.booleanVariables.isRange&&void 0!==this.numberVariables.thumbPercentFrom&&void 0!==this.booleanVariables.isTip&&(this.numberVariables.thumbPercentTo-this.numberVariables.thumbPercentFrom<=2||0===this.numberVariables.thumbPercentTo&&0===this.numberVariables.thumbPercentFrom))}}var T=g;var E=class extends u{constructor(e,t){super(),this.state=t,this.init(e,t)}updateSlider(e){void 0!==this.slider&&this.slider.setState(e)}update(e,t){t===n&&this.emit(h,e),t===h&&this.updateSlider(e)}getRoot(){return this.root}setRoot(e){this.root=e}getSlider(){return this.slider}setSlider(e){this.slider=e}init(e,t){const{isRange:s}=t;this.root=e,this.isRange=s,this.slider=new T(e,t),this.addSubscribeSlider()}addSubscribeSlider(){void 0!==this.slider&&(void 0!==this.slider.classElements.thumbFrom&&(this.slider.classElements.thumbFrom.addSubscriber(o,this.slider),this.slider.classElements.thumbFrom.addSubscriber(m,this.slider)),this.isRange&&this.slider.classElements.thumbTo&&(this.slider.classElements.thumbTo.addSubscriber(o,this.slider),this.slider.classElements.thumbTo.addSubscriber(m,this.slider)),void 0!==this.slider.classElements.scale&&(this.slider.classElements.scale.addSubscriber(l,this.slider),this.slider.booleanVariables.isScaleMarks&&void 0!==this.slider.classElements.scaleMarks&&this.slider.classElements.scaleMarks.addSubscriber(c,this.slider)),this.slider.addSubscriber(l,this),this.slider.addSubscriber(n,this))}};const F={valueFrom:"thumbPercentFrom",valueTo:"thumbPercentTo"};var f=class{constructor(e){this.state=e,this.init()}setState(e){const t=this.state;this.state=Object.assign(Object.assign({},t),e)}getState(){return this.state}updateStateMove(e,t){const s=this.findSuitablePercent(e,t);this.handleMove(s)}getValue(e){return this.state["".concat(e)]}getPercentVal(){const{valueFrom:e,min:t,max:s}=this.state;return Number((e/(s-t)*100).toFixed(3))}init(){this.stepPercent=Number(this.state.step/this.findValPercent())}findSuitablePercent(e,t){const{step:s,max:i,min:a}=this.state;void 0===this.stepPercent&&(this.stepPercent=1);const r=Math.floor(e/this.stepPercent),o=Math.ceil(e/this.stepPercent),n=a+s*r,h=a+s*o,l=this.stepPercent*r,m=this.stepPercent*o,c=Number((this.stepPercent/2).toFixed(3));let u,b;Number((e%this.stepPercent).toFixed(3))<c?(u=n,b=l):(u=h,b=m);const d=Math.ceil((i-a)/s),v=this.stepPercent*(d-1);return(100===e||100-(100-v)/2<e)&&(u=i,b=100),void 0===b&&(b=this.stepPercent*r),{value:u,thumb:t,percent:b}}handleMove(e){const{value:t,thumb:s,percent:i}=e;"valueFrom"===s&&this.handleMoveFrom({value:t,thumb:s,percent:i}),"valueTo"===s&&this.handleMoveTo({value:t,thumb:s,percent:i})}handleMoveFrom(e){const{value:t,thumb:s,percent:i}=e,{valueTo:a,thumbPercentTo:r}=this.state;this.isValueTheSamePos({value:t,valueAnotherThumb:a,thumbPercent:r,thumb:s,idVal:"valueFrom"})&&void 0!==a&&void 0!==r?this.updateMoved(a,r,s):void 0!==t&&this.updateMoved(t,i,s)}handleMoveTo(e){const{value:t,thumb:s,percent:i}=e,{valueFrom:a,thumbPercentFrom:r}=this.state;this.isValueTheSamePos({value:t,valueAnotherThumb:a,thumbPercent:r,thumb:s,idVal:"valueTo"})&&void 0!==a?this.updateMoved(a,r,s):void 0!==t&&this.updateMoved(t,i,s)}isValueTheSamePos(e){const{value:t,valueAnotherThumb:s,thumbPercent:i,thumb:a,idVal:r}=e,{isRange:o}=this.state;let n=!1;return void 0!==t&&void 0!==s&&(n="valueFrom"===r?t>s:t<s),o&&void 0!==i&&a===r&&n}findValPercent(){return this.findRange()/100}findRange(){return this.state.max-this.state.min}updateMoved(e,t,s){if(Number.isNaN(e)||void 0===t)throw new Error("Something wrong with setting new values");const i=F[s];this.setState({[s]:e,[i]:t})}};var S=class{constructor(e){this.data=e,this.DEFAULT_GAP=20,this.baseParams={min:0,max:100,valueFrom:0,step:1,valueTo:void 0,stepPercent:10,thumbPercentFrom:void 0,thumbPercentTo:void 0},this.booleanVariables={isTip:!1,isVertical:!1,isProgress:!1,scaleMarks:!1,isRange:!1},this.validateData(e)}validateData(e){const t=this.setBooleans(e);return this.setData(e),this.resultObject=Object.assign(Object.assign(Object.assign({},e),t),{thumbPercentFrom:0,thumbPercentTo:void 0}),this.checkRange(),this.checkStep(),this.checkValues(),this.checkPercents(),this.resultObject}performMoveToPercent(e){const{coordsMove:t,scaleSize:s,keyEvent:i,thumbId:a}=e;if(i&&void 0!==this.baseParams.stepPercent&&void 0!==this.baseParams.thumbPercentFrom){if("increment"===i&&"valueFrom"===a)return this.baseParams.thumbPercentFrom+this.baseParams.stepPercent;if("decrement"===i&&"valueFrom"===a)return this.baseParams.thumbPercentFrom-this.baseParams.stepPercent;if("increment"===i&&"valueTo"===a&&void 0!==this.baseParams.thumbPercentTo)return this.baseParams.thumbPercentTo+this.baseParams.stepPercent;if("decrement"===i&&"valueTo"===a&&void 0!==this.baseParams.thumbPercentTo)return this.baseParams.thumbPercentTo-this.baseParams.stepPercent}if(void 0===t||void 0===s)return 0;let r=Number((t/(s/100)).toFixed(2));return r<0&&(r=0),r>100&&(r=100),r}validateMarks(e){const{step:t,max:s,min:i,gap:a}=e,r=new Map,o=this.validateGap(a),n=this.findRange()/100,h=t/n,l=t*Math.ceil(o/h),m=Math.ceil(l/n);for(let e=0;e<=100;e+=m)if(e<=100-m){const s=t*Math.round(e/h),a=s/n,o=i+s;r.set(o,a)}return r.set(s,100),r}validateThumbId(e){if(void 0===this.booleanVariables)return"valueTo";if(void 0===this.baseParams.thumbPercentFrom)return"valueTo";if(!this.booleanVariables.isRange)return"valueFrom";if(e<this.baseParams.thumbPercentFrom)return"valueFrom";if(void 0!==this.baseParams.thumbPercentTo&&e>this.baseParams.thumbPercentTo)return"valueTo";if(e>this.baseParams.thumbPercentFrom&&void 0!==this.baseParams.thumbPercentTo&&e<this.baseParams.thumbPercentTo){const t=e-this.baseParams.thumbPercentFrom,s=this.baseParams.thumbPercentTo-e;if(t===s||t<s)return"valueFrom";if(t>s)return"valueTo"}return"valueTo"}validatePercent(e,t,s){const{isRange:i}=s;if(!i){const i=Object.assign(Object.assign({},s),{valueFrom:t,thumbPercentFrom:e});return this.validateData(i)}if(i&&void 0!==s.thumbPercentTo){const{thumbPercentFrom:i,thumbPercentTo:a}=s;let r="thumbPercentFrom",o="valueFrom";if(Number(e)>a&&(r="thumbPercentTo",o="valueTo"),Number(e)>i&&Number(e)<a){e-i>=(a-i)/2&&(r="thumbPercentTo",o="valueTo")}const n=Object.assign(Object.assign({},s),{[o]:t,[r]:e});return this.validateData(n)}return s}setData(e){const{min:t,max:s,valueFrom:i,step:a,scalePercentGap:r,valueTo:o}=e;this.baseParams.min=t,this.baseParams.max=s,this.baseParams.valueFrom=i,this.baseParams.step=a,this.scalePercentGap=r,void 0!==this.scalePercentGap&&"number"!=typeof this.scalePercentGap&&(this.scalePercentGap=void 0),void 0!==this.booleanVariables&&(this.booleanVariables.isRange&&void 0!==o&&(this.baseParams.valueTo=o),this.baseParams.stepPercent=this.baseParams.step/(this.findRange()/100))}setBooleans(e){const{isRange:t,isTip:s,isVertical:i,isProgress:a,scaleMarks:r}=e;return void 0===this.booleanVariables?{}:(this.booleanVariables.isRange="boolean"==typeof t&&t,this.booleanVariables.isTip="boolean"==typeof s&&s,this.booleanVariables.isVertical="boolean"==typeof i&&i,this.booleanVariables.isProgress="boolean"==typeof a&&a,this.booleanVariables.scaleMarks="boolean"==typeof r&&r,{isRange:this.booleanVariables.isRange,isTip:this.booleanVariables.isTip,isVertical:this.booleanVariables.isVertical,isProgress:this.booleanVariables.isProgress,scaleMarks:this.booleanVariables.scaleMarks})}validateGap(e){let t=e;return(t<0||t>100)&&(t=this.DEFAULT_GAP),t}checkRange(){void 0!==this.resultObject&&(Number.isNaN(this.baseParams.min)&&(this.baseParams.min=0),Number.isNaN(this.baseParams.max)&&(this.baseParams.max=10),this.baseParams.min===this.baseParams.max&&(this.baseParams.max=this.baseParams.min+this.baseParams.step),this.baseParams.min>this.baseParams.max&&([this.baseParams.min,this.baseParams.max]=[this.baseParams.max,this.baseParams.min]),this.resultObject.min=this.baseParams.min,this.resultObject.max=this.baseParams.max)}checkStep(){if(void 0===this.resultObject)return;Number.isNaN(this.baseParams.step)&&(this.baseParams.step=1);const e=this.findRange();this.baseParams.step>e&&(this.baseParams.step=e),this.baseParams.step<.001&&(this.baseParams.step=.001),this.baseParams.step||(this.baseParams.step=1),this.resultObject.step=this.baseParams.step}findRange(){return this.baseParams.max-this.baseParams.min}checkValues(){void 0!==this.booleanVariables&&(this.baseParams.valueFrom=this.checkValue(this.baseParams.valueFrom),this.booleanVariables.isRange&&void 0!==this.baseParams.valueTo&&(this.baseParams.valueTo=this.checkValue(this.baseParams.valueTo)),void 0!==this.baseParams.valueTo&&this.baseParams.valueFrom>this.baseParams.valueTo&&this.booleanVariables.isRange&&([this.baseParams.valueFrom,this.baseParams.valueTo]=[this.baseParams.valueTo,this.baseParams.valueFrom]),void 0!==this.resultObject&&(this.resultObject.valueFrom=this.baseParams.valueFrom,this.booleanVariables.isRange&&(this.resultObject.valueTo=this.baseParams.valueTo)))}checkValue(e){let t=e;if(Number.isNaN(t)&&(t=0),t===this.baseParams.max)return t=this.baseParams.max,t;if(t%this.baseParams.step!=0&&t!==this.baseParams.min){const e=Math.round((t-this.baseParams.min)/this.baseParams.step);t=this.baseParams.min+this.baseParams.step*e}return t>this.baseParams.max&&(t=this.baseParams.max),t<this.baseParams.min&&(t=this.baseParams.min),t}checkPercents(){void 0!==this.resultObject&&void 0!==this.booleanVariables&&(this.baseParams.thumbPercentFrom=this.checkPercent("valueFrom"),this.resultObject.thumbPercentFrom=this.baseParams.thumbPercentFrom,this.booleanVariables.isRange&&(this.baseParams.thumbPercentTo=this.checkPercent("valueTo"),this.resultObject.thumbPercentTo=this.baseParams.thumbPercentTo))}checkPercent(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"valueFrom";const t=this.baseParams[e];if(void 0===t)return 0;const s=t-this.baseParams.min;return Number((s/(this.findRange()/100)).toFixed(3))}};var M=class extends u{constructor(e){super(),this.validator=new S(e),this.validState=this.validator.validateData(e),this.model=new f(this.validState)}setState(e){const t=this.validator.validateData(e);this.model.setState(t)}getState(){if(this.model.getState().scaleMarks){const e=this.validGapMarks();return Object.assign(Object.assign({},this.model.getState()),{scaleMap:e})}return this.model.getState()}getModel(){return this.model}getValidator(){return this.validator}getValue(e){return this.model.getState()["".concat(e)]}update(e){const t=void 0===e.percent?"scaleMove":"markMove";if("scaleMove"===t){const t=this.validator.performMoveToPercent(e);let{thumbId:s}=e;if(void 0===s&&(s=this.validator.validateThumbId(t)),t===this.prevMove)return;this.prevMove=t,this.model.updateStateMove(t,s);const i=this.model.getState(),a=this.validator.validateData(i);this.model.setState(a),i.scaleMarks?this.emit(r,Object.assign(Object.assign({},this.model.getState()),{scaleMap:this.validGapMarks()})):this.emit(r,this.model.getState())}if(void 0!==e.percent&&void 0!==e.value&&"markMove"===t){const{percent:t,value:s}=e,i=this.model.getState(),a=this.validator.validatePercent(t,s,i);this.model.setState(a),this.emit(r,this.model.getState())}}setValue(e,t){const s=this.model.getState(),i=Object.assign(Object.assign({},s),{[e]:t}),a=this.validator.validateData(i);this.model.setState(a),this.emit(r,this.model.getState())}validGapMarks(){const e=this.model.getState().scalePercentGap||20,{min:t,max:s,step:i}=this.model.getState();return this.validator.validateMarks({min:t,max:s,step:i,gap:e})}};var k=class extends u{constructor(e,t){super(),this.modelFacade=new M(t),this.view=new E(e,this.modelFacade.getState()),this.subscribeModel(),this.subscribeSlider()}getState(){return this.modelFacade.getState()}setState(e){this.modelFacade.setState(e)}setValue(e,t){this.modelFacade.setValue(e,t)}getValue(e){return this.modelFacade.getValue(e)}subscribeSlider(){this.view.addSubscriber(h,this.modelFacade)}subscribeModel(){this.modelFacade.addSubscriber(r,this.view)}};var _={min:0,max:100,valueFrom:0,valueTo:0,step:1,scalePercentGap:10,scaleMarks:!1,isTip:!1,isProgress:!1,isRange:!1,isVertical:!1};a().fn.sliderPlugin=function(e){const t=Object.assign(Object.assign({},_),e);return new k(this[0],t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,