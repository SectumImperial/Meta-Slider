"use strict";(self.webpackChunkmeta_slider=self.webpackChunkmeta_slider||[]).push([[390],{390:function(t,e,s){var i=s(755),r=s.n(i);var h=class{constructor(){this.observers={}}addSubscriber(t,e){if(this.observers[t]){const s=this.observers[t];this.observers[t]=[...s,e]}else this.observers[t]=[e]}removeSubscriber(t,e){this.observers[t].filter((t=>t!==e))}emit(t,e){(this.observers[t]||[]).forEach((s=>{s.update(e,t)}))}};const a="VALUE_CHANGED",o="VALUE_START_CHANGE",n="DATA_COLLECTED",c="VALUE_CHANGED",l=" SCALE_CLICKED",u="KEY_DOWN",m="MARK_CLICKED";var d=class extends h{constructor(t,e){super(),this.isVertical=e,this.direction=this.isVertical?"clientY":"clientX",this.startPoint=this.isVertical?"top":"left",this.size=this.isVertical?"height":"width",this.mod=this.isVertical?"vertical":"horizontal",this.root=t}static createElement(t){const e=document.createElement("div");return e.className=t,e}performMouseMove(t,e){const s=s=>{s.preventDefault();const i=this.root.getBoundingClientRect()[this.startPoint],r=s[this.direction]-t-i;this.emit(o,{coordsMove:r,thumbId:e})},i=()=>{document.removeEventListener("mousemove",s),document.removeEventListener("mouseup",i)};document.addEventListener("mousemove",s),document.addEventListener("mouseup",i)}performTouchMove(t,e){const s=s=>{s.stopImmediatePropagation();const i=this.root.getBoundingClientRect()[this.startPoint],r=s.touches[0][this.direction]-t-i;this.emit(o,{coordsMove:r,thumbId:e})},i=()=>{document.removeEventListener("touchmove",s),document.removeEventListener("touchend",i)};document.addEventListener("touchmove",s),document.addEventListener("touchend",i)}performKeyDown(t,e){this.emit(u,{keyEvent:t,thumbId:e})}performClickMark(t,e){this.emit(m,{percent:t,value:e})}};var v=class extends d{constructor(t){const{root:e,positionStart:s,positionEnd:i,isVertical:r}=t;super(e,r),this.positionStart=s,this.positionEnd=i,this.progress=d.createElement("plugin-slider__progress"),this.setProgress()}setProgress(){this.progress.style[this.startPoint]="".concat(this.positionStart,"%"),this.progress.style[this.size]="".concat(this.positionEnd,"%"),this.root.append(this.progress)}setProgressPosition(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100;this.progress.style[this.startPoint]="".concat(t,"%"),this.progress.style[this.size]="".concat(e,"%")}};var b=class extends d{constructor(t,e){super(t,e),this.initScale()}getScale(){return this.scale||(this.scale=d.createElement("plugin-slider__scale")),this.scale}initScale(){this.scale=d.createElement("plugin-slider__scale"),this.isVertical&&this.scale.classList.add("plugin-slider__scale_vertical"),this.isVertical||this.scale.classList.add("plugin-slider__scale_horizontal"),this.addScale(),this.addListeners()}addScale(){this.root.append(this.scale)}addListeners(){this.scale.addEventListener("click",this.handleScaleClick.bind(this))}handleScaleClick(t){const{target:e}=t;if(!e.closest(".plugin-slider__scale"))return;if(e.classList.contains("plugin-slider__mark-value"))return;const s=this.scale.getBoundingClientRect()[this.size],i=this.scale.getBoundingClientRect()[this.startPoint],r=t[this.direction]-i;r>s||r<0||this.emitData(r,s)}emitData(t,e){const s={coordsMove:t,scaleSize:e};this.emit(l,s)}};var p=class extends d{constructor(t,e,s){super(t,s),this.marks=e,this.init()}init(){this.createMarks(),this.addListeners()}addListeners(){this.root.addEventListener("click",this.handleRootClick.bind(this))}handleRootClick(t){const e=t.target;if(null===e)return;const{value:s,percent:i}=e.dataset;e.classList.contains("plugin-slider__mark-value")&&void 0!==i&&this.performClickMark(Number(i),Number(s))}createMarks(){this.marks.forEach(((t,e)=>this.createMark(t,e)))}createMark(t,e){const s=d.createElement("plugin-slider__mark");s.classList.add("plugin-slider__mark_".concat(this.mod)),s.style[this.startPoint]="".concat(t,"%");const i=document.createElement("span");i.className="plugin-slider__mark-value",i.classList.add("plugin-slider__mark-value_".concat(this.mod)),i.dataset.value="".concat(e),i.dataset.percent="".concat(t),i.innerText="".concat(e),s.append(i),this.root.append(s)}};var g=class extends d{constructor(t){const{root:e,thumbPercent:s=0,id:i="valueFrom",isVertical:r}=t;super(e,r),this.thumbPercent=s,this.thumbId=i,this.initThumb()}initThumb(){this.thumbElement=d.createElement("plugin-slider__thumb"),this.thumbElement.id=this.thumbId,this.thumbElement.tabIndex=1,this.root.append(this.thumbElement),this.setPosition(this.thumbPercent),this.addListeners()}setPosition(t){this.thumbPercent=t,this.checkZInd(),this.thumbElement.style[this.startPoint]="".concat(this.thumbPercent,"%")}getThumb(){return this.thumbElement}getThumbId(){return this.thumbId}checkZInd(){"valueFrom"===this.thumbId&&100===this.thumbPercent&&(this.thumbElement.style.zIndex="10"),"valueFrom"===this.thumbId&&this.thumbPercent<100&&(this.thumbElement.style.zIndex="5"),"valueTo"===this.thumbId&&0===this.thumbPercent&&(this.thumbElement.style.zIndex="10"),"valueTo"===this.thumbId&&this.thumbPercent>0&&(this.thumbElement.style.zIndex="5")}addListeners(){this.thumbElement.addEventListener("mousedown",this.handleThumbMouseDown.bind(this)),this.thumbElement.addEventListener("keydown",this.handleThumbKeyDown.bind(this)),this.thumbElement.addEventListener("touchstart",this.handleThumbTouch.bind(this))}handleThumbTouch(t){t.preventDefault();const e=this.thumbElement.getBoundingClientRect()[this.startPoint];this.moved=t.touches[0][this.direction]-(e+this.thumbElement.getBoundingClientRect()[this.size]/2),super.performTouchMove(this.moved,this.thumbId)}handleThumbMouseDown(t){t.preventDefault(),this.moved=t[this.direction]-(this.thumbElement.getBoundingClientRect()[this.startPoint]+this.thumbElement.getBoundingClientRect()[this.size]/2),this.checkZInd(),super.performMouseMove(this.moved,this.thumbId)}handleThumbKeyDown(t){t.preventDefault();const{key:e}=t;"ArrowLeft"!==e&&"ArrowUp"!==e&&"ArrowRight"!==e&&"ArrowDown"!==e||t.preventDefault(),("ArrowLeft"===e&&!this.isVertical||"ArrowUp"===e&&this.isVertical)&&super.performKeyDown("decrement",this.thumbId),("ArrowRight"===e&&!this.isVertical||"ArrowDown"===e&&this.isVertical)&&super.performKeyDown("increment",this.thumbId)}};var P=class extends d{constructor(t){const{root:e,percentPosition:s,valueTip:i,isVertical:r}=t;super(e,r),this.percentPosition=s,this.valueTip=i,this.tip=this.createTip(),this.addTip()}setValueTip(t){this.tip.innerText="".concat(t)}hideTip(){this.tip.style.display="none"}showTip(){this.tip.style.display=""}setPosition(t,e){this.tip.style[this.startPoint]="".concat(t,"%"),this.tip.innerText="".concat(e)}createTip(){const t=d.createElement("plugin-slider__tip");return t.classList.add("plugin-slider__tip_".concat(this.mod)),t.innerText="".concat(this.valueTip),t.style[super.startPoint]="".concat(this.percentPosition,"%"),t}addTip(){this.root.append(this.tip)}};class T extends h{constructor(t,e){super(),this.state=e,this.createVariables(t,e),this.initSlider(),this.setState(e)}static createSlider(){const t=document.createElement("div");return t.className="plugin-slider",t}update(t,e){const{size:s}=this.sliderComponents,i=this.scaleElement.getBoundingClientRect()[s];if(e===o){const e=Object.assign(Object.assign({},t),{scaleSize:i});this.emit(n,e)}else this.emit(n,t)}setState(t){const{thumbPercentFrom:e,valueFrom:s,isRange:i,thumbPercentTo:r,valueTo:h}=t;this.setThumbs(e,r,i),this.setTips(s,h,i),this.setProgress(e,r,i)}setThumbs(t,e,s){if(this.thumbPercentFrom=t,this.thumbFrom.setPosition(this.thumbPercentFrom),s){null===this.slider.querySelector("#valueTo")&&void 0!==e&&this.setThumb("valueTo",e)}s&&void 0!==e&&this.thumbTo&&(this.thumbPercentTo=e,this.thumbTo.setPosition(this.thumbPercentTo))}setThumb(t,e){this["valueTo"===t?"thumbTo":"thumbFrom"]=new g({root:this.scaleElement,thumbPercent:e,id:t,isVertical:this.isVertical})}setTips(t,e,s){var i,r,h;const{isTip:a}=this;a&&this.tipFrom&&(this.tipValueFrom=t,this.tipFrom.setPosition(this.thumbPercentFrom,this.tipValueFrom)),this.isNeedDoubleTip()?(null===(i=this.tipFrom)||void 0===i||i.setValueTip("".concat(t," - ").concat(e)),null===(r=this.tipTo)||void 0===r||r.hideTip()):null===(h=this.tipTo)||void 0===h||h.showTip(),s&&this.tipTo&&void 0!==e&&this.thumbPercentTo&&(this.tipValueTo=e,this.tipTo.setPosition(this.thumbPercentTo,this.tipValueTo))}setTip(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"valueFrom";const e="valueFrom"===t?"tipValueFrom":"tipValueTo",s="valueFrom"===t?"tipFrom":"tipTo",i="valueFrom"===t?"thumbPercentFrom":"thumbPercentTo";"valueTo"===t&&void 0===this[i]||(this[s]=new P({root:this.scaleElement,percentPosition:this[i],valueTip:e,isVertical:this.isVertical}))}setProgress(t,e,s){var i,r,h;if(null===this.slider.querySelector(".plugin-slider__progress")){const t="number"==typeof e?e:0;this.progress=new v({root:this.scaleElement,positionStart:this.thumbPercentFrom,positionEnd:t,isVertical:this.isVertical})}this.isProgress&&s&&e&&(null===(i=this.progress)||void 0===i||i.setProgressPosition(this.thumbPercentFrom,e-t)),this.isProgress&&e===t&&(null===(r=this.progress)||void 0===r||r.setProgressPosition(0,0)),this.isProgress&&!s&&(null===(h=this.progress)||void 0===h||h.setProgressPosition(0,this.thumbPercentFrom))}initSlider(){this.slider=T.createSlider(),this.createElements(),this.addSlider()}createVariables(t,e){const{isTip:s,valueFrom:i,valueTo:r,thumbPercentFrom:h,thumbPercentTo:a,isProgress:o,isRange:n,scaleMap:c,isVertical:l,scaleMarks:u}=e;this.thumbPercentFrom=h,a&&(this.thumbPercentTo=a),this.isTip=s||!1,this.tipValueFrom=i||0,this.tipValueTo=r||0,this.isProgress=o||!1,this.isRange=n||!1,this.isVertical=l||!1,this.scaleMap=c,this.isScaleMarks=u,this.root=t}createElements(){this.sliderComponents=new d(this.slider,this.isVertical),this.scale=new b(this.slider,this.isVertical),this.scaleElement=this.scale.getScale(),this.setThumb("valueFrom",this.thumbPercentFrom),this.isRange&&void 0!==this.thumbPercentTo&&this.setThumb("valueTo",this.thumbPercentTo),this.isTip&&this.setTip("valueFrom"),this.isTip&&this.thumbPercentTo&&this.isRange&&void 0!==this.tipValueTo&&this.setTip("valueTo"),this.setProgress(this.thumbPercentFrom,0,this.isRange),this.scaleMap&&this.isScaleMarks&&(this.scaleMarks=new p(this.scaleElement,this.scaleMap,this.isVertical))}addSlider(){this.root.append(this.slider)}isNeedDoubleTip(){return this.isTip&&this.isRange&&void 0!==this.thumbPercentTo&&(this.thumbPercentTo-this.thumbPercentFrom<=2||0===this.thumbPercentTo&&0===this.thumbPercentFrom)}}var F=T;var S=class extends h{constructor(t,e){super(),this.state=e,this.initView(t,e)}updateSlider(t){this.slider.setState(t)}update(t,e){e===n&&this.emit(c,t),e===c&&this.updateSlider(t)}initView(t,e){const{isRange:s}=e;this.root=t,this.isRange=s,this.slider=new F(t,e),this.addSubscribeSlider()}addSubscribeSlider(){this.slider.thumbFrom.addSubscriber(o,this.slider),this.slider.thumbFrom.addSubscriber(u,this.slider),this.isRange&&this.slider.thumbTo&&(this.slider.thumbTo.addSubscriber(o,this.slider),this.slider.thumbTo.addSubscriber(u,this.slider)),this.slider.scale.addSubscriber(l,this.slider),this.slider.isScaleMarks&&this.slider.scaleMarks.addSubscriber(m,this.slider),this.slider.addSubscriber(l,this),this.slider.addSubscriber(n,this)}};const f={valueFrom:"thumbPercentFrom",valueTo:"thumbPercentTo"};var M=class{constructor(t){this.state=t,this.init()}setState(t){const e=this.state;this.state=Object.assign(Object.assign({},e),t)}getState(){return this.state}updateStateMove(t,e){this.findSuitablePercent(t,e)}getValue(t){return this.state["".concat(t)]}getPercentVal(){const{valueFrom:t,min:e,max:s}=this.state;return Number((t/(s-e)*100).toFixed(3))}init(){this.stepPercent=Number(this.state.step/this.findValPercent())}findSuitablePercent(t,e){const{step:s,max:i,min:r}=this.state,h=Math.floor(t/this.stepPercent),a=Math.ceil(t/this.stepPercent),o=r+s*h,n=r+s*a,c=this.stepPercent*h,l=this.stepPercent*a,u=Number((this.stepPercent/2).toFixed(3));let m,d;Number((t%this.stepPercent).toFixed(3))<u?(m=o,d=c):(m=n,d=l);const v=Math.ceil((i-r)/s),b=this.stepPercent*(v-1);(100===t||100-(100-b)/2<t)&&(m=i,d=100),void 0===d&&(d=this.stepPercent*h),this.handleMove({value:m,thumb:e,percent:d})}handleMove(t){const{value:e,thumb:s,percent:i}=t;"valueFrom"===s&&this.handleMoveFrom({value:e,thumb:s,percent:i}),"valueTo"===s&&this.handleMoveTo({value:e,thumb:s,percent:i})}handleMoveFrom(t){const{value:e,thumb:s,percent:i}=t,{valueTo:r,thumbPercentTo:h}=this.state;this.isValTheSamePos({value:e,valueAnotherThumb:r,thumbPercent:h,thumb:s,idVal:"valueFrom"})&&void 0!==r&&void 0!==h?this.updateMoved(r,h,s):void 0!==e&&this.updateMoved(e,i,s)}handleMoveTo(t){const{value:e,thumb:s,percent:i}=t,{valueFrom:r,thumbPercentFrom:h}=this.state;this.isValTheSamePos({value:e,valueAnotherThumb:r,thumbPercent:h,thumb:s,idVal:"valueTo"})&&void 0!==r?this.updateMoved(r,h,s):void 0!==e&&this.updateMoved(e,i,s)}isValTheSamePos(t){const{value:e,valueAnotherThumb:s,thumbPercent:i,thumb:r,idVal:h}=t,{isRange:a}=this.state;let o=!1;return void 0!==e&&void 0!==s&&(o="valueFrom"===h?e>s:e<s),a&&void 0!==i&&r===h&&o}findValPercent(){return this.findRange()/100}findRange(){return this.state.max-this.state.min}updateMoved(t,e,s){if(Number.isNaN(t)||void 0===e)throw new Error("Something wrong with setting new values");const i=f[s];this.setState({[s]:t,[i]:e})}};var E=class{constructor(t){this.data=t,this.DEFAULT_GAP=20,this.validateData(t)}validateData(t){const e=this.setBooleans(t);return this.setData(t),this.resultObject=Object.assign(Object.assign(Object.assign({},t),e),{thumbPercentFrom:0,thumbPercentTo:void 0}),this.checkRange(),this.checkStep(),this.checkValues(),this.checkPercents(),this.resultObject}performMoveToPercent(t){const{coordsMove:e,scaleSize:s,keyEvent:i,thumbId:r}=t;if(i){if("increment"===i&&"valueFrom"===r)return this.thumbPercentFrom+this.stepPercent;if("decrement"===i&&"valueFrom"===r)return this.thumbPercentFrom-this.stepPercent;if("increment"===i&&"valueTo"===r&&void 0!==this.thumbPercentTo)return this.thumbPercentTo+this.stepPercent;if("decrement"===i&&"valueTo"===r&&void 0!==this.thumbPercentTo)return this.thumbPercentTo-this.stepPercent}if(void 0===e||void 0===s)return 0;let h=Number((e/(s/100)).toFixed(2));return h<0&&(h=0),h>100&&(h=100),h}validateMarks(t){const{step:e,max:s,min:i,gap:r}=t,h=new Map,a=this.validateGap(r),o=this.findRange()/100,n=e/o,c=e*Math.ceil(a/n),l=Math.ceil(c/o);for(let t=0;t<=100;t+=l)if(t<=100-l){const s=e*Math.round(t/n),r=s/o,a=i+s;h.set(a,r)}return h.set(s,100),h}validateThumbId(t){if(!this.isRange)return"valueFrom";if(t<this.thumbPercentFrom)return"valueFrom";if(void 0!==this.thumbPercentTo&&t>this.thumbPercentTo)return"valueTo";if(t>this.thumbPercentFrom&&void 0!==this.thumbPercentTo&&t<this.thumbPercentTo){const e=t-this.thumbPercentFrom,s=this.thumbPercentTo-t;if(e===s||e<s)return"valueFrom";if(e>s)return"valueTo"}return"valueTo"}validatePercent(t,e,s){const{isRange:i}=s;if(!i){const i=Object.assign(Object.assign({},s),{valueFrom:e,thumbPercentFrom:t});return this.validateData(i)}if(i&&void 0!==s.thumbPercentTo){const{thumbPercentFrom:i,thumbPercentTo:r}=s;let h="thumbPercentFrom",a="valueFrom";if(Number(t)>r&&(h="thumbPercentTo",a="valueTo"),Number(t)>i&&Number(t)<r){t-i>=(r-i)/2&&(h="thumbPercentTo",a="valueTo")}const o=Object.assign(Object.assign({},s),{[a]:e,[h]:t});return this.validateData(o)}return s}setData(t){const{min:e,max:s,valueFrom:i,step:r,scalePercentGap:h,valueTo:a}=t;this.min=e,this.max=s,this.valueFrom=i,this.step=r,this.scalePercentGap=h,void 0!==this.scalePercentGap&&"number"!=typeof this.scalePercentGap&&(this.scalePercentGap=void 0),this.isRange&&void 0!==a&&(this.valueTo=a),this.stepPercent=this.step/(this.findRange()/100)}setBooleans(t){const{isRange:e,isTip:s,isVertical:i,isProgress:r,scaleMarks:h}=t;return this.isRange="boolean"==typeof e&&e,this.isTip="boolean"==typeof s&&s,this.isVertical="boolean"==typeof i&&i,this.isProgress="boolean"==typeof r&&r,this.scaleMarks="boolean"==typeof h&&h,{isRange:this.isRange,isTip:this.isTip,isVertical:this.isVertical,isProgress:this.isProgress,scaleMarks:this.scaleMarks}}validateGap(t){let e=t;return(e<0||e>100)&&(e=this.DEFAULT_GAP),e}checkRange(){Number.isNaN(this.min)&&(this.min=0),Number.isNaN(this.max)&&(this.max=10),this.min===this.max&&(this.max=this.min+this.step),this.min>this.max&&([this.min,this.max]=[this.max,this.min]),this.resultObject.min=this.min,this.resultObject.max=this.max}checkStep(){Number.isNaN(this.step)&&(this.step=1);const t=this.findRange();this.step>t&&(this.step=t),this.step<.001&&(this.step=.001),this.step||(this.step=1),this.resultObject.step=this.step}findRange(){return this.max-this.min}checkValues(){this.valueFrom=this.checkValue(this.valueFrom),this.isRange&&(this.valueTo=this.checkValue(this.valueTo)),void 0!==this.valueTo&&this.valueFrom>this.valueTo&&this.isRange&&([this.valueFrom,this.valueTo]=[this.valueTo,this.valueFrom]),this.resultObject.valueFrom=this.valueFrom,this.isRange&&(this.resultObject.valueTo=this.valueTo)}checkValue(t){let e=t;if(Number.isNaN(e)&&(e=0),e===this.max)return e=this.max,e;if(e%this.step!=0&&e!==this.min){const t=Math.round((e-this.min)/this.step);e=this.min+this.step*t}return e>this.max&&(e=this.max),e<this.min&&(e=this.min),e}checkPercents(){this.thumbPercentFrom=this.checkPercent("valueFrom"),this.resultObject.thumbPercentFrom=this.thumbPercentFrom,this.isRange&&(this.thumbPercentTo=this.checkPercent("valueTo"),this.resultObject.thumbPercentTo=this.thumbPercentTo)}checkPercent(){const t=this[arguments.length>0&&void 0!==arguments[0]?arguments[0]:"valueFrom"]-this.min;return Number((t/(this.findRange()/100)).toFixed(3))}};var V=class extends h{constructor(t){super(),this.validator=new E(t),this.validState=this.validator.validateData(t),this.model=new M(this.validState)}setState(t){const e=this.validator.validateData(t);this.model.setState(e)}getState(){if(this.model.getState().scaleMarks){const t=this.validGapMarks();return Object.assign(Object.assign({},this.model.getState()),{scaleMap:t})}return this.model.getState()}getModel(){return this.model}getValidator(){return this.validator}getValue(t){return this.model.getState()["".concat(t)]}update(t){const e=void 0===t.percent?"scaleMove":"markMove";if("scaleMove"===e){const e=this.validator.performMoveToPercent(t);let{thumbId:s}=t;if(void 0===s&&(s=this.validator.validateThumbId(e)),e===this.prevMove)return;this.prevMove=e,this.model.updateStateMove(e,s);const i=this.model.getState(),r=this.validator.validateData(i);this.model.setState(r),i.scaleMarks?this.emit(a,Object.assign(Object.assign({},this.model.getState()),{scaleMap:this.validGapMarks()})):this.emit(a,this.model.getState())}if(void 0!==t.percent&&void 0!==t.value&&"markMove"===e){const{percent:e,value:s}=t,i=this.model.getState(),r=this.validator.validatePercent(e,s,i);this.model.setState(r),this.emit(a,this.model.getState())}}setValue(t,e){const s=this.model.getState(),i=Object.assign(Object.assign({},s),{[t]:e}),r=this.validator.validateData(i);this.model.setState(r),this.emit(a,this.model.getState())}validGapMarks(){const t=this.model.getState().scalePercentGap||20,{min:e,max:s,step:i}=this.model.getState();return this.validator.validateMarks({min:e,max:s,step:i,gap:t})}};var k=class extends h{constructor(t,e){super(),this.modelFacade=new V(e),this.view=new S(t,this.modelFacade.getState()),this.subscribeModel(),this.subscribeSlider()}getState(){return this.modelFacade.getState()}setNewState(t){this.modelFacade.setState(t)}setValue(t,e){this.modelFacade.setValue(t,e)}getValue(t){return this.modelFacade.getValue(t)}subscribeSlider(){this.view.addSubscriber(c,this.modelFacade)}subscribeModel(){this.modelFacade.addSubscriber(a,this.view)}};var _={min:0,max:100,valueFrom:0,valueTo:0,step:1,scalePercentGap:10,scaleMarks:!1,isTip:!1,isProgress:!1,isRange:!1,isVertical:!1};r().fn.sliderPlugin=function(t){const e=Object.assign(Object.assign({},_),t);return new k(this[0],e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,